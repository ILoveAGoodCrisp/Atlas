{
	"script": {
		"prefix": "script",
		"body": [
			"script ${1|startup,dormant,continuous,static,command_script,stub|}"
		],
		"description": "TEMPLATE - Autofills in script and provides a list of script types"
	},
	"startup": {
		"prefix": "startup",
		"body": [
			"script startup ${1:<name>}", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template startup script"
	},
	"dormant": {
		"prefix": "dormant",
		"body": [
			"script dormant ${1:<name>}", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template dormant script"
	},
	"continuous": {
		"prefix": "continuous",
		"body": [
			"script continuous ${1:<name>}", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template static script"
	},
	"static": {
		"prefix": "static",
		"body": [
			"script static ${1|void,boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} ${2:<name>}", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template static script"
	},
	"static-w/parameter": {
		"prefix": "static-w/parameter",
		"body": [
			"script static ${1|void,boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} (${2:<name>} (${3|boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} ${4:<parameter_name>}))", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template static script with a single parameter"
	},
	"command_script": {
		"prefix": "command_script",
		"body": [
			"script command_script ${1:<cs_name>}", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template command_script"
	},
	"stub": {
		"prefix": "stub",
		"body": [
			"script stub ${1|void,boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} ${2:<name>}", "\t($0)", ""
		]
	},
	"stub-w/parameter": {
		"prefix": "stub-w/parameter",
		"body": [
			"script stub ${1|void,boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} (${2:<name>} (${3|boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} ${4:<parameter_name>}))", "\t($0)", ""
		],
		"description": "TEMPLATE - Generates an template stub script with a single parameter"
	},
	"global": {
		"prefix": "global",
		"body": [
			"global ${1|boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|} ${2:<name>} ${3:<value>}"
		],
		"description": "TEMPLATE - Generates an template Global"
	},
	"loop": {
		"prefix": "loop",
		"body": [
			"sleep_until", "\t (begin", "\t \t ${1:<expression(s)>}", "\t \t ${2:<boolean_exit_condition>}", "\t )", "${0:<wait_time_between_loops_in_ticks>}", ""
		],
		"description": "TEMPLATE - Generates an template loop"
	},
	"true": {
		"prefix": "true",
		"body": [
			"TRUE"
		]
	},
	"false": {
		"prefix": "false",
		"body": [
			"FALSE"
		]
	},
	"#value-types":{
		"prefix": "#value-types",
		"body":[
			"${1|void,boolean,real,short,long,string,script,string_id,unit_seat_mapping,trigger_volume,cutscene_flag,cutscene_camera_point,cutscene_title,cutscene_recording,device_group,ai,ai_command_list,ai_command_script,ai_behavior,ai_orders,ai_line,starting_profile,conversation,zone_set,designer_zone,point_reference,style,object_list,folder,sound,effect,damage,looping_sound,animation_graph,damage_effect,object_definition,bitmap,shader,render_model,structure_definition,lightmap_definition,cinematic_definition,cinematic_scene_definition,bink_definition,any_tag,any_tag_not_resolving,game_difficulty,team,mp_team,controller,button_preset,joystick_preset,player_color,player_character_type,voice_output_setting,voice_mask,subtitle_setting,actor_type,model_state,event,character_physics,object,unit,vehicle,weapon,device,scenery,effect_scenery,object_name,unit_name,vehicle_name,weapon_name,device_name,scenery_name,effect_scenery_name,cinematic_lightprobe,animation_budget_reference,looping_sound_budget_reference,sound_budget_reference|}"
		]
	},
	"#difficulties":{
		"prefix": "#difficulties",
		"body":[
			"${1|easy,normal,heroic,legendary,hard,impossible|}"
		]
	},
	"#teams":{
		"prefix": "#teams",
		"body":[
			"${1|default,player,human,covenant,flood,sentinel,heretic,prophet,guilty,unused9,unused10,unused11,unused12,unused13,unused14,unused15|}"
		]
	},
	"#teams-mp":{
		"prefix": "#teams-mp",
		"body":[
			"${1|mp_team_red,mp_team_blue,mp_team_green,mp_team_yellow,mp_team_purple,mp_team_orange,mp_team_brown,mp_team_grey|}"
		]
	},
	"#controllers":{
		"prefix": "#controllers",
		"body":[
			"${1|controller1,controller2,controller3,controller4|}"
		]
	},
	"#button-presets":{
		"prefix": "#button-presets",
		"body":[
			"${1|standard|community|boxer|green_thumb|professional|evolved|community2|universal_recon|universal_reclaimer|universal_zoom_and_shoot|universal_bumper_jumper|universal_green_fingers|standard|south_paw|legacy|legacy_south_paw|}"
		]
	},
	"#player-colors":{
		"prefix": "#player-colors",
		"body":[
			"${1|player_color_00,player_color_01,player_color_02,player_color_03,player_color_04,player_color_05,player_color_06,player_color_07,player_color_08,player_color_09,player_color_10,player_color_11,player_color_12,player_color_13,player_color_14,player_color_15,player_color_16,player_color_17,player_color_18,player_color_19,player_color_20,player_color_21,player_color_22,player_color_23,player_color_24,player_color_25,player_color_26,player_color_27,player_color_28,player_color_29,player_color_30,player_color_31|}"
		]
	},
	"#player-character-types":{
		"prefix": "#player-character-types",
		"body":[
			"${1|sp_masterchief,sp_dervish,mp_masterchief,mp_elite,coop_elite,monitor|}"
		]
	},
	"#voice-output-settings":{
		"prefix": "#voice-output-settings",
		"body":[
			"${1|default,headset|}"
		]
	},
	"#voice-masks":{
		"prefix": "#voice-masks",
		"body":[
			"${1|none,anonymous|}"
		]
	},
	"#subtitle-settings":{
		"prefix": "#subtitle-settings",
		"body":[
			"${1|automatic,enabled,disabled|}"
		]
	},
	"#actor-types":{
		"prefix": "#actor-types",
		"body":[
			"${1|elite,jackal,grunt,hunter,engineer,assassin,player,marine,crew,combat_form,infection_form,carrier_form,monitor,sentinel,none,mounted_weapon,brute,prophet,bugger,juggernaut,pure_form_stealth,pure_form_tank,pure_form_ranged,scarab,guardian|}"
		]
	},
	"#model-states":{
		"prefix": "#model-states",
		"body":[
			"${1|standard,minor_damage,medium_damage,major_damage,destroyed|}"
		]
	},
	"#events":{
		"prefix": "#events",
		"body":[
			"${1|verbose,status,message,warning,error,critical,none|}"
		]
	},
	"#character-physics":{
		"prefix": "#character-physics",
		"body":[
			"${1|none,player,biped|}"
		]
	},
	"#hud-corners":{
		"prefix": "#hud-corners",
		"body":[
			"${1|top_left,top_right,bottom_left,bottom_right,center|}"
		]
	},
	"#ai-default-states":{
		"prefix": "#ai-default-states",
		"body":[
			"${1|alert,sleep,move_repeat,move_loop,move_loop_back_and_forth,move_loop_random,move_random,guard,guard_at_position,search,flee|}"
		]
	},
	"#ai-get":{
		"prefix": "#ai-get",
		"body":[
			"${1|ai_current_squad,ai_current_actor|}"
		]
	},
	"#ai-combat-statuses":{
		"prefix": "#ai-combat-statuses",
		"body":[
			"${1|ai_combat_status_asleep,ai_combat_status_idle,ai_combat_status_alert,ai_combat_status_active,ai_combat_status_uninspected,ai_combat_status_definite,ai_combat_status_certain,ai_combat_status_visible,ai_combat_status_clear_los,ai_combat_status_dangerous|}"
		]
	},
	"#ai-task-statuses":{
		"prefix": "#ai-task-statuses",
		"body":[
			"${1|ai_task_status_never,ai_task_status_occupied,ai_task_status_empty,ai_task_status_inactive,ai_task_status_exhausted|}"
		]
	},
	"#ai-actions":{
		"prefix": "#ai-actions",
		"body":[
			"${1|ai_action_berserk,ai_action_surprise_front,ai_action_surprise_back,ai_action_evade_left,ai_action_evade_right,ai_action_dive_forward,ai_action_dive_back,ai_action_dive_left,ai_action_dive_right,ai_action_advance,ai_action_cheer,ai_action_fallback,ai_action_hold,ai_action_point,ai_action_posing,ai_action_shakefist,ai_action_signal_attack,ai_action_signal_move,ai_action_taunt,ai_action_warn,ai_action_wave|}"
		]
	},
	"#ai-activities":{
		"prefix": "#ai-activities",
		"body":[
			"${1|ai_activity_none,ai_activity_patrol,ai_activity_stand,ai_activity_crouch,ai_activity_stand_drawn,ai_activity_crouch_drawn,ai_activity_corner,ai_activity_corner_open,ai_activity_bunker,ai_activity_bunker_open,ai_activity_combat,ai_activity_backup,ai_activity_guard,ai_activity_guard_crouch,ai_activity_guard_wall,ai_activity_typing,ai_activity_kneel,ai_activity_gaze,ai_activity_poke,ai_activity_sniff,ai_activity_track,ai_activity_watch,ai_activity_examine,ai_activity_sleep,ai_activity_at_ease,ai_activity_cower,ai_activity_tai_chi,ai_activity_pee,ai_activity_doze,ai_activity_eat,ai_activity_medic,ai_activity_work,ai_activity_cheering,ai_activity_injured,ai_activity_captured|}"
		]
	}, 
	"#ai-morph-globals":{
		"prefix": "#ai-morph-globals",
		"body":[
			"${1|morph_disallowed,morph_time_ranged_tank,morph_time_ranged_stealth,morph_time_tank_ranged,morph_time_tank_stealth,morph_time_stealth_ranged,morph_time_stealth_tank,morph_form_ranged,morph_form_tank,morph_form_stealth|}"
		]
	},
	"abs_integer": { "prefix": "abs_integer", "description": "[1]  <long>  return the absolute (non-negative) value of an integer", "body": [ "abs_integer ${1:<long>}" ] },
	"abs_real": { "prefix": "abs_real", "description": "[1]  <real>  return the absolute (non-negative) value of a real", "body": [ "abs_real ${1:<real>}" ] },
	"achievement_grant_to_player": { "prefix": "achievement_grant_to_player", "description": "[3]  award named achievement to player", "body": [ "achievement_grant_to_player ${1:<short>} ${0:<string_id>}" ] },
	"achievement_was_earned_by_player": { "prefix": "achievement_was_earned_by_player", "description": "[3]  <boolean>  check if player has been awarded named achievement", "body": [ "achievement_was_earned_by_player ${1:<short>} ${0:<string_id>}" ] },
	"achievements_enable": { "prefix": "achievements_enable", "description": "[3]  enable or disable the awarding of achievements", "body": [ "achievements_enable ${1:<boolean>}" ] },
	"achievements_skip_validation_checks": { "prefix": "achievements_skip_validation_checks", "description": "[3]  toggle the disabling of validation checks on achievement awarding", "body": [ "achievements_skip_validation_checks ${1:<boolean>}" ] },
	"activate_nav_point_flag": { "prefix": "activate_nav_point_flag", "description": "[1,2]  activates a nav point type <string> attached to (local) player <unit> anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail", "body": [ "activate_nav_point_flag ${1:<navpoint>} ${2:<unit>} ${3:<cutscene_flag>} ${0:<real>}" ] },
	"activate_nav_point_object": { "prefix": "activate_nav_point_object", "description": "[1,2]  activates a nav point type <string> attached to (local) player <unit> anchored to an object with a vertical offset <real>. If the player is not local to the machine, this will fail", "body": [ "activate_nav_point_object ${1:<navpoint>} ${2:<unit>} ${3:<object>} ${0:<real>}" ] },
	"activate_team_nav_point_flag": { "prefix": "activate_team_nav_point_flag", "description": "[1,2]  activates a nav point type <string> attached to a team anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail", "body": [ "activate_team_nav_point_flag ${1:<navpoint>} ${2:<team>} ${3:<cutscene_flag>} ${0:<real>}" ] },
	"activate_team_nav_point_object": { "prefix": "activate_team_nav_point_object", "description": "[1,2]  activates a nav point type <string> attached to a team anchored to an object with a vertical offset <real>. If the player is not local to the machine, this will fail", "body": [ "activate_team_nav_point_object ${1:<navpoint>} ${2:<team>} ${3:<object>} ${0:<real>}" ] },
	"add_recycling_volume": { "prefix": "add_recycling_volume", "description": "[3]  removes garbage in specified trigger volume to a max count over n seconds Syntax: <trigger_volume> <max_count> <time_to_collect (integer secs)>", "body": [ "add_recycling_volume ${1:<trigger_volume>} ${2:<long>} ${0:<long>}" ] },
	"ai": { "prefix": "ai", "description": "[1]  turns all AI on or off", "body": [ "ai ${1:<boolean>}" ] },
	"ai_activity_abort": { "prefix": "ai_activity_abort", "description": "[3]  Aborts the activities running on the given AI(s)", "body": [ "ai_activity_abort ${1:<ai>}" ] },
	"ai_activity_set": { "prefix": "ai_activity_set", "description": "[3]  Set the given activity running on the given AI(s)", "body": [ "ai_activity_set ${1:<ai>} ${0:<string_id>}" ] },
	"ai_actors": { "prefix": "ai_actors", "description": "[1,2,3]  <object_list>  converts an ai reference to an object list", "body": [ "ai_actors ${1:<ai>}" ] },
	"ai_allegiance": { "prefix": "ai_allegiance", "description": "[1,2,3]  creates an allegiance between two teams", "body": [ "ai_allegiance ${1:<team>} ${0:<team>}" ] },
	"ai_allegiance_break": { "prefix": "ai_allegiance_break", "description": "[3]  fake a betrayal incident between two teams", "body": [ "ai_allegiance_break ${1:<team>} ${0:<team>}" ] },
	"ai_allegiance_broken": { "prefix": "ai_allegiance_broken", "description": "[1,2,3]  <boolean>  returns whether two teams have an allegiance that is currently broken by traitorous behavior", "body": [ "ai_allegiance_broken ${1:<team>} ${0:<team>}" ] },
	"ai_allegiance_remove": { "prefix": "ai_allegiance_remove", "description": "[1,2,3]  destroys an allegiance between two teams", "body": [ "ai_allegiance_remove ${1:<team>} ${0:<team>}" ] },
	"ai_allow_charge": { "prefix": "ai_allow_charge", "description": "[1]  either enables or disables charging behavior for a group of actors", "body": [ "ai_allow_charge ${1:<ai>} ${0:<boolean>}" ] },
	"ai_allow_dormant": { "prefix": "ai_allow_dormant", "description": "[1,2,3]  either enables or disables automatic dormancy for a group of actors", "body": [ "ai_allow_dormant ${1:<ai>} ${0:<boolean>}" ] },
	"ai_attach": { "prefix": "ai_attach", "description": "[1,2,3]  attaches the specified unit to the specified encounter", "body": [ "ai_attach ${1:<unit>} ${0:<ai>}" ] },
	"ai_attach_free": { "prefix": "ai_attach_free", "description": "[1]  attaches a unit to a newly created free actor of the specified type", "body": [ "ai_attach_free ${1:<unit>} ${0:<actor_variant>}" ] },
	"ai_attach_units": { "prefix": "ai_attach_units", "description": "[2,3]  attaches the specified list of units to the specified encounter", "body": [ "ai_attach_units ${1:<object_list>} ${0:<ai>}" ] },
	"ai_attack": { "prefix": "ai_attack", "description": "[1]  makes the specified platoon(s) go into the attacking state", "body": [ "ai_attack ${1:<ai>}" ] },
	"ai_automatic_migration_target": { "prefix": "ai_automatic_migration_target", "description": "[1]  enables or disables a squad as being an automatic migration target", "body": [ "ai_automatic_migration_target ${1:<ai>} ${0:<boolean>}" ] },
	"ai_berserk": { "prefix": "ai_berserk", "description": "[1,2,3]  forces a group of actors to start or stop berserking", "body": [ "ai_berserk ${1:<ai>} ${0:<boolean>}" ] },
	"ai_body_count": { "prefix": "ai_body_count", "description": "[3]  <short>  return the number of actors who have died in the completiong of the given objective/task", "body": [ "ai_body_count ${1:<ai>}" ] },
	"ai_braindead": { "prefix": "ai_braindead", "description": "[1,2,3]  makes a group of actors braindead, or restores them to life (in their initial state)", "body": [ "ai_braindead ${1:<ai>} ${0:<boolean>}" ] },
	"ai_braindead_by_unit": { "prefix": "ai_braindead_by_unit", "description": "[1,2,3]  makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)", "body": [ "ai_braindead_by_unit ${1:<object_list>} ${0:<boolean>}" ] },
	"ai_bring_forward": { "prefix": "ai_bring_forward", "description": "[3]  teleports the given mission critical AI character to the current encounter, if beyond the given range from a player", "body": [ "ai_bring_forward ${1:<object>} ${0:<real>}" ] },
	"ai_cannot_die": { "prefix": "ai_cannot_die", "description": "[2,3]  AI cannot die from damage (as opposed to by scripting)", "body": [ "ai_cannot_die ${1:<ai>} ${0:<boolean>}" ] },
	"ai_carrying_player": { "prefix": "ai_carrying_player", "description": "[3]  <boolean>  Returns whether any of the given AI are in a vehicle with the player", "body": [ "ai_carrying_player ${1:<ai>}" ] },
	"ai_combat_status": { "prefix": "ai_combat_status", "description": "[2,3]  <short>  Returns the highest integer combat status in the given squad-group/squad/actor", "body": [ "ai_combat_status ${1:<ai>}" ] },
	"ai_command_list": { "prefix": "ai_command_list", "description": "[1]  tells a group of actors to begin executing the specified command list", "body": [ "ai_command_list ${1:<ai>} ${0:<ai_command_list>}" ] },
	"ai_command_list_advance": { "prefix": "ai_command_list_advance", "description": "[1]  tells a group of actors that are running a command list that they may advance further along the list (if they are waiting for a stimulus)", "body": [ "ai_command_list_advance ${1:<ai>}" ] },
	"ai_command_list_advance_by_unit": { "prefix": "ai_command_list_advance_by_unit", "description": "[1]  just like ai_command_list_advance but operates upon a unit instead", "body": [ "ai_command_list_advance_by_unit ${1:<unit>}" ] },
	"ai_command_list_by_unit": { "prefix": "ai_command_list_by_unit", "description": "[1]  tells a named unit to begin executing the specified command list", "body": [ "ai_command_list_by_unit ${1:<unit>} ${0:<ai_command_list>}" ] },
	"ai_command_list_status": { "prefix": "ai_command_list_status", "description": "[1]  <short>  gets the status of a number of units running command lists: 0 = none, 1 = finished command list, 2 = waiting for stimulus, 3 = running command list", "body": [ "ai_command_list_status ${1:<object_list>}" ] },
	"ai_conversation": { "prefix": "ai_conversation", "description": "[1]  <boolean>  tries to add an entry to the list of conversations waiting to play. returns FALSE if the required units could not be found to play the conversation, or if the player is too far away and the 'delay' flag is not set", "body": [ "ai_conversation ${1:<conversation>}" ] },
	"ai_conversation_advance": { "prefix": "ai_conversation_advance", "description": "[1]  tells a conversation that it may advance", "body": [ "ai_conversation_advance ${1:<conversation>}" ] },
	"ai_conversation_line": { "prefix": "ai_conversation_line", "description": "[1]  <short>  returns which line the conversation is currently playing, or 999 if the conversation is not currently playing", "body": [ "ai_conversation_line ${1:<conversation>}" ] },
	"ai_conversation_status": { "prefix": "ai_conversation_status", "description": "[1]  <short>  returns the status of a conversation (0=none, 1=trying to begin, 2=waiting for guys to get in position, 3=playing, 4=waiting to advance, 5=could not begin, 6=finished successfully, 7=aborted midway", "body": [ "ai_conversation_status ${1:<conversation>}" ] },
	"ai_conversation_stop": { "prefix": "ai_conversation_stop", "description": "[1]  stops a conversation from playing or trying to play", "body": [ "ai_conversation_stop ${1:<conversation>}" ] },
	"ai_debug_communication_focus": { "prefix": "ai_debug_communication_focus", "description": "[1]  focuses (or stops focusing) a set of unit vocalization types", "body": [ "ai_debug_communication_focus ${1:<string(s)>}" ] },
	"ai_debug_communication_ignore": { "prefix": "ai_debug_communication_ignore", "description": "[1]  ignores (or stops ignoring) a set of AI communication types when printing out communications", "body": [ "ai_debug_communication_ignore ${1:<string(s)>}" ] },
	"ai_debug_communication_suppress": { "prefix": "ai_debug_communication_suppress", "description": "[1]  suppresses (or stops suppressing) a set of AI communication types", "body": [ "ai_debug_communication_suppress ${1:<string(s)>}" ] },
	"ai_debug_sound_point_set": { "prefix": "ai_debug_sound_point_set", "description": "[2]  drops the AI debugging sound point at the camera location", "body": [ "ai_debug_sound_point_set" ] },
	"ai_defend": { "prefix": "ai_defend", "description": "[1]  makes the specified platoon(s) go into the defending state", "body": [ "ai_defend ${1:<ai>}" ] },
	"ai_deselect": { "prefix": "ai_deselect", "description": "[2,3]  clears the selected encounter", "body": [ "ai_deselect" ] },
	"ai_detach": { "prefix": "ai_detach", "description": "[1,2,3]  detaches the specified unit from all AI", "body": [ "ai_detach ${1:<unit>}" ] },
	"ai_detach_units": { "prefix": "ai_detach_units", "description": "[2,3]  detaches the specified list of units from all AI", "body": [ "ai_detach_units ${1:<object_list>}" ] },
	"ai_dialogue_break_on_vocalization": { "prefix": "ai_dialogue_break_on_vocalization", "description": "[2,3]  break when the following vocalization is chosen for utterance", "body": [ "ai_dialogue_break_on_vocalization ${1:<string_id>}" ] },
	"ai_dialogue_enable": { "prefix": "ai_dialogue_enable", "description": "[2,3]  turn combat dialogue on/off", "body": [ "ai_dialogue_enable ${1:<boolean>}" ] },
	"ai_dialogue_log_dump": { "prefix": "ai_dialogue_log_dump", "description": "[2,3]  dump a file of the given name with csv statistics on vocalizations", "body": [ "ai_dialogue_log_dump ${1:<string>}" ] },
	"ai_dialogue_log_reset": { "prefix": "ai_dialogue_log_reset", "description": "[2,3]  reset the dialogue log", "body": [ "ai_dialogue_log_reset" ] },
	"ai_dialogue_triggers": { "prefix": "ai_dialogue_triggers", "description": "[1]  turns impromptu dialogue on or off", "body": [ "ai_dialogue_triggers ${1:<boolean>}" ] },
	"ai_disposable": { "prefix": "ai_disposable", "description": "[2,3]  enables or disables automatic garbage collection for actors in the specified encounter and/or squad", "body": [ "ai_disposable ${1:<ai>} ${0:<boolean>}" ] },
	"ai_disregard": { "prefix": "ai_disregard", "description": "[1,2,3]  if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again", "body": [ "ai_disregard ${1:<object_list>} ${0:<boolean>}" ] },
	"ai_dont_do_avoidance": { "prefix": "ai_dont_do_avoidance", "description": "[3]  set the AI to not do any vector avoidance when flying", "body": [ "ai_dont_do_avoidance ${1:<ai>} ${0:<boolean>}" ] },
	"ai_enable": { "prefix": "ai_enable", "description": "[2,3]  turns all AI on or off", "body": [ "ai_enable ${1:<boolean>}" ] },
	"ai_enabled": { "prefix": "ai_enabled", "description": "[2,3]  <boolean>  returns whether AI is turned on or off", "body": [ "ai_enabled" ] },
	"ai_enter_squad_vehicles": { "prefix": "ai_enter_squad_vehicles", "description": "[2,3]  <short>  Instructs the ai in the given squad to get in all their vehicles", "body": [ "ai_enter_squad_vehicles ${1:<ai>}" ] },
	"ai_erase": { "prefix": "ai_erase", "description": "[1,2,3]  erases the specified encounter and/or squad", "body": [ "ai_erase ${1:<ai>}" ] },
	"ai_erase_all": { "prefix": "ai_erase_all", "description": "[1,2,3]  erases all AI", "body": [ "ai_erase_all" ] },
	"ai_erase_inactive": { "prefix": "ai_erase_inactive", "description": "[3]  Erase inactive actors in the given ai index, and any of those actors who become inactive within the next designated ticks", "body": [ "ai_erase_inactive ${1:<ai>} ${0:<short>}" ] },
	"ai_exit_vehicle": { "prefix": "ai_exit_vehicle", "description": "[1]  tells a group of actors to get out of any vehicles that they are in", "body": [ "ai_exit_vehicle ${1:<ai>}" ] },
	"ai_fighting_count": { "prefix": "ai_fighting_count", "description": "[2,3]  <short>  return the number of actors that are fighting in a squad or squad_group", "body": [ "ai_fighting_count ${1:<ai>}" ] },
	"ai_flood_disperse": { "prefix": "ai_flood_disperse", "description": "[3]  Disperese a flood encounter, stimulating the various forms to break down into infections and transition to the new objective", "body": [ "ai_flood_disperse ${1:<ai>} ${0:<ai>}" ] },
	"ai_follow_distance": { "prefix": "ai_follow_distance", "description": "[1]  sets the distance threshold which will cause squads to migrate when following someone", "body": [ "ai_follow_distance ${1:<ai>} ${0:<real>}" ] },
	"ai_follow_target_ai": { "prefix": "ai_follow_target_ai", "description": "[1]  sets the follow target for an encounter to be a group of AI (encounter, squad or platoon)", "body": [ "ai_follow_target_ai ${1:<ai>} ${0:<ai>}" ] },
	"ai_follow_target_disable": { "prefix": "ai_follow_target_disable", "description": "[1]  turns off following for an encounter", "body": [ "ai_follow_target_disable ${1:<ai>}" ] },
	"ai_follow_target_players": { "prefix": "ai_follow_target_players", "description": "[1]  sets the follow target for an encounter to be the closest player", "body": [ "ai_follow_target_players ${1:<ai>}" ] },
	"ai_follow_target_unit": { "prefix": "ai_follow_target_unit", "description": "[1]  sets the follow target for an encounter to be a specific unit", "body": [ "ai_follow_target_unit ${1:<ai>} ${0:<unit>}" ] },
	"ai_force_active": { "prefix": "ai_force_active", "description": "[1,2,3]  forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby", "body": [ "ai_force_active ${1:<ai>} ${0:<boolean>}" ] },
	"ai_force_active_by_unit": { "prefix": "ai_force_active_by_unit", "description": "[1,2,3]  forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby", "body": [ "ai_force_active_by_unit ${1:<unit>} ${0:<boolean>}" ] },
	"ai_free": { "prefix": "ai_free", "description": "[1]  removes a group of actors from their encounter and sets them free", "body": [ "ai_free ${1:<ai>}" ] },
	"ai_free_units": { "prefix": "ai_free_units", "description": "[1]  removes a set of units from their encounter (if any) and sets them free", "body": [ "ai_free_units ${1:<object_list>}" ] },
	"ai_get_object": { "prefix": "ai_get_object", "description": "[2,3]  <object>  returns the unit/object corresponding to the given actor", "body": [ "ai_get_object ${1:<ai>}" ] },
	"ai_get_point_count": { "prefix": "ai_get_point_count", "description": "[3]  <long>  returns the number of points in the given point set", "body": [ "ai_get_point_count ${1:<point_reference>}" ] },
	"ai_get_squad": { "prefix": "ai_get_squad", "description": "[3]  <ai>  returns the squad of the given actor. Invalid if the given ai is NOT an actor-type (i.e. is itself a squad or squad group or task)", "body": [ "ai_get_squad ${1:<ai>}" ] },
	"ai_get_turret_ai": { "prefix": "ai_get_turret_ai", "description": "[3]  <ai>  returns an the ai controlling the Nth turret attached to the given ai (or its vehicle)", "body": [ "ai_get_turret_ai ${1:<ai>} ${0:<short>}" ] },
	"ai_get_unit": { "prefix": "ai_get_unit", "description": "[2,3]  <unit>  returns the unit/object corresponding to the given actor", "body": [ "ai_get_unit ${1:<ai>}" ] },
	"ai_go_to_vehicle": { "prefix": "ai_go_to_vehicle", "description": "[1]  tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles", "body": [ "ai_go_to_vehicle ${1:<ai>} ${2:<unit>} ${0:<string>}" ] },
	"ai_go_to_vehicle_override": { "prefix": "ai_go_to_vehicle_override", "description": "[1]  tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... NB: any actors who are already going to vehicles will stop and go to this one instead!", "body": [ "ai_go_to_vehicle_override ${1:<ai>} ${2:<unit>} ${0:<string>}" ] },
	"ai_going_to_vehicle": { "prefix": "ai_going_to_vehicle", "description": "[1]  <short>  return the number of actors that are still trying to get into the specified vehicle", "body": [ "ai_going_to_vehicle ${1:<unit>}" ] },
	"ai_grenades": { "prefix": "ai_grenades", "description": "[1,2,3]  turns grenade inventory on or off", "body": [ "ai_grenades ${1:<boolean>}" ] },
	"ai_in_vehicle_count": { "prefix": "ai_in_vehicle_count", "description": "[3]  <short>  return the number of living actors in the specified encounter and/or squad who are currently in a vehicle", "body": [ "ai_in_vehicle_count ${1:<ai>}" ] },
	"ai_infection_suppress": { "prefix": "ai_infection_suppress", "description": "[3]  disable infection for this number of ticks", "body": [ "ai_infection_suppress ${1:<long>}" ] },
	"ai_is_attacking": { "prefix": "ai_is_attacking", "description": "[1,2,3]  <boolean>  returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)", "body": [ "ai_is_attacking ${1:<ai>}" ] },
	"ai_kill": { "prefix": "ai_kill", "description": "[1,2,3]  instantly kills the specified encounter and/or squad", "body": [ "ai_kill ${1:<ai>}" ] },
	"ai_kill_silent": { "prefix": "ai_kill_silent", "description": "[1,2,3]  instantly and silently (no animation or sound played) kills the specified encounter and/or squad", "body": [ "ai_kill_silent ${1:<ai>}" ] },
	"ai_leadership": { "prefix": "ai_leadership", "description": "[3]  <boolean>  Returns whether a squad or task has a leader", "body": [ "ai_leadership ${1:<ai>}" ] },
	"ai_leadership_all": { "prefix": "ai_leadership_all", "description": "[3]  <boolean>  Returns whether a task or any of its children has a leader", "body": [ "ai_leadership_all ${1:<ai>}" ] },
	"ai_lines": { "prefix": "ai_lines", "description": "[3]  cycles through AI line-spray modes", "body": [ "ai_lines" ] },
	"ai_link_activation": { "prefix": "ai_link_activation", "description": "[1]  links the first encounter so that it will be made active whenever it detects that the second encounter is active", "body": [ "ai_link_activation ${1:<ai>} ${0:<ai>}" ] },
	"ai_living_count": { "prefix": "ai_living_count", "description": "[1,2,3]  <short>  return the number of living actors in the specified encounter and/or squad", "body": [ "ai_living_count ${1:<ai>}" ] },
	"ai_living_fraction": { "prefix": "ai_living_fraction", "description": "[1,2,3]  <real>  return the fraction [0-1] of living actors in the specified encounter and/or squad", "body": [ "ai_living_fraction ${1:<ai>}" ] },
	"ai_look_at_object": { "prefix": "ai_look_at_object", "description": "[1]  tells an actor to look at an object until further notice", "body": [ "ai_look_at_object ${1:<unit>} ${0:<object>}" ] },
	"ai_magically_see": { "prefix": "ai_magically_see", "description": "[2,3]  Make one squad magically aware of another", "body": [ "ai_magically_see ${1:<ai>} ${0:<ai>}" ] },
	"ai_magically_see_encounter": { "prefix": "ai_magically_see_encounter", "description": "[1]  makes one encounter magically aware of another", "body": [ "ai_magically_see_encounter ${1:<ai>} ${0:<ai>}" ] },
	"ai_magically_see_object": { "prefix": "ai_magically_see_object", "description": "[2,3]  Make a squad magically aware of a particular object", "body": [ "ai_magically_see_object ${1:<ai>} ${0:<object>}" ] },
	"ai_magically_see_players": { "prefix": "ai_magically_see_players", "description": "[1]  makes an encounter magically aware of nearby players", "body": [ "ai_magically_see_players ${1:<ai>}" ] },
	"ai_magically_see_unit": { "prefix": "ai_magically_see_unit", "description": "[1]  makes an encounter magically aware of the specified unit", "body": [ "ai_magically_see_unit ${1:<ai>} ${0:<unit>}" ] },
	"ai_maneuver": { "prefix": "ai_maneuver", "description": "[1]  makes all squads in the specified platoon(s) maneuver to their designated maneuver squads", "body": [ "ai_maneuver ${1:<ai>}" ] },
	"ai_maneuver_enable": { "prefix": "ai_maneuver_enable", "description": "[1]  enables or disables the maneuver/retreat rule for an encounter or platoon. the rule will still trigger, but none of the actors will be given the order to change squads", "body": [ "ai_maneuver_enable ${1:<ai>} ${0:<boolean>}" ] },
	"ai_migrate": { "prefix": "ai_migrate", "description": "[1,2,3]  makes all or part of an encounter move to another encounter", "body": [ "ai_migrate ${1:<ai>} ${0:<ai>}" ] },
	"ai_migrate_and_speak": { "prefix": "ai_migrate_and_speak", "description": "[1]  makes all or part of an encounter move to another encounter, and say their 'advance' or 'retreat' speech lines", "body": [ "ai_migrate_and_speak ${1:<ai>} ${2:<ai>} ${0:<string>}" ] },
	"ai_migrate_by_unit": { "prefix": "ai_migrate_by_unit", "description": "[1]  makes a named vehicle or group of units move to another encounter", "body": [ "ai_migrate_by_unit ${1:<object_list>} ${0:<ai>}" ] },
	"ai_migrate_form": { "prefix": "ai_migrate_form", "description": "[3]  <short>  makes the pure forms of the given type in one squad migrate to another squad (0 = ranged, 1 = tank, 2 = stalker). returns the number of actors migrated", "body": [ "ai_migrate_form ${1:<ai>} ${2:<ai>} ${0:<short>}" ] },
	"ai_migrate_infanty": { "prefix": "ai_migrate_infanty", "description": "[3]  migrates the infantry in an encounter into a different squad", "body": [ "ai_migrate_infanty ${1:<ai>} ${0:<ai>}" ] },
	"ai_morph": { "prefix": "ai_morph", "description": "[3]  <boolean>  Cause an ai (or a group of ai) to morph to the given form (0 = ranged, 1 = tank, 2 = stalker)", "body": [ "ai_morph ${1:<ai>} ${0:<short>}" ] },
	"ai_nearest_point": { "prefix": "ai_nearest_point", "description": "[3]  <point_reference>  returns the nearest point in the given point set to the given object", "body": [ "ai_nearest_point ${1:<object>} ${0:<point_reference>}" ] },
	"ai_nonswarm_count": { "prefix": "ai_nonswarm_count", "description": "[1,2,3]  <short>  return the number of non-swarm actors in the specified encounter and/or squad", "body": [ "ai_nonswarm_count ${1:<ai>}" ] },
	"ai_overcomes_oversteer": { "prefix": "ai_overcomes_oversteer", "description": "[2]  Don't use this for anything other than bug 3926.  AI magically cancels vehicle oversteer", "body": [ "ai_overcomes_oversteer ${1:<ai>} ${0:<boolean>}" ] },
	"ai_place": { "prefix": "ai_place", "description": "[1,2,3]  places the specified squad on the map", "body": [ "ai_place ${1:<ai>}" ] },
	"ai_place_in_vehicle": { "prefix": "ai_place_in_vehicle", "description": "[2,3]  places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg)", "body": [ "ai_place_in_vehicle ${1:<ai>} ${0:<ai>}" ] },
	"ai_play_line": { "prefix": "ai_play_line", "description": "[2,3]  <real>  Play the given mission dialogue line on the given ai. Returns the length of the dialogue as a real value", "body": [ "ai_play_line ${1:<ai>} ${0:<string_id>}" ] },
	"ai_play_line_at_player": { "prefix": "ai_play_line_at_player", "description": "[2,3]  <real>  Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player. Returns the length of the dialogue as a real value", "body": [ "ai_play_line_at_player ${1:<ai>} ${0:<string_id>}" ] },
	"ai_play_line_on_object": { "prefix": "ai_play_line_on_object", "description": "[2,3]  <real>  Play the given mission dialogue line on the given object (uses first available variant). Returns the length of the dialogue as a real value", "body": [ "ai_play_line_on_object ${1:<object>} ${0:<string_id>}" ] },
	"ai_play_line_on_object_for_team": { "prefix": "ai_play_line_on_object_for_team", "description": "[3]  <real>  Play the given mission dialogue line on the given object (uses first available variant) if anyone on the local box is on the specified team. Returns the length of the dialogue as a real value", "body": [ "ai_play_line_on_object_for_team ${1:<object>} ${2:<ai_line>} ${0:<mp_team>}" ] },
	"ai_play_line_on_point_set": { "prefix": "ai_play_line_on_point_set", "description": "[3]  <short>  Play the given line (optionally with the given 3-letter variant) on the N closest point to players in the given point set", "body": [ "ai_play_line_on_point_set ${1:<string_id>} ${2:<point_reference>} ${0:<short>}" ] },
	"ai_player_any_needs_vehicle": { "prefix": "ai_player_any_needs_vehicle", "description": "[3]  <boolean>  Returns if any player needs a vehicle at the moment", "body": [ "ai_player_any_needs_vehicle" ] },
	"ai_player_get_vehicle_squad": { "prefix": "ai_player_get_vehicle_squad", "description": "[3]  <ai>  Returns the squad (if any) of the vehicle the player is riding in (note, the argument is a UNIT)", "body": [ "ai_player_get_vehicle_squad ${1:<unit>}" ] },
	"ai_player_needs_vehicle": { "prefix": "ai_player_needs_vehicle", "description": "[3]  <boolean>  Returns if the given player needs a vehicle at the moment", "body": [ "ai_player_needs_vehicle ${1:<unit>}" ] },
	"ai_playfight": { "prefix": "ai_playfight", "description": "[1,2,3]  sets an encounter to be playfighting or not", "body": [ "ai_playfight ${1:<ai>} ${0:<boolean>}" ] },
	"ai_point_set_get_point": { "prefix": "ai_point_set_get_point", "description": "[3]  <point_reference>  returns Nth point in the point set", "body": [ "ai_point_set_get_point ${1:<point_reference>} ${0:<short>}" ] },
	"ai_prefer_target": { "prefix": "ai_prefer_target", "description": "[1,2,3]  if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference", "body": [ "ai_prefer_target ${1:<object_list>} ${0:<boolean>}" ] },
	"ai_prefer_target_ai": { "prefix": "ai_prefer_target_ai", "description": "[3]  the given ai (actor, squad, task, etc.) will prefer the given other ai (actor, squad, task, etc.)", "body": [ "ai_prefer_target_ai ${1:<ai>} ${2:<ai>} ${0:<boolean>}" ] },
	"ai_prefer_target_team": { "prefix": "ai_prefer_target_team", "description": "[3]  the given ai will prefer the indicated team", "body": [ "ai_prefer_target_team ${1:<ai>} ${0:<team>}" ] },
	"ai_random_smart_point": { "prefix": "ai_random_smart_point", "description": "[3]  <point_reference>  returns a point in the given point set that a player is probably going to be able to see. Args are [point set], [min distance], [max distance], [angle-from-forward], all relative to the player", "body": [ "ai_random_smart_point ${1:<point_reference>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"ai_reconnect": { "prefix": "ai_reconnect", "description": "[1,2,3]  reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)", "body": [ "ai_reconnect" ] },
	"ai_render_paths_all": { "prefix": "ai_render_paths_all", "description": "[2,3]  Turns on raw, smoothed, avoided paths and avoidance obstacles", "body": [ "ai_render_paths_all" ] },
	"ai_renew": { "prefix": "ai_renew", "description": "[1,2,3]  refreshes the health and grenade count of a group of actors, so they are as good as new", "body": [ "ai_renew ${1:<ai>}" ] },
	"ai_resurrect": { "prefix": "ai_resurrect", "description": "[3]  Resurrect the specified mission critical AI character", "body": [ "ai_resurrect ${1:<object>}" ] },
	"ai_retreat": { "prefix": "ai_retreat", "description": "[1]  makes all squads in the specified platoon(s) maneuver to their designated maneuver squads", "body": [ "ai_retreat ${1:<ai>}" ] },
	"ai_rotate_scenario": { "prefix": "ai_rotate_scenario", "description": "[3]  <boolean>  rotates ai points and normals (e.g. firing points, starting locations) around the given axis (x,y,z) by the given rotation angle (degrees)", "body": [ "ai_rotate_scenario ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"ai_scene": { "prefix": "ai_scene", "description": "[2]  <boolean>  Start the named scene, with the named command script on the named squad", "body": [ "ai_scene ${1:<string_id>} ${2:<ai_command_script>} ${0:<ai>}" ] },
	"ai_select": { "prefix": "ai_select", "description": "[1,2,3]  selects the specified squad", "body": [ "ai_select ${1:<ai>}" ] },
	"ai_set_active_camo": { "prefix": "ai_set_active_camo", "description": "[2,3]  Turn on active camoflage on actor/squad/squad-group", "body": [ "ai_set_active_camo ${1:<ai>} ${0:<boolean>}" ] },
	"ai_set_blind": { "prefix": "ai_set_blind", "description": "[1,2,3]  enables or disables sight for actors in the specified encounter", "body": [ "ai_set_blind ${1:<ai>} ${0:<boolean>}" ] },
	"ai_set_current_state": { "prefix": "ai_set_current_state", "description": "[1]  sets the current state of a group of actors. WARNING: may have unpredictable results on actors that are in combat", "body": [ "ai_set_current_state ${1:<ai>} ${0:<ai_default_state>}" ] },
	"ai_set_deaf": { "prefix": "ai_set_deaf", "description": "[1,2,3]  enables or disables hearing for actors in the specified encounter", "body": [ "ai_set_deaf ${1:<ai>} ${0:<boolean>}" ] },
	"ai_set_objective": { "prefix": "ai_set_objective", "description": "[3]  <boolean>  Sets the squad's current objective", "body": [ "ai_set_objective ${1:<ai>} ${0:<string_id>}" ] },
	"ai_set_orders": { "prefix": "ai_set_orders", "description": "[2]  Takes the squad or squad group (arg1) and gives it the order (arg3) in zone (arg2). Use the zone_name/order_name format", "body": [ "ai_set_orders ${1:<ai>} ${0:<ai_orders>}" ] },
	"ai_set_respawn": { "prefix": "ai_set_respawn", "description": "[1]  enables or disables respawning in the specified encounter", "body": [ "ai_set_respawn ${1:<ai>} ${0:<boolean>}" ] },
	"ai_set_return_state": { "prefix": "ai_set_return_state", "description": "[1]  sets the state that a group of actors will return to when they have nothing to do", "body": [ "ai_set_return_state ${1:<ai>} ${0:<ai_default_state>}" ] },
	"ai_set_targeting_group": { "prefix": "ai_set_targeting_group", "description": "[3]  Set the AI to only target other guys of targeting group X", "body": [ "ai_set_targeting_group ${1:<ai>} ${0:<short>}" ] },
	"ai_set_task": { "prefix": "ai_set_task", "description": "[3]  <boolean>  Sets the current task of the current objective (<objective>  <task>)", "body": [ "ai_set_task ${1:<ai>} ${2:<string_id>} ${0:<string_id>}" ] },
	"ai_set_task_condition": { "prefix": "ai_set_task_condition", "description": "[3]  <boolean>  Latches the task condition true or false", "body": [ "ai_set_task_condition ${1:<ai>} ${0:<boolean>}" ] },
	"ai_set_team": { "prefix": "ai_set_team", "description": "[1,2,3]  makes an encounter change to a new team", "body": [ "ai_set_team ${1:<ai>} ${0:<team>}" ] },
	"ai_set_weapon_up": { "prefix": "ai_set_weapon_up", "description": "[3]  force actor to hold their weapon up, instead of lowering it when idle. this does NOT cause them to draw their weapon if stowed", "body": [ "ai_set_weapon_up ${1:<ai>} ${0:<boolean>}" ] },
	"ai_spawn_actor": { "prefix": "ai_spawn_actor", "description": "[1]  spawns a single actor in the specified encounter and/or squad", "body": [ "ai_spawn_actor ${1:<ai>}" ] },
	"ai_spawn_count": { "prefix": "ai_spawn_count", "description": "[2,3]  <short>  returns the number of actors spawned in the given squad or squad group", "body": [ "ai_spawn_count ${1:<ai>}" ] },
	"ai_status": { "prefix": "ai_status", "description": "[1]  <short>  returns the most severe combat status of a group of actors (0=inactive, 1=noncombat, 2=guarding, 3=search/suspicious, 4=definite enemy(heard or magic awareness), 5=visible enemy, 6=engaging in combat", "body": [ "ai_status ${1:<ai>}" ] },
	"ai_stop_looking": { "prefix": "ai_stop_looking", "description": "[1]  tells an actor to stop looking at whatever it's looking at", "body": [ "ai_stop_looking ${1:<unit>}" ] },
	"ai_strength": { "prefix": "ai_strength", "description": "[1,2,3]  <real>  return the current strength (average body vitality from 0-1) of the specified encounter and/or squad", "body": [ "ai_strength ${1:<ai>}" ] },
	"ai_suppress_combat": { "prefix": "ai_suppress_combat", "description": "[2,3]  Turn on/off combat suppression on actor/squad/squad-group", "body": [ "ai_suppress_combat ${1:<ai>} ${0:<boolean>}" ] },
	"ai_swarm_count": { "prefix": "ai_swarm_count", "description": "[1,2,3]  <short>  return the number of swarm actors in the specified encounter and/or squad", "body": [ "ai_swarm_count ${1:<ai>}" ] },
	"ai_task_count": { "prefix": "ai_task_count", "description": "[3]  <short>  Returns the living count of the AI in the given task OR any of its children", "body": [ "ai_task_count ${1:<ai>}" ] },
	"ai_task_status": { "prefix": "ai_task_status", "description": "[3]  <short>  Returns the status of the given objective/task", "body": [ "ai_task_status ${1:<ai>}" ] },
	"ai_teleport": { "prefix": "ai_teleport", "description": "[3]  teleports the given squad to the given point", "body": [ "ai_teleport ${1:<ai>} ${0:<point_reference>}" ] },
	"ai_teleport_to_starting_location": { "prefix": "ai_teleport_to_starting_location", "description": "[1]  teleports a group of actors to the starting locations of their current squad(s)", "body": [ "ai_teleport_to_starting_location ${1:<ai>}" ] },
	"ai_teleport_to_starting_location_if_outside_bsp": { "prefix": "ai_teleport_to_starting_location_if_outside_bsp", "description": "[2,3]  teleports a group of actors to the starting locations of their current squad(s) if they are currently outside the world", "body": [ "ai_teleport_to_starting_location_if_outside_bsp ${1:<ai>}" ] },
	"ai_teleport_to_starting_location_if_unsupported": { "prefix": "ai_teleport_to_starting_location_if_unsupported", "description": "[1]  teleports a group of actors to the starting locations of their current squad(s), only if they are not supported by solid ground (i.e. if they are falling after switching BSPs)", "body": [ "ai_teleport_to_starting_location_if_unsupported ${1:<ai>}" ] },
	"ai_timer_expire": { "prefix": "ai_timer_expire", "description": "[1]  makes a squad's delay timer expire and releases them to enter combat", "body": [ "ai_timer_expire ${1:<ai>}" ] },
	"ai_timer_start": { "prefix": "ai_timer_start", "description": "[1]  makes a squad's delay timer start counting", "body": [ "ai_timer_start ${1:<ai>}" ] },
	"ai_translate_scenario": { "prefix": "ai_translate_scenario", "description": "[3]  <boolean>  translates ai points and objects by the given x y z", "body": [ "ai_translate_scenario ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"ai_trigger_test": { "prefix": "ai_trigger_test", "description": "[2]  <boolean>  Tests the named trigger on the named squad", "body": [ "ai_trigger_test ${1:<string>} ${0:<ai>}" ] },
	"ai_try_to_fight": { "prefix": "ai_try_to_fight", "description": "[1]  causes a group of actors to preferentially target another group of actors", "body": [ "ai_try_to_fight ${1:<ai>} ${0:<ai>}" ] },
	"ai_try_to_fight_nothing": { "prefix": "ai_try_to_fight_nothing", "description": "[1]  removes the preferential target setting from a group of actors", "body": [ "ai_try_to_fight_nothing ${1:<ai>}" ] },
	"ai_try_to_fight_player": { "prefix": "ai_try_to_fight_player", "description": "[1]  causes a group of actors to preferentially target the player", "body": [ "ai_try_to_fight_player ${1:<ai>}" ] },
	"ai_vehicle_count": { "prefix": "ai_vehicle_count", "description": "[3]  <short>  Returns the number of vehicles being driven / ridden by the actors in the given squad/squad-group/task/etc", "body": [ "ai_vehicle_count ${1:<ai>}" ] },
	"ai_vehicle_encounter": { "prefix": "ai_vehicle_encounter", "description": "[1]  sets a vehicle to 'belong' to a particular encounter/squad. any actors who get into the vehicle will be placed in this squad. NB: vehicles potentially drivable by multiple teams need their own encounter!", "body": [ "ai_vehicle_encounter ${1:<unit>} ${0:<ai>}" ] },
	"ai_vehicle_enter": { "prefix": "ai_vehicle_enter", "description": "[2,3]  tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles", "body": [ "ai_vehicle_enter ${1:<ai>} ${2:<unit>} ${0:<unit_seat_mapping>}" ] },
	"ai_vehicle_enter_immediate": { "prefix": "ai_vehicle_enter_immediate", "description": "[2,3]  the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles", "body": [ "ai_vehicle_enter_immediate ${1:<ai>} ${2:<unit>} ${0:<unit_seat_mapping>}" ] },
	"ai_vehicle_enterable_actor_type": { "prefix": "ai_vehicle_enterable_actor_type", "description": "[1]  sets a vehicle as being impulsively enterable for actors of a certain type (grunt, elite, marine etc)", "body": [ "ai_vehicle_enterable_actor_type ${1:<unit>} ${0:<actor_type>}" ] },
	"ai_vehicle_enterable_actors": { "prefix": "ai_vehicle_enterable_actors", "description": "[1]  sets a vehicle as being impulsively enterable for a certain encounter/squad of actors", "body": [ "ai_vehicle_enterable_actors ${1:<unit>} ${0:<ai>}" ] },
	"ai_vehicle_enterable_disable": { "prefix": "ai_vehicle_enterable_disable", "description": "[1]  disables actors from impulsively getting into a vehicle (this is the default state for newly placed vehicles)", "body": [ "ai_vehicle_enterable_disable ${1:<unit>}" ] },
	"ai_vehicle_enterable_distance": { "prefix": "ai_vehicle_enterable_distance", "description": "[1]  sets a vehicle as being impulsively enterable for actors within a certain distance", "body": [ "ai_vehicle_enterable_distance ${1:<unit>} ${0:<real>}" ] },
	"ai_vehicle_enterable_team": { "prefix": "ai_vehicle_enterable_team", "description": "[1]  sets a vehicle as being impulsively enterable for actors on a certain team", "body": [ "ai_vehicle_enterable_team ${1:<unit>} ${0:<team>}" ] },
	"ai_vehicle_exit": { "prefix": "ai_vehicle_exit", "description": "[2,3]  tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)", "body": [ "ai_vehicle_exit ${1:<ai>} ${0:<unit_seat_mapping>}" ] },
	"ai_vehicle_get": { "prefix": "ai_vehicle_get", "description": "[2,3]  <vehicle>  Returns the vehicle that the given actor is in", "body": [ "ai_vehicle_get ${1:<ai>}" ] },
	"ai_vehicle_get_from_starting_location": { "prefix": "ai_vehicle_get_from_starting_location", "description": "[2,3]  <vehicle>  Returns the vehicle that was spawned at the given starting location", "body": [ "ai_vehicle_get_from_starting_location ${1:<ai>}" ] },
	"ai_vehicle_reserve": { "prefix": "ai_vehicle_reserve", "description": "[2,3]  <boolean>  Reserves the given vehicle (so that AI may not enter it", "body": [ "ai_vehicle_reserve ${1:<vehicle>} ${0:<boolean>}" ] },
	"ai_vehicle_reserve_seat": { "prefix": "ai_vehicle_reserve_seat", "description": "[2,3]  <boolean>  Reserves the given seat on the given vehicle (so that AI may not enter it", "body": [ "ai_vehicle_reserve_seat ${1:<vehicle>} ${2:<string_id>} ${0:<boolean>}" ] },
	"ai_verify_tags": { "prefix": "ai_verify_tags", "description": "[2,3]  Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)", "body": [ "ai_verify_tags" ] },
	"ai_vitality_pinned": { "prefix": "ai_vitality_pinned", "description": "[2,3]  <boolean>  Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)", "body": [ "ai_vitality_pinned ${1:<ai>}" ] },
	"ai_wall_lean": { "prefix": "ai_wall_lean", "description": "[2,3]  <boolean>  Makes the actor lean against a wall RIGHT NOW", "body": [ "ai_wall_lean ${1:<ai>}" ] },
	"and": { "prefix": "and", "description": "[1,2,3]  <boolean>  returns true if all specified expressions are true", "body": [ "and ${1:<boolean(s)>}" ] },
	"animation_cache_flush": { "prefix": "animation_cache_flush", "description": "[3]  ", "body": [ "animation_cache_flush" ] },
	"animation_cache_stats_reset": { "prefix": "animation_cache_stats_reset", "description": "[2,3]  ", "body": [ "animation_cache_stats_reset" ] },
	"async_set_work_delay_milliseconds": { "prefix": "async_set_work_delay_milliseconds", "description": "[3]  set an artificial delay time for the performance of any asynchronous task work", "body": [ "async_set_work_delay_milliseconds ${1:<long>}" ] },
	"attract_mode_set_seconds": { "prefix": "attract_mode_set_seconds", "description": "[2,3]  sets number of seconds of the attract mode countdown timer", "body": [ "attract_mode_set_seconds ${1:<long>}" ] },
	"attract_mode_start": { "prefix": "attract_mode_start", "description": "[2,3]  starts an attract mode movie", "body": [ "attract_mode_start" ] },
	"bandwidth_profiler_enable": { "prefix": "bandwidth_profiler_enable", "description": "[3]  enables bandwidth profiler", "body": [ "bandwidth_profiler_enable ${1:<boolean>}" ] },
	"bandwidth_profiler_set_context": { "prefix": "bandwidth_profiler_set_context", "description": "[3]  sets bandwidth profiler context", "body": [ "bandwidth_profiler_set_context ${1:<boolean>}" ] },
	"begin": { "prefix": "begin", "description": "[1,2,3]  <passthrough>  returns the last expression in a sequence after evaluating the sequence in order", "body": [ "begin ${1:<expression(s)>}" ] },
	"begin_random": { "prefix": "begin_random", "description": "[1,2,3]  <passthrough>  evaluates the sequence of expressions in random order and returns the last value evaluated", "body": [ "begin_random ${1:<expression(s)>}" ] },
	"bind": { "prefix": "bind", "description": "[1]  binds an input device/button combination to a game control", "body": [ "bind ${1:<string>} ${2:<string>} ${0:<string>}" ] },
	"bink_done": { "prefix": "bink_done", "description": "[2]  <boolean>  returns true if the movie is done playing", "body": [ "bink_done" ] },
	"bink_time": { "prefix": "bink_time", "description": "[3]  <long>  The number of ticks left in the currently playing bink", "body": [ "bink_time" ] },
	"biped_force_ground_fitting_on": { "prefix": "biped_force_ground_fitting_on", "description": "[3]  force ground fitting on, even during custom animations or movement", "body": [ "biped_force_ground_fitting_on ${1:<unit>} ${0:<boolean>}" ] },
	"biped_morph": { "prefix": "biped_morph", "description": "[3]  <boolean>  Cause a biped to morph to its floodified form", "body": [ "biped_morph ${1:<object>}" ] },
	"biped_ragdoll": { "prefix": "biped_ragdoll", "description": "[2,3]  given a dead biped, turns on ragdoll", "body": [ "biped_ragdoll ${1:<unit>}" ] },
	"bit_test": { "prefix": "bit_test", "description": "[1]  <long>  arguments are <flags> <bit_index>", "body": [ "bit_test ${1:<long>} ${0:<short>}" ] },
	"bit_toggle": { "prefix": "bit_toggle", "description": "[1]  <long>  arguments are <flags> <bit_index> <on_or_off>", "body": [ "bit_toggle ${1:<long>} ${2:<short>} ${0:<boolean>}" ] },
	"bitmap_predict": { "prefix": "bitmap_predict", "description": "[2,3]  in: bitmap name. loads all the bitmaps in that bitmap group", "body": [ "bitmap_predict ${1:<bitmap>}" ] },
	"bitwise_and": { "prefix": "bitwise_and", "description": "[1]  <long>  arguments are <lhs> AND <rhs>", "body": [ "bitwise_and ${1:<long>} ${0:<long>}" ] },
	"bitwise_flags_toggle": { "prefix": "bitwise_flags_toggle", "description": "[1]  <long>  arguments are <value> <flags> <on_or_off>", "body": [ "bitwise_flags_toggle ${1:<long>} ${2:<long>} ${0:<boolean>}" ] },
	"bitwise_left_shift": { "prefix": "bitwise_left_shift", "description": "[1]  <long>  arguments are <value> LHS <bit_count>", "body": [ "bitwise_left_shift ${1:<long>} ${0:<short>}" ] },
	"bitwise_or": { "prefix": "bitwise_or", "description": "[1]  <long>  arguments are <lhs> OR <rhs>", "body": [ "bitwise_or ${1:<long>} ${0:<long>}" ] },
	"bitwise_right_shift": { "prefix": "bitwise_right_shift", "description": "[1]  <long>  arguments are <value> RHS <bit_count>", "body": [ "bitwise_right_shift ${1:<long>} ${0:<short>}" ] },
	"bitwise_xor": { "prefix": "bitwise_xor", "description": "[1]  <long>  arguments are <lhs> XOR <rhs>", "body": [ "bitwise_xor ${1:<long>} ${0:<long>}" ] },
	"breakable_surfaces_enable": { "prefix": "breakable_surfaces_enable", "description": "[1,2,3]  enables or disables breakability of all breakable surfaces on level", "body": [ "breakable_surfaces_enable ${1:<boolean>}" ] },
	"breakable_surfaces_reset": { "prefix": "breakable_surfaces_reset", "description": "[1,2,3]  restores all breakable surfaces", "body": [ "breakable_surfaces_reset" ] },
	"breakpoint": { "prefix": "breakpoint", "description": "[3]  If breakpoints are enabled, pause execution when this statement is hit (displaying the given message)", "body": [ "breakpoint ${1:<string>}" ] },
	"budget_resource_get_animation_graph": { "prefix": "budget_resource_get_animation_graph", "description": "[3]  <animation_graph>  Get a non resolving reference to a model animation graph budget reference", "body": [ "budget_resource_get_animation_graph ${1:<animation_budget_reference>}" ] },
	"budget_resource_get_looping_sound": { "prefix": "budget_resource_get_looping_sound", "description": "[3]  <looping_sound>  Get a non resolving reference to a looping sound budget reference", "body": [ "budget_resource_get_looping_sound ${1:<looping_sound_budget_reference>}" ] },
	"budget_resource_get_sound": { "prefix": "budget_resource_get_sound", "description": "[3]  <sound>  Get a non resolving reference to a looping sound budget reference", "body": [ "budget_resource_get_sound ${1:<sound_budget_reference>}" ] },
	"bug_now": { "prefix": "bug_now", "description": "[2,3]  uploads files for bug <name>", "body": [ "bug_now ${1:<string>}" ] },
	"bug_now_auto": { "prefix": "bug_now_auto", "description": "[2,3]  uploads bug files, auto named <include_minidump>", "body": [ "bug_now_auto ${1:<boolean>}" ] },
	"bug_now_lite": { "prefix": "bug_now_lite", "description": "[2,3]  uploads files (w/ no minidump) for bug <name>", "body": [ "bug_now_lite ${1:<string>}" ] },
	"cache_block_for_one_frame": { "prefix": "cache_block_for_one_frame", "description": "[2,3]  call this to force texture and geometry cache to block until satiated", "body": [ "cache_block_for_one_frame" ] },
	"calculate_tag_prediction": { "prefix": "calculate_tag_prediction", "description": "[3]  ", "body": [ "calculate_tag_prediction ${1:<any_tag>}" ] },
	"camera_control": { "prefix": "camera_control", "description": "[1,2,3]  toggles script control of the camera", "body": [ "camera_control ${1:<boolean>}" ] },
	"camera_pan": { "prefix": "camera_pan", "description": "[2,3]  camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>", "body": [ "camera_pan ${1:<cutscene_camera_point>} ${2:<cutscene_camera_point>} ${3:<short>} ${4:<short>} ${5:<real>} ${6:<short>} ${0:<real>}" ] },
	"camera_place_relative": { "prefix": "camera_place_relative", "description": "[2,3]  all subsequent camera placement in sapien be marked as relative to this object", "body": [ "camera_place_relative ${1:<object>}" ] },
	"camera_place_worldspace": { "prefix": "camera_place_worldspace", "description": "[2,3]  all subsequent camera placement in sapien will be marked as worldspace", "body": [ "camera_place_worldspace" ] },
	"camera_predict_resources_at_frame": { "prefix": "camera_predict_resources_at_frame", "description": "[2,3]  predict resources at a frame in camera animation", "body": [ "camera_predict_resources_at_frame ${1:<animation_graph>} ${2:<string_id>} ${3:<unit>} ${4:<cutscene_flag>} ${0:<long>}" ] },
	"camera_predict_resources_at_point": { "prefix": "camera_predict_resources_at_point", "description": "[2,3]  predict resources given a camera point", "body": [ "camera_predict_resources_at_point ${1:<cutscene_camera_point>}" ] },
	"camera_set": { "prefix": "camera_set", "description": "[1,2,3]  moves the camera to the specified camera point over the specified number of ticks", "body": [ "camera_set ${1:<cutscene_camera_point>} ${0:<short>}" ] },
	"camera_set_animation": { "prefix": "camera_set_animation", "description": "[1,2,3]  begins a prerecorded camera animation", "body": [ "camera_set_animation ${1:<animation_graph>} ${0:<string>}" ] },
	"camera_set_animation_relative": { "prefix": "camera_set_animation_relative", "description": "[2,3]  begins a prerecorded camera animation synchronized to unit relative to cutscene flag", "body": [ "camera_set_animation_relative ${1:<animation_graph>} ${2:<string_id>} ${3:<unit>} ${0:<cutscene_flag>}" ] },
	"camera_set_animation_relative_with_speed": { "prefix": "camera_set_animation_relative_with_speed", "description": "[3]  begins a prerecorded camera animation synchronized to unit relative to cutscene flag", "body": [ "camera_set_animation_relative_with_speed ${1:<animation_graph>} ${2:<string_id>} ${3:<unit>} ${4:<cutscene_flag>} ${0:<real>}" ] },
	"camera_set_animation_relative_with_speed_loop": { "prefix": "camera_set_animation_relative_with_speed_loop", "description": "[3]  begins a prerecorded camera animation synchronized to unit relative to cutscene flag", "body": [ "camera_set_animation_relative_with_speed_loop ${1:<animation_graph>} ${2:<string_id>} ${3:<unit>} ${4:<cutscene_flag>} ${5:<real>} ${0:<boolean>}" ] },
	"camera_set_animation_relative_with_speed_loop_offset": { "prefix": "camera_set_animation_relative_with_speed_loop_offset", "description": "[3]  begins a prerecorded camera animation synchronized to unit relative to cutscene flag", "body": [ "camera_set_animation_relative_with_speed_loop_offset ${1:<animation_graph>} ${2:<string_id>} ${3:<unit>} ${4:<cutscene_flag>} ${5:<real>} ${6:<boolean>} ${0:<real>}" ] },
	"camera_set_animation_with_speed": { "prefix": "camera_set_animation_with_speed", "description": "[3]  begins a prerecorded camera animation", "body": [ "camera_set_animation_with_speed ${1:<animation_graph>} ${2:<string_id>} ${0:<real>}" ] },
	"camera_set_briefing": { "prefix": "camera_set_briefing", "description": "[3]  Used for briefing cinematics", "body": [ "camera_set_briefing ${1:<boolean>}" ] },
	"camera_set_cinematic": { "prefix": "camera_set_cinematic", "description": "[3]  makes the scripted camera follow the path of a cinematic scene", "body": [ "camera_set_cinematic" ] },
	"camera_set_cinematic_scene": { "prefix": "camera_set_cinematic_scene", "description": "[3]  sets the scene, shot, and cutscene flag for the cinematic camera (NOTE: camera must be in cinematic mode by calling camera_set_cinematic)", "body": [ "camera_set_cinematic_scene ${1:<cinematic_scene_definition>} ${2:<long>} ${0:<cutscene_flag>}" ] },
	"camera_set_dead": { "prefix": "camera_set_dead", "description": "[1]  makes the scripted camera zoom out around a unit as if it were dead", "body": [ "camera_set_dead ${1:<unit>}" ] },
	"camera_set_field_of_view": { "prefix": "camera_set_field_of_view", "description": "[2,3]  sets the field of view", "body": [ "camera_set_field_of_view ${1:<real>} ${0:<short>}" ] },
	"camera_set_first_person": { "prefix": "camera_set_first_person", "description": "[1,2,3]  makes the scripted camera follow a unit", "body": [ "camera_set_first_person ${1:<unit>}" ] },
	"camera_set_flying_cam_at_point": { "prefix": "camera_set_flying_cam_at_point", "description": "[3]  <user_index> <camera_point> sets a flying camera perspective", "body": [ "camera_set_flying_cam_at_point ${1:<long>} ${0:<cutscene_camera_point>}" ] },
	"camera_set_mode": { "prefix": "camera_set_mode", "description": "[3]  <user_index> <mode_index> sets user's camera perspective", "body": [ "camera_set_mode ${1:<long>} ${0:<long>}" ] },
	"camera_set_pan": { "prefix": "camera_set_pan", "description": "[2,3]  moves the camera to the specified camera point over the specified number of ticks with a constant speed", "body": [ "camera_set_pan ${1:<cutscene_camera_point>} ${0:<short>}" ] },
	"camera_set_relative": { "prefix": "camera_set_relative", "description": "[1,2,3]  moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object)", "body": [ "camera_set_relative ${1:<cutscene_camera_point>} ${2:<short>} ${0:<object>}" ] },
	"camera_time": { "prefix": "camera_time", "description": "[1,2,3]  <short>  returns the number of ticks remaining in the current camera interpolation", "body": [ "camera_time" ] },
	"campaign_is_finished_easy": { "prefix": "campaign_is_finished_easy", "description": "[3]  <boolean>  TRUE if any of the players have finished the campaign on easy", "body": [ "campaign_is_finished_easy" ] },
	"campaign_is_finished_heroic": { "prefix": "campaign_is_finished_heroic", "description": "[3]  <boolean>  TRUE if any of the players have finished the campaign on heroic", "body": [ "campaign_is_finished_heroic" ] },
	"campaign_is_finished_legendary": { "prefix": "campaign_is_finished_legendary", "description": "[3]  <boolean>  TRUE if any of the players have finished the campaign on legendary", "body": [ "campaign_is_finished_legendary" ] },
	"campaign_is_finished_normal": { "prefix": "campaign_is_finished_normal", "description": "[3]  <boolean>  TRUE if any of the players have finished the campaign on normal", "body": [ "campaign_is_finished_normal" ] },
	"campaign_metagame_award_points": { "prefix": "campaign_metagame_award_points", "description": "[3]  award bonus metagame points to a player", "body": [ "campaign_metagame_award_points ${1:<object>} ${0:<short>}" ] },
	"campaign_metagame_award_primary_skull": { "prefix": "campaign_metagame_award_primary_skull", "description": "[3]  award a primary skull to a player", "body": [ "campaign_metagame_award_primary_skull ${1:<object>} ${0:<short>}" ] },
	"campaign_metagame_award_secondary_skull": { "prefix": "campaign_metagame_award_secondary_skull", "description": "[3]  award a secondary skull to a player", "body": [ "campaign_metagame_award_secondary_skull ${1:<object>} ${0:<short>}" ] },
	"campaign_metagame_enabled": { "prefix": "campaign_metagame_enabled", "description": "[3]  <boolean>  TRUE if the metagame is enabled", "body": [ "campaign_metagame_enabled" ] },
	"campaign_metagame_time_pause": { "prefix": "campaign_metagame_time_pause", "description": "[3]  pause meta game time, while paused your completion multiplier stops going down", "body": [ "campaign_metagame_time_pause ${1:<boolean>}" ] },
	"cc_enable": { "prefix": "cc_enable", "description": "[3]  toggle closed captions", "body": [ "cc_enable ${1:<boolean>}" ] },
	"cc_test": { "prefix": "cc_test", "description": "[3]  test a line of cc text", "body": [ "cc_test ${1:<boolean>}" ] },
	"cheat_active_camouflage": { "prefix": "cheat_active_camouflage", "description": "[1,2,3]  gives the player active camouflage", "body": [ "cheat_active_camouflage" ] },
	"cheat_active_camouflage_by_player": { "prefix": "cheat_active_camouflage_by_player", "description": "[2,3]  gives a specific player active camouflage", "body": [ "cheat_active_camouflage_by_player ${1:<short>} ${0:<boolean>}" ] },
	"cheat_active_camouflage_local_player": { "prefix": "cheat_active_camouflage_local_player", "description": "[1]  gives the player active camouflage", "body": [ "cheat_active_camouflage_local_player ${1:<short>}" ] },
	"cheat_all_powerups": { "prefix": "cheat_all_powerups", "description": "[1,2,3]  drops all powerups near player", "body": [ "cheat_all_powerups" ] },
	"cheat_all_vehicles": { "prefix": "cheat_all_vehicles", "description": "[1,2,3]  drops all vehicles on player", "body": [ "cheat_all_vehicles" ] },
	"cheat_all_weapons": { "prefix": "cheat_all_weapons", "description": "[1,2,3]  drops all weapons near player", "body": [ "cheat_all_weapons" ] },
	"cheat_spawn_warthog": { "prefix": "cheat_spawn_warthog", "description": "[1]  drops a warthog near player", "body": [ "cheat_spawn_warthog" ] },
	"cheat_teleport_to_camera": { "prefix": "cheat_teleport_to_camera", "description": "[1,2,3]  teleports player to camera location", "body": [ "cheat_teleport_to_camera" ] },
	"cheats_load": { "prefix": "cheats_load", "description": "[1,2,3]  reloads the cheats.txt file", "body": [ "cheats_load" ] },
	"checkpoint_load": { "prefix": "checkpoint_load", "description": "[1]  load a saved checkpoint", "body": [ "checkpoint_load ${1:<string>}" ] },
	"chud_cinematic_fade": { "prefix": "chud_cinematic_fade", "description": "[3]  parameter 1 is how, parameter 2 is when", "body": [ "chud_cinematic_fade ${1:<real>} ${0:<real>}" ] },
	"chud_cortana_set_range_multiplier": { "prefix": "chud_cortana_set_range_multiplier", "description": "[3]  scales the cortana effect distances", "body": [ "chud_cortana_set_range_multiplier ${1:<real>}" ] },
	"chud_cortana_suck": { "prefix": "chud_cortana_suck", "description": "[3]  turns on the cortana suck, attached to the object at the given marker", "body": [ "chud_cortana_suck ${1:<object>} ${2:<string_id>} ${0:<boolean>}" ] },
	"chud_show": { "prefix": "chud_show", "description": "[3]  hides/shows the entire chud", "body": [ "chud_show ${1:<boolean>}" ] },
	"chud_show_arbiter_ai_navpoint": { "prefix": "chud_show_arbiter_ai_navpoint", "description": "[3]  hides/shows arbiter's navpoint", "body": [ "chud_show_arbiter_ai_navpoint ${1:<boolean>}" ] },
	"chud_show_crosshair": { "prefix": "chud_show_crosshair", "description": "[3]  hides/shows the crosshair", "body": [ "chud_show_crosshair ${1:<boolean>}" ] },
	"chud_show_fire_grenades": { "prefix": "chud_show_fire_grenades", "description": "[3]  hides/shows the firebomb chud", "body": [ "chud_show_fire_grenades ${1:<boolean>}" ] },
	"chud_show_grenades": { "prefix": "chud_show_grenades", "description": "[3]  hides/shows the grenade hud", "body": [ "chud_show_grenades ${1:<boolean>}" ] },
	"chud_show_messages": { "prefix": "chud_show_messages", "description": "[3]  hides/shows the chud messages", "body": [ "chud_show_messages ${1:<boolean>}" ] },
	"chud_show_motion_sensor": { "prefix": "chud_show_motion_sensor", "description": "[3]  hides/shows the motion sensor chud", "body": [ "chud_show_motion_sensor ${1:<boolean>}" ] },
	"chud_show_shield": { "prefix": "chud_show_shield", "description": "[3]  hides/shows the shield", "body": [ "chud_show_shield ${1:<boolean>}" ] },
	"chud_show_spike_grenades": { "prefix": "chud_show_spike_grenades", "description": "[3]  hides/shows the spike grenade chud", "body": [ "chud_show_spike_grenades ${1:<boolean>}" ] },
	"chud_show_weapon_stats": { "prefix": "chud_show_weapon_stats", "description": "[3]  hides/shows the weapon huds", "body": [ "chud_show_weapon_stats ${1:<boolean>}" ] },
	"chud_texture_cam": { "prefix": "chud_texture_cam", "description": "[3]  turns the chud texturecam on/off", "body": [ "chud_texture_cam ${1:<boolean>}" ] },
	"cinematic_abort": { "prefix": "cinematic_abort", "description": "[1]  aborts a cinematic", "body": [ "cinematic_abort" ] },
	"cinematic_camera_set_easing_in": { "prefix": "cinematic_camera_set_easing_in", "description": "[3]  controls the camera easing from player position", "body": [ "cinematic_camera_set_easing_in ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<real>} ${0:<real>}" ] },
	"cinematic_camera_set_easing_out": { "prefix": "cinematic_camera_set_easing_out", "description": "[3]  controls the camera easing back to the player position", "body": [ "cinematic_camera_set_easing_out ${1:<real>}" ] },
	"cinematic_clips_destroy": { "prefix": "cinematic_clips_destroy", "description": "[3]  destroys any existing cinematic clip planes for the current cinematic", "body": [ "cinematic_clips_destroy" ] },
	"cinematic_clips_initialize_for_shot": { "prefix": "cinematic_clips_initialize_for_shot", "description": "[3]  intializes the cinematic clip planes for the given shot of the current cinematic", "body": [ "cinematic_clips_initialize_for_shot ${1:<long>}" ] },
	"cinematic_clone_players_weapon": { "prefix": "cinematic_clone_players_weapon", "description": "[2,3]  clone the first player's most reasonable weapon and attach it to the specified object's marker", "body": [ "cinematic_clone_players_weapon ${1:<object>} ${2:<string_id>} ${0:<string_id>}" ] },
	"cinematic_destroy": { "prefix": "cinematic_destroy", "description": "[3]  Releases everything created by the cinematics system", "body": [ "cinematic_destroy" ] },
	"cinematic_dynamic_reflections": { "prefix": "cinematic_dynamic_reflections", "description": "[2]  sets up dynamic reflections: <enabled: [true, false]> <filtering enabled: [true, false]>", "body": [ "cinematic_dynamic_reflections ${1:<boolean>} ${0:<boolean>}" ] },
	"cinematic_enable_ambience_details": { "prefix": "cinematic_enable_ambience_details", "description": "[2,3]  enable/disable ambience details in cinematics", "body": [ "cinematic_enable_ambience_details ${1:<boolean>}" ] },
	"cinematic_get_early_exit": { "prefix": "cinematic_get_early_exit", "description": "[3]  <long>  Used to retrieve the state of skippable cinematics", "body": [ "cinematic_get_early_exit" ] },
	"cinematic_get_shot": { "prefix": "cinematic_get_shot", "description": "[3]  Print the stored scene and shot information to the screen", "body": [ "cinematic_get_shot" ] },
	"cinematic_layer": { "prefix": "cinematic_layer", "description": "[2,3]  interpolates the value of <cinematic layer x> from current position to <value> over <time>", "body": [ "cinematic_layer ${1:<long>} ${2:<real>} ${0:<real>}" ] },
	"cinematic_light_object": { "prefix": "cinematic_light_object", "description": "[3]  attaches cinematic lights to <object> at <marker> using scenario cinematic lighting palette entry <scenario-cinematic-lighting-name> from point of view of camera reference <camera>", "body": [ "cinematic_light_object ${1:<object>} ${2:<string_id>} ${3:<cinematic_lightprobe>} ${0:<cutscene_camera_point>}" ] },
	"cinematic_light_object_off": { "prefix": "cinematic_light_object_off", "description": "[3]  Turn off cinematic lighting for the object", "body": [ "cinematic_light_object_off ${1:<object>}" ] },
	"cinematic_lighting_rebuild_all": { "prefix": "cinematic_lighting_rebuild_all", "description": "[3]  Rebuild all cinematic lighting (SH only)", "body": [ "cinematic_lighting_rebuild_all" ] },
	"cinematic_lighting_set_ambient_light": { "prefix": "cinematic_lighting_set_ambient_light", "description": "[2]  sets the color (red, green, blue) of the cinematic ambient light", "body": [ "cinematic_lighting_set_ambient_light ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"cinematic_lighting_set_primary_light": { "prefix": "cinematic_lighting_set_primary_light", "description": "[2]  sets the pitch, yaw, and color (red, green, blue) of the cinematic shadowing diffuse and specular directional light", "body": [ "cinematic_lighting_set_primary_light ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"cinematic_lighting_set_secondary_light": { "prefix": "cinematic_lighting_set_secondary_light", "description": "[2]  sets the pitch, yaw, and color (red, green, blue) of the cinematic non-shadowing diffuse directional light", "body": [ "cinematic_lighting_set_secondary_light ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"cinematic_lightmap_shadow_disable": { "prefix": "cinematic_lightmap_shadow_disable", "description": "[2,3]  turn off lightmap shadow in cinematics", "body": [ "cinematic_lightmap_shadow_disable" ] },
	"cinematic_lightmap_shadow_enable": { "prefix": "cinematic_lightmap_shadow_enable", "description": "[2,3]  turn on lightmap shadow in cinematics", "body": [ "cinematic_lightmap_shadow_enable" ] },
	"cinematic_lights_destroy": { "prefix": "cinematic_lights_destroy", "description": "[3]  destroys any existing cinematic lights for the current cinematic", "body": [ "cinematic_lights_destroy" ] },
	"cinematic_lights_initialize_for_shot": { "prefix": "cinematic_lights_initialize_for_shot", "description": "[3]  intializes the cinematic lighting for the given shot of the current cinematic", "body": [ "cinematic_lights_initialize_for_shot ${1:<long>}" ] },
	"cinematic_move_attached_objects": { "prefix": "cinematic_move_attached_objects", "description": "[2,3]  move the object's children attached to the first marker to the second marker", "body": [ "cinematic_move_attached_objects ${1:<object>} ${2:<string_id>} ${3:<string_id>} ${0:<string_id>}" ] },
	"cinematic_object_create": { "prefix": "cinematic_object_create", "description": "[3]  Creates an object for use by cinematics", "body": [ "cinematic_object_create ${1:<string>}" ] },
	"cinematic_object_create_cinematic_anchor": { "prefix": "cinematic_object_create_cinematic_anchor", "description": "[3]  Creates a cinematic anchor object for use by cinematics", "body": [ "cinematic_object_create_cinematic_anchor ${1:<string>} ${0:<cutscene_flag>}" ] },
	"cinematic_object_destroy": { "prefix": "cinematic_object_destroy", "description": "[3]  Destroys an object created by cinematic_object_create", "body": [ "cinematic_object_destroy ${1:<string>}" ] },
	"cinematic_object_get": { "prefix": "cinematic_object_get", "description": "[3]  <object>  Returns an object created by cinematic_object_create", "body": [ "cinematic_object_get ${1:<string>}" ] },
	"cinematic_object_get_effect_scenery": { "prefix": "cinematic_object_get_effect_scenery", "description": "[3]  <effect_scenery>  Returns a scenery effect object created by cinematic_object_create", "body": [ "cinematic_object_get_effect_scenery ${1:<string>}" ] },
	"cinematic_object_get_scenery": { "prefix": "cinematic_object_get_scenery", "description": "[3]  <scenery>  Returns a scenery object created by cinematic_object_create", "body": [ "cinematic_object_get_scenery ${1:<string>}" ] },
	"cinematic_object_get_unit": { "prefix": "cinematic_object_get_unit", "description": "[3]  <unit>  Returns a unit created by cinematic_object_create", "body": [ "cinematic_object_get_unit ${1:<string>}" ] },
	"cinematic_outro_start": { "prefix": "cinematic_outro_start", "description": "[2,3]  flag this cutscene as an outro cutscene", "body": [ "cinematic_outro_start" ] },
	"cinematic_print": { "prefix": "cinematic_print", "description": "[3]  Print status lines for cinematic debugging", "body": [ "cinematic_print ${1:<string>}" ] },
	"cinematic_reset": { "prefix": "cinematic_reset", "description": "[3]  Resets the cinematics internal state", "body": [ "cinematic_reset" ] },
	"cinematic_reset_environment_map_bitmap": { "prefix": "cinematic_reset_environment_map_bitmap", "description": "[2,3]  resets environment-map bitmap (on flagged shaders) to default instantly", "body": [ "cinematic_reset_environment_map_bitmap" ] },
	"cinematic_reset_environment_map_tint": { "prefix": "cinematic_reset_environment_map_tint", "description": "[2,3]  resets environment-map tint (on flagged shaders) to default instantly", "body": [ "cinematic_reset_environment_map_tint" ] },
	"cinematic_screen_effect_set_convolution": { "prefix": "cinematic_screen_effect_set_convolution", "description": "[1]  sets the convolution effect", "body": [ "cinematic_screen_effect_set_convolution ${1:<short>} ${2:<short>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"cinematic_screen_effect_set_crossfade": { "prefix": "cinematic_screen_effect_set_crossfade", "description": "[2,3]  transition-time", "body": [ "cinematic_screen_effect_set_crossfade ${1:<real>}" ] },
	"cinematic_screen_effect_set_crossfade2": { "prefix": "cinematic_screen_effect_set_crossfade2", "description": "[2,3]  transition-time, exponent", "body": [ "cinematic_screen_effect_set_crossfade2 ${1:<real>} ${0:<real>}" ] },
	"cinematic_screen_effect_set_depth_of_field": { "prefix": "cinematic_screen_effect_set_depth_of_field", "description": "[2]  sets dof: <seperation dist>, <near blur lower bound> <upper bound> <time> <far blur lower bound> <upper bound> <time>", "body": [ "cinematic_screen_effect_set_depth_of_field ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<real>} ${6:<real>} ${0:<real>}" ] },
	"cinematic_screen_effect_set_filter": { "prefix": "cinematic_screen_effect_set_filter", "description": "[1]  sets the filter effect", "body": [ "cinematic_screen_effect_set_filter ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<boolean>} ${0:<real>}" ] },
	"cinematic_screen_effect_set_filter_desaturation_tint": { "prefix": "cinematic_screen_effect_set_filter_desaturation_tint", "description": "[1]  sets the desaturation filter tint color", "body": [ "cinematic_screen_effect_set_filter_desaturation_tint ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"cinematic_screen_effect_set_video": { "prefix": "cinematic_screen_effect_set_video", "description": "[1]  sets the video effect: <noise intensity[0,1]>, <overbright: 0=none, 1=2x, 2=4x>", "body": [ "cinematic_screen_effect_set_video ${1:<short>} ${0:<real>}" ] },
	"cinematic_screen_effect_start": { "prefix": "cinematic_screen_effect_start", "description": "[1,2,3]  starts screen effect; pass TRUE to clear", "body": [ "cinematic_screen_effect_start ${1:<boolean>}" ] },
	"cinematic_screen_effect_stop": { "prefix": "cinematic_screen_effect_stop", "description": "[1,2,3]  returns control of the screen effects to the rest of the game", "body": [ "cinematic_screen_effect_stop" ] },
	"cinematic_scripting_clean_up": { "prefix": "cinematic_scripting_clean_up", "description": "[3]  Unload the scenario cinematic zone", "body": [ "cinematic_scripting_clean_up ${1:<long>}" ] },
	"cinematic_scripting_create_and_animate_cinematic_object": { "prefix": "cinematic_scripting_create_and_animate_cinematic_object", "description": "[3]  Create and Animate a cinematic object", "body": [ "cinematic_scripting_create_and_animate_cinematic_object ${1:<long>} ${2:<long>} ${3:<long>} ${4:<object>} ${5:<string_id>} ${0:<boolean>}" ] },
	"cinematic_scripting_create_and_animate_cinematic_object_no_animation": { "prefix": "cinematic_scripting_create_and_animate_cinematic_object_no_animation", "description": "[3]  Create and Animate a cinematic object without an animation", "body": [ "cinematic_scripting_create_and_animate_cinematic_object_no_animation ${1:<long>} ${2:<long>} ${3:<long>} ${4:<object>} ${0:<boolean>}" ] },
	"cinematic_scripting_create_and_animate_object": { "prefix": "cinematic_scripting_create_and_animate_object", "description": "[3]  Create and Animate a cinematic object", "body": [ "cinematic_scripting_create_and_animate_object ${1:<long>} ${2:<long>} ${3:<long>} ${4:<object_name>} ${5:<object>} ${6:<string_id>} ${0:<boolean>}" ] },
	"cinematic_scripting_create_and_animate_object_no_animation": { "prefix": "cinematic_scripting_create_and_animate_object_no_animation", "description": "[3]  Create and Animate a cinematic object without an animation", "body": [ "cinematic_scripting_create_and_animate_object_no_animation ${1:<long>} ${2:<long>} ${3:<long>} ${4:<object_name>} ${5:<object>} ${0:<boolean>}" ] },
	"cinematic_scripting_create_cinematic_object": { "prefix": "cinematic_scripting_create_cinematic_object", "description": "[3]  Create a manually placed cinematic object", "body": [ "cinematic_scripting_create_cinematic_object ${1:<long>} ${2:<long>} ${0:<long>}" ] },
	"cinematic_scripting_create_object": { "prefix": "cinematic_scripting_create_object", "description": "[3]  Create a manually placed cinematic object", "body": [ "cinematic_scripting_create_object ${1:<long>} ${2:<long>} ${3:<long>} ${0:<object_name>}" ] },
	"cinematic_scripting_destroy_cortana_effect_cinematic": { "prefix": "cinematic_scripting_destroy_cortana_effect_cinematic", "description": "[3]  Destroy cortana effect cinematic", "body": [ "cinematic_scripting_destroy_cortana_effect_cinematic" ] },
	"cinematic_scripting_destroy_object": { "prefix": "cinematic_scripting_destroy_object", "description": "[3]  Destroy a cinematic object", "body": [ "cinematic_scripting_destroy_object ${1:<long>} ${2:<long>} ${3:<long>} ${0:<object>}" ] },
	"cinematic_scripting_fade_out": { "prefix": "cinematic_scripting_fade_out", "description": "[3]  Fade out at the end of the cinematic", "body": [ "cinematic_scripting_fade_out ${1:<real>} ${2:<real>} ${3:<real>} ${0:<short>}" ] },
	"cinematic_scripting_object_coop_flags_valid": { "prefix": "cinematic_scripting_object_coop_flags_valid", "description": "[3]  <boolean>  Evaluate if a cinematic object should be displayed for the current coop flags", "body": [ "cinematic_scripting_object_coop_flags_valid ${1:<long>} ${2:<long>} ${0:<long>}" ] },
	"cinematic_scripting_play_cortana_effect": { "prefix": "cinematic_scripting_play_cortana_effect", "description": "[3]  Play the associated cortana effect", "body": [ "cinematic_scripting_play_cortana_effect ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_scripting_start_animation": { "prefix": "cinematic_scripting_start_animation", "description": "[3]  Animate a manually placed cinematic object", "body": [ "cinematic_scripting_start_animation ${1:<long>} ${2:<long>} ${3:<long>} ${4:<object>} ${0:<string_id>}" ] },
	"cinematic_scripting_start_dialogue": { "prefix": "cinematic_scripting_start_dialogue", "description": "[3]  Play a cinematic dialogue", "body": [ "cinematic_scripting_start_dialogue ${1:<long>} ${2:<long>} ${3:<long>} ${4:<long>} ${0:<object>}" ] },
	"cinematic_scripting_start_effect": { "prefix": "cinematic_scripting_start_effect", "description": "[3]  Play a cinematic effect", "body": [ "cinematic_scripting_start_effect ${1:<long>} ${2:<long>} ${3:<long>} ${4:<long>} ${0:<object>}" ] },
	"cinematic_scripting_start_music": { "prefix": "cinematic_scripting_start_music", "description": "[3]  Play a cinematic music", "body": [ "cinematic_scripting_start_music ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_scripting_stop_music": { "prefix": "cinematic_scripting_stop_music", "description": "[3]  Stops a cinematic music", "body": [ "cinematic_scripting_stop_music ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_set": { "prefix": "cinematic_set", "description": "[3]  sets the cinematic name for the current cinematic", "body": [ "cinematic_set ${1:<cinematic_definition>}" ] },
	"cinematic_set_active_camera": { "prefix": "cinematic_set_active_camera", "description": "[3]  Used to change the rasterizer to display one of the texture cameras", "body": [ "cinematic_set_active_camera ${1:<string_id>}" ] },
	"cinematic_set_chud_objective": { "prefix": "cinematic_set_chud_objective", "description": "[3]  activates the chapter title", "body": [ "cinematic_set_chud_objective ${1:<cutscene_title>}" ] },
	"cinematic_set_early_exit": { "prefix": "cinematic_set_early_exit", "description": "[3]  Used to store the state of skippable cinematics", "body": [ "cinematic_set_early_exit ${1:<long>}" ] },
	"cinematic_set_environment_map_attenuation": { "prefix": "cinematic_set_environment_map_attenuation", "description": "[2,3]  interpolates environment-map attenuation (on flagged shaders) from <low> to <high> over <time>", "body": [ "cinematic_set_environment_map_attenuation ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"cinematic_set_environment_map_bitmap": { "prefix": "cinematic_set_environment_map_bitmap", "description": "[2,3]  sets environment-map bitmap (on flagged shaders) instantly", "body": [ "cinematic_set_environment_map_bitmap ${1:<bitmap>}" ] },
	"cinematic_set_environment_map_tint": { "prefix": "cinematic_set_environment_map_tint", "description": "[2,3]  perpendicular color: (red green blue brightness), parallel color: (red green blue brightness)... sets environment-map tint (on flagged shaders) instantly", "body": [ "cinematic_set_environment_map_tint ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<real>} ${6:<real>} ${7:<real>} ${0:<real>}" ] },
	"cinematic_set_far_clip_distance": { "prefix": "cinematic_set_far_clip_distance", "description": "[2,3]  ", "body": [ "cinematic_set_far_clip_distance ${1:<real>}" ] },
	"cinematic_set_near_clip_distance": { "prefix": "cinematic_set_near_clip_distance", "description": "[1,2,3]  ", "body": [ "cinematic_set_near_clip_distance ${1:<real>}" ] },
	"cinematic_set_shot": { "prefix": "cinematic_set_shot", "description": "[3]  sets the scene and shot for the current cinematic.", "body": [ "cinematic_set_shot ${1:<cinematic_scene_definition>} ${0:<long>}" ] },
	"cinematic_set_title": { "prefix": "cinematic_set_title", "description": "[1,2,3]  activates the chapter title", "body": [ "cinematic_set_title ${1:<cutscene_title>}" ] },
	"cinematic_set_title_delayed": { "prefix": "cinematic_set_title_delayed", "description": "[1,2,3]  activates the chapter title, delayed by <real> seconds", "body": [ "cinematic_set_title_delayed ${1:<cutscene_title>} ${0:<real>}" ] },
	"cinematic_show_letterbox": { "prefix": "cinematic_show_letterbox", "description": "[1,2,3]  sets or removes the letterbox bars", "body": [ "cinematic_show_letterbox ${1:<boolean>}" ] },
	"cinematic_show_letterbox_immediate": { "prefix": "cinematic_show_letterbox_immediate", "description": "[2,3]  sets or removes the letterbox bars", "body": [ "cinematic_show_letterbox_immediate ${1:<boolean>}" ] },
	"cinematic_skip_start_internal": { "prefix": "cinematic_skip_start_internal", "description": "[1,2,3]  ", "body": [ "cinematic_skip_start_internal" ] },
	"cinematic_skip_stop_internal": { "prefix": "cinematic_skip_stop_internal", "description": "[1,2,3]  ", "body": [ "cinematic_skip_stop_internal" ] },
	"cinematic_start": { "prefix": "cinematic_start", "description": "[1,2,3]  initializes game to start a cinematic (interruptive) cutscene", "body": [ "cinematic_start" ] },
	"cinematic_start_movie": { "prefix": "cinematic_start_movie", "description": "[2]  starts cinematic movie", "body": [ "cinematic_start_movie ${1:<string>}" ] },
	"cinematic_stop": { "prefix": "cinematic_stop", "description": "[1,2,3]  initializes the game to end a cinematic (interruptive) cutscene", "body": [ "cinematic_stop" ] },
	"cinematic_subtitle": { "prefix": "cinematic_subtitle", "description": "[2,3]  displays the named subtitle for <real> seconds", "body": [ "cinematic_subtitle ${1:<string_id>} ${0:<real>}" ] },
	"cinematic_suppress_bsp_object_creation": { "prefix": "cinematic_suppress_bsp_object_creation", "description": "[1,2,3]  suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch", "body": [ "cinematic_suppress_bsp_object_creation ${1:<boolean>}" ] },
	"cinematic_tag_reference_get_animation": { "prefix": "cinematic_tag_reference_get_animation", "description": "[3]  <animation_graph>  Retrieve a looping sound tag from the cinematic system", "body": [ "cinematic_tag_reference_get_animation ${1:<long>} ${2:<long>} ${0:<long>}" ] },
	"cinematic_tag_reference_get_bink": { "prefix": "cinematic_tag_reference_get_bink", "description": "[3]  <bink_definition>  Retrieve the bink tag from the cinematic system", "body": [ "cinematic_tag_reference_get_bink ${1:<long>}" ] },
	"cinematic_tag_reference_get_cinematic": { "prefix": "cinematic_tag_reference_get_cinematic", "description": "[3]  <cinematic_definition>  Retrieve a cinematic tag from the cinematic system", "body": [ "cinematic_tag_reference_get_cinematic ${1:<long>}" ] },
	"cinematic_tag_reference_get_dialogue": { "prefix": "cinematic_tag_reference_get_dialogue", "description": "[3]  <sound>  Retrieve a sound tag from the cinematic system", "body": [ "cinematic_tag_reference_get_dialogue ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_tag_reference_get_effect": { "prefix": "cinematic_tag_reference_get_effect", "description": "[3]  <effect>  Retrieve an effect tag from the cinematic system", "body": [ "cinematic_tag_reference_get_effect ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_tag_reference_get_music": { "prefix": "cinematic_tag_reference_get_music", "description": "[3]  <sound>  Retrieve a sound tag from the cinematic system", "body": [ "cinematic_tag_reference_get_music ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_tag_reference_get_music_looping": { "prefix": "cinematic_tag_reference_get_music_looping", "description": "[3]  <looping_sound>  Retrieve a looping sound tag from the cinematic system", "body": [ "cinematic_tag_reference_get_music_looping ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"cinematic_tag_reference_get_scene": { "prefix": "cinematic_tag_reference_get_scene", "description": "[3]  <cinematic_scene_definition>  Retrieve a cinematic tag from the cinematic system", "body": [ "cinematic_tag_reference_get_scene ${1:<long>} ${0:<long>}" ] },
	"cinematic_zone_activate": { "prefix": "cinematic_zone_activate", "description": "[3]  activates scenario cinematic zone (automatically generated script function!)", "body": [ "cinematic_zone_activate ${1:<long>}" ] },
	"cinematic_zone_activate_for_debugging": { "prefix": "cinematic_zone_activate_for_debugging", "description": "[3]  activates scenario cinematic zone for debugging (automatically generated script function!)", "body": [ "cinematic_zone_activate_for_debugging ${1:<long>}" ] },
	"cinematic_zone_activate_from_editor": { "prefix": "cinematic_zone_activate_from_editor", "description": "[3]  activates cinematic zone from tag (automatically generated script function!)", "body": [ "cinematic_zone_activate_from_editor ${1:<any_tag>}" ] },
	"cinematic_zone_deactivate": { "prefix": "cinematic_zone_deactivate", "description": "[3]  deactivates scenario cinematic zone (automatically generated script function!)", "body": [ "cinematic_zone_deactivate ${1:<long>}" ] },
	"cinematic_zone_deactivate_from_editor": { "prefix": "cinematic_zone_deactivate_from_editor", "description": "[3]  deactivates cinematic zone from tag (automatically generated script function!)", "body": [ "cinematic_zone_deactivate_from_editor ${1:<any_tag>}" ] },
	"clear_webcache": { "prefix": "clear_webcache", "description": "[3]  clears the webcache", "body": [ "clear_webcache" ] },
	"cls": { "prefix": "cls", "description": "[1,2,3]  clears console text from the screen", "body": [ "cls" ] },
	"collision_log_enable": { "prefix": "collision_log_enable", "description": "[3]  enables or disables collision logging.", "body": [ "collision_log_enable ${1:<boolean>}" ] },
	"color_grading_enable": { "prefix": "color_grading_enable", "description": "[3]  turn on/off color grading", "body": [ "color_grading_enable ${1:<boolean>}" ] },
	"cond": { "prefix": "cond", "description": "[1,2,3]  <passthrough>  returns the value associated with the first true condition.", "body": [ "cond ${1:(<boolean1>} ${2:<result1>)} ${3:[(<boolean2>} ${0:<result2>)]}" ] },
	"content_catalogue_display_status": { "prefix": "content_catalogue_display_status", "description": "[3]  display the status of content catalogue for a controller, optionally showing only open content items", "body": [ "content_catalogue_display_status ${1:<controller>} ${2:<boolean>} ${0:<boolean>}" ] },
	"controller_display_storage_device_selection": { "prefix": "controller_display_storage_device_selection", "description": "[3]  display storage device selection ui for the specified controller", "body": [ "controller_display_storage_device_selection ${1:<controller>}" ] },
	"controller_get_look_invert": { "prefix": "controller_get_look_invert", "description": "[2,3]  <boolean>  returns TRUE if player0's look pitch is inverted", "body": [ "controller_get_look_invert" ] },
	"controller_invert_look": { "prefix": "controller_invert_look", "description": "[2,3]  invert look on all attached controllers", "body": [ "controller_invert_look" ] },
	"controller_lock_models": { "prefix": "controller_lock_models", "description": "[3]  <controller> lock all model permutations for specified controller", "body": [ "controller_lock_models ${1:<controller>}" ] },
	"controller_lock_single_player_levels": { "prefix": "controller_lock_single_player_levels", "description": "[3]  <controller> lock all single player levels for specified controller", "body": [ "controller_lock_single_player_levels ${1:<controller>}" ] },
	"controller_lock_skulls": { "prefix": "controller_lock_skulls", "description": "[3]  <controller> lock all campaign skulls for specified controller", "body": [ "controller_lock_skulls ${1:<controller>}" ] },
	"controller_look_speed": { "prefix": "controller_look_speed", "description": "[2,3]  set look speed for all attached controllers", "body": [ "controller_look_speed ${1:<short>}" ] },
	"controller_set_auto_center_look": { "prefix": "controller_set_auto_center_look", "description": "[3]  set auto center look for specified controller", "body": [ "controller_set_auto_center_look ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_background_emblem_color": { "prefix": "controller_set_background_emblem_color", "description": "[3]  set tertiary color for specified controller", "body": [ "controller_set_background_emblem_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_button_preset": { "prefix": "controller_set_button_preset", "description": "[3]  set button preset for specified controller", "body": [ "controller_set_button_preset ${1:<controller>} ${2:<button} ${0:preset>}" ] },
	"controller_set_crouch_lock": { "prefix": "controller_set_crouch_lock", "description": "[3]  set crouch lock for specified controller", "body": [ "controller_set_crouch_lock ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_emblem_info": { "prefix": "controller_set_emblem_info", "description": "[3]  set emblem for specified controller", "body": [ "controller_set_emblem_info ${1:<controller>} ${2:<short>} ${0:<short>}" ] },
	"controller_set_flight_stick_aircraft_controls": { "prefix": "controller_set_flight_stick_aircraft_controls", "description": "[3]  set airrcraft flight stick controls for specified controller", "body": [ "controller_set_flight_stick_aircraft_controls ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_joystick_preset": { "prefix": "controller_set_joystick_preset", "description": "[3]  set joystick preset for specified controller", "body": [ "controller_set_joystick_preset ${1:<controller>} ${2:<joystick} ${0:preset>}" ] },
	"controller_set_look_invert": { "prefix": "controller_set_look_invert", "description": "[2,3]  invert player0's look", "body": [ "controller_set_look_invert ${1:<boolean>}" ] },
	"controller_set_look_inverted": { "prefix": "controller_set_look_inverted", "description": "[3]  set look inversion for specified controller", "body": [ "controller_set_look_inverted ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_look_sensitivity": { "prefix": "controller_set_look_sensitivity", "description": "[3]  set look sensitivity for specified controller", "body": [ "controller_set_look_sensitivity ${1:<controller>} ${0:<short>}" ] },
	"controller_set_player_character_type": { "prefix": "controller_set_player_character_type", "description": "[3]  set player character type for specified controller", "body": [ "controller_set_player_character_type ${1:<controller>} ${0:<player_character_type>}" ] },
	"controller_set_popup_message_index": { "prefix": "controller_set_popup_message_index", "description": "[3]  <controller> <message index> set the highest popup message that the player has accepted", "body": [ "controller_set_popup_message_index ${1:<controller>} ${0:<long>}" ] },
	"controller_set_primary_change_color": { "prefix": "controller_set_primary_change_color", "description": "[3]  set primary change color for specified controller", "body": [ "controller_set_primary_change_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_primary_emblem_color": { "prefix": "controller_set_primary_emblem_color", "description": "[3]  set primary change color for specified controller", "body": [ "controller_set_primary_emblem_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_secondary_change_color": { "prefix": "controller_set_secondary_change_color", "description": "[3]  set secondary change color for specified controller", "body": [ "controller_set_secondary_change_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_secondary_emblem_color": { "prefix": "controller_set_secondary_emblem_color", "description": "[3]  set secondary change color for specified controller", "body": [ "controller_set_secondary_emblem_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_single_player_level_completed": { "prefix": "controller_set_single_player_level_completed", "description": "[3]  <controller> <level index> <co-op> <difficulty> <completed> set the single player levels completed state for specified controller", "body": [ "controller_set_single_player_level_completed ${1:<controller>} ${2:<long>} ${3:<boolean>} ${4:<game_difficulty>} ${0:<boolean>}" ] },
	"controller_set_single_player_level_unlocked": { "prefix": "controller_set_single_player_level_unlocked", "description": "[3]  <controller> <level index> <bool locked> set single player level locked state for specified controller", "body": [ "controller_set_single_player_level_unlocked ${1:<controller>} ${2:<short>} ${0:<boolean>}" ] },
	"controller_set_skin": { "prefix": "controller_set_skin", "description": "[3]  set skins for specified controller", "body": [ "controller_set_skin ${1:<controller>} ${2:<short>} ${0:<short>}" ] },
	"controller_set_subtitle_setting": { "prefix": "controller_set_subtitle_setting", "description": "[3]  set subtitle setting for specified controller", "body": [ "controller_set_subtitle_setting ${1:<controller>} ${0:<subtitle_setting>}" ] },
	"controller_set_tertiary_change_color": { "prefix": "controller_set_tertiary_change_color", "description": "[3]  set tertiary color for specified controller", "body": [ "controller_set_tertiary_change_color ${1:<controller>} ${0:<player_color>}" ] },
	"controller_set_unsignedin_user": { "prefix": "controller_set_unsignedin_user", "description": "[3]  Toggle controller as unsigned-in user", "body": [ "controller_set_unsignedin_user ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_vibration_enabled": { "prefix": "controller_set_vibration_enabled", "description": "[3]  set vibration for specified controller", "body": [ "controller_set_vibration_enabled ${1:<controller>} ${0:<boolean>}" ] },
	"controller_set_voice_mask": { "prefix": "controller_set_voice_mask", "description": "[3]  set voice mask for specified controller", "body": [ "controller_set_voice_mask ${1:<controller>} ${0:<voice_mask>}" ] },
	"controller_set_voice_output_setting": { "prefix": "controller_set_voice_output_setting", "description": "[3]  set voice output setting for specified controller", "body": [ "controller_set_voice_output_setting ${1:<controller>} ${0:<voice_output_setting>}" ] },
	"controller_unlock_models": { "prefix": "controller_unlock_models", "description": "[3]  <controller> unlock all model permutations for specified controller", "body": [ "controller_unlock_models ${1:<controller>}" ] },
	"controller_unlock_single_player_levels": { "prefix": "controller_unlock_single_player_levels", "description": "[3]  <controller> unlock all single player levels for specified controller", "body": [ "controller_unlock_single_player_levels ${1:<controller>}" ] },
	"controller_unlock_skulls": { "prefix": "controller_unlock_skulls", "description": "[3]  <controller> unlock all campaign skulls for specified controller", "body": [ "controller_unlock_skulls ${1:<controller>}" ] },
	"controller_unlock_solo_levels": { "prefix": "controller_unlock_solo_levels", "description": "[2]  unlocks all the solo player levels for <controller index>'s profile", "body": [ "controller_unlock_solo_levels ${1:<short>}" ] },
	"core_load": { "prefix": "core_load", "description": "[1,2,3]  loads debug game state from core\\core.bin", "body": [ "core_load" ] },
	"core_load_at_startup": { "prefix": "core_load_at_startup", "description": "[1]  loads debug game state from core\\core.bin as soon as the map is initialized", "body": [ "core_load_at_startup" ] },
	"core_load_game": { "prefix": "core_load_game", "description": "[2,3]  loads level and game state from core\\core.bin", "body": [ "core_load_game" ] },
	"core_load_game_name": { "prefix": "core_load_game_name", "description": "[2,3]  loads level and game state from core\\<path>", "body": [ "core_load_game_name ${1:<string>}" ] },
	"core_load_name": { "prefix": "core_load_name", "description": "[1,2,3]  loads debug game state from core\\<path>", "body": [ "core_load_name ${1:<string>}" ] },
	"core_load_name_at_startup": { "prefix": "core_load_name_at_startup", "description": "[1]  loads debug game state from core\\<path> as soon as the map is initialized", "body": [ "core_load_name_at_startup ${1:<string>}" ] },
	"core_regular_upload_to_debug_server": { "prefix": "core_regular_upload_to_debug_server", "description": "[2,3]  toggle periodic core uploading to debug server", "body": [ "core_regular_upload_to_debug_server ${1:<boolean>}" ] },
	"core_save": { "prefix": "core_save", "description": "[1,2,3]  saves debug game state to core\\core.bin", "body": [ "core_save" ] },
	"core_save_name": { "prefix": "core_save_name", "description": "[1,2,3]  <boolean>  saves debug game state to core\\<path>", "body": [ "core_save_name ${1:<string>}" ] },
	"core_set_upload_option": { "prefix": "core_set_upload_option", "description": "[2,3]  sets options for game state uploading (current options are 'default', 'repro', and 'stress'", "body": [ "core_set_upload_option ${1:<string>}" ] },
	"cortana_effect_kill": { "prefix": "cortana_effect_kill", "description": "[3]  kills the cortana effect", "body": [ "cortana_effect_kill" ] },
	"cortana_tag_reference_get_scene": { "prefix": "cortana_tag_reference_get_scene", "description": "[3]  <cinematic_scene_definition>  Retrieve a cinematic tag from the cinematic system", "body": [ "cortana_tag_reference_get_scene ${1:<long>}" ] },
	"cortana_terminal_was_accessed": { "prefix": "cortana_terminal_was_accessed", "description": "[3]  Hack for ace as cortana's terminal needs to callback to terminal code", "body": [ "cortana_terminal_was_accessed" ] },
	"crash": { "prefix": "crash", "description": "[1,2,3]  crashes (for debugging).", "body": [ "crash ${1:<string>}" ] },
	"create_secure_test_file": { "prefix": "create_secure_test_file", "description": "[3]  generates a compressed encrypted test file", "body": [ "create_secure_test_file" ] },
	"cs_abort_on_alert": { "prefix": "cs_abort_on_alert", "description": "[2,3]  Command script ends prematurely when actor's combat status raises to 'alert' or higher", "body": [ "cs_abort_on_alert ${1:<boolean>}" ] },
	"cs_abort_on_combat_status": { "prefix": "cs_abort_on_combat_status", "description": "[2,3]  Command script ends prematurely when actor's combat status rises to given level", "body": [ "cs_abort_on_combat_status ${1:<short>}" ] },
	"cs_abort_on_damage": { "prefix": "cs_abort_on_damage", "description": "[2,3]  Command script ends prematurely when actor is damaged", "body": [ "cs_abort_on_damage ${1:<boolean>}" ] },
	"cs_abort_on_vehicle_exit": { "prefix": "cs_abort_on_vehicle_exit", "description": "[3]  Command script ends prematurely when actor gets out of its vehicle", "body": [ "cs_abort_on_vehicle_exit ${1:<boolean>}" ] },
	"cs_action": { "prefix": "cs_action", "description": "[3]  Actor plays an AI action towards the given point. ai_action_<tab> to see action options", "body": [ "cs_action ${1:<point_reference>} ${0:<short>}" ] },
	"cs_action_at_object": { "prefix": "cs_action_at_object", "description": "[3]  Actor plays an AI action towards the given object. ai_action_<tab> to see action options", "body": [ "cs_action_at_object ${1:<object>} ${0:<short>}" ] },
	"cs_action_at_player": { "prefix": "cs_action_at_player", "description": "[3]  Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options", "body": [ "cs_action_at_player ${1:<short>}" ] },
	"cs_aim": { "prefix": "cs_aim", "description": "[2,3]  Actor aims at the point for the remainder of the cs, or until overridden (overrides look)", "body": [ "cs_aim ${1:<boolean>} ${0:<point_reference>}" ] },
	"cs_aim_object": { "prefix": "cs_aim_object", "description": "[2,3]  Actor aims at the object for the duration of the cs, or until overridden (overrides look)", "body": [ "cs_aim_object ${1:<boolean>}" ] },
	"cs_aim_player": { "prefix": "cs_aim_player", "description": "[2,3]  Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)", "body": [ "cs_aim_player ${1:<boolean>}" ] },
	"cs_animate": { "prefix": "cs_animate", "description": "[2]  Actor performs animation with given modifier (anim-ref, modifier)", "body": [ "cs_animate ${1:<long>}" ] },
	"cs_approach": { "prefix": "cs_approach", "description": "[2,3]  (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)", "body": [ "cs_approach ${1:<object>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"cs_approach_player": { "prefix": "cs_approach_player", "description": "[2,3]  (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)", "body": [ "cs_approach_player ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"cs_approach_stop": { "prefix": "cs_approach_stop", "description": "[2,3]  Actor stops approaching", "body": [ "cs_approach_stop" ] },
	"cs_command_script_queued": { "prefix": "cs_command_script_queued", "description": "[2,3]  <boolean>  Returns true if the command script is in the ai's cs queue", "body": [ "cs_command_script_queued ${1:<ai>} ${0:<ai_command_script>}" ] },
	"cs_command_script_running": { "prefix": "cs_command_script_running", "description": "[2,3]  <boolean>  Returns true if the ai is running the command script in question", "body": [ "cs_command_script_running ${1:<ai>} ${0:<ai_command_script>}" ] },
	"cs_crouch": { "prefix": "cs_crouch", "description": "[2,3]  Actor crouches for the remainder of the command script, or until overridden", "body": [ "cs_crouch ${1:<boolean>}" ] },
	"cs_custom_animation": { "prefix": "cs_custom_animation", "description": "[2,3]  starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)", "body": [ "cs_custom_animation ${1:<animation_graph>} ${2:<real>} ${0:<boolean>}" ] },
	"cs_custom_animation_death": { "prefix": "cs_custom_animation_death", "description": "[3]  starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)", "body": [ "cs_custom_animation_death ${1:<animation_graph>} ${2:<string_id>} ${0:<boolean>}" ] },
	"cs_custom_animation_loop": { "prefix": "cs_custom_animation_loop", "description": "[3]  starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING", "body": [ "cs_custom_animation_loop ${1:<animation_graph>} ${2:<string_id>} ${0:<boolean>}" ] },
	"cs_deploy_turret": { "prefix": "cs_deploy_turret", "description": "[2,3]  Deploy a turret at the given script point", "body": [ "cs_deploy_turret ${1:<point_reference>}" ] },
	"cs_die": { "prefix": "cs_die", "description": "[2,3]  Actor dies in specified manner", "body": [ "cs_die ${1:<short>}" ] },
	"cs_draw": { "prefix": "cs_draw", "description": "[3]  Actor draws its current weapon", "body": [ "cs_draw" ] },
	"cs_enable_dialogue": { "prefix": "cs_enable_dialogue", "description": "[2,3]  Actor combat dialogue enabled/disabled.", "body": [ "cs_enable_dialogue ${1:<boolean>}" ] },
	"cs_enable_looking": { "prefix": "cs_enable_looking", "description": "[2,3]  Actor autonomous looking enabled/disabled.", "body": [ "cs_enable_looking ${1:<boolean>}" ] },
	"cs_enable_moving": { "prefix": "cs_enable_moving", "description": "[2,3]  Actor autonomous moving enabled/disabled.", "body": [ "cs_enable_moving ${1:<boolean>}" ] },
	"cs_enable_pathfinding_failsafe": { "prefix": "cs_enable_pathfinding_failsafe", "description": "[2,3]  Actor blocks until pathfinding calls succeed", "body": [ "cs_enable_pathfinding_failsafe ${1:<boolean>}" ] },
	"cs_enable_targeting": { "prefix": "cs_enable_targeting", "description": "[2,3]  Actor autonomous target selection enabled/disabled.", "body": [ "cs_enable_targeting ${1:<boolean>}" ] },
	"cs_equipment": { "prefix": "cs_equipment", "description": "[3]  Actor throws their equipment in the direction of the given point", "body": [ "cs_equipment ${1:<point_reference>}" ] },
	"cs_face": { "prefix": "cs_face", "description": "[2,3]  Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)", "body": [ "cs_face ${1:<boolean>} ${0:<point_reference>}" ] },
	"cs_face_object": { "prefix": "cs_face_object", "description": "[2,3]  Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)", "body": [ "cs_face_object ${1:<boolean>}" ] },
	"cs_face_player": { "prefix": "cs_face_player", "description": "[2,3]  Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)", "body": [ "cs_face_player ${1:<boolean>}" ] },
	"cs_fly_by": { "prefix": "cs_fly_by", "description": "[2,3]  Flies the actor through the given point", "body": [ "cs_fly_by ${1:<point_reference>}" ] },
	"cs_fly_to": { "prefix": "cs_fly_to", "description": "[2,3]  Flies the actor to the given point", "body": [ "cs_fly_to ${1:<point_reference>}" ] },
	"cs_fly_to_and_face": { "prefix": "cs_fly_to_and_face", "description": "[2,3]  Flies the actor to the given point and orients him in the appropriate direction", "body": [ "cs_fly_to_and_face ${1:<point_reference>} ${0:<point_reference>}" ] },
	"cs_force_combat_status": { "prefix": "cs_force_combat_status", "description": "[2,3]  Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)", "body": [ "cs_force_combat_status ${1:<short>}" ] },
	"cs_formation": { "prefix": "cs_formation", "description": "[2]  Actor initiates a formation of the given type at the given point, facing (initially) at the given other point. Formation types are (0) 1x column (1) 2x column ... (4) wall (5) wedge", "body": [ "cs_formation ${1:<short>} ${2:<point_reference>} ${0:<point_reference>}" ] },
	"cs_go_by": { "prefix": "cs_go_by", "description": "[2,3]  Actor moves toward the point, and considers it hit when it breaks the indicated plane", "body": [ "cs_go_by ${1:<point_reference>} ${0:<point_reference>}" ] },
	"cs_go_to": { "prefix": "cs_go_to", "description": "[2,3]  Moves the actor to a specified point", "body": [ "cs_go_to ${1:<point_reference>}" ] },
	"cs_go_to_and_face": { "prefix": "cs_go_to_and_face", "description": "[2,3]  Moves the actor to a specified point and has him face the second point", "body": [ "cs_go_to_and_face ${1:<point_reference>} ${0:<point_reference>}" ] },
	"cs_go_to_and_posture": { "prefix": "cs_go_to_and_posture", "description": "[3]  Actor moves to the point and performs a posture once there", "body": [ "cs_go_to_and_posture ${1:<point_reference>} ${0:<string_id>}" ] },
	"cs_go_to_nearest": { "prefix": "cs_go_to_nearest", "description": "[2,3]  Given a point set, AI goes toward the nearest point", "body": [ "cs_go_to_nearest ${1:<point_reference>}" ] },
	"cs_go_to_vehicle": { "prefix": "cs_go_to_vehicle", "description": "[2,3]  Actor gets in the appropriate vehicle", "body": [ "cs_go_to_vehicle ${1:<vehicle>}" ] },
	"cs_grenade": { "prefix": "cs_grenade", "description": "[2,3]  Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)", "body": [ "cs_grenade ${1:<point_reference>} ${0:<short>}" ] },
	"cs_ignore_obstacles": { "prefix": "cs_ignore_obstacles", "description": "[2,3]  Actor does not avoid obstacles when true", "body": [ "cs_ignore_obstacles ${1:<boolean>}" ] },
	"cs_jump": { "prefix": "cs_jump", "description": "[2,3]  Actor jumps in direction of angle at the given velocity (angle, velocity)", "body": [ "cs_jump ${1:<real>}" ] },
	"cs_jump_to_point": { "prefix": "cs_jump_to_point", "description": "[2,3]  Actor jumps with given horizontal and vertical velocity", "body": [ "cs_jump_to_point ${1:<real>}" ] },
	"cs_look": { "prefix": "cs_look", "description": "[2,3]  Actor looks at the point for the remainder of the cs, or until overridden", "body": [ "cs_look ${1:<boolean>} ${0:<point_reference>}" ] },
	"cs_look_object": { "prefix": "cs_look_object", "description": "[2,3]  Actor looks at the object for the duration of the cs, or until overridden", "body": [ "cs_look_object ${1:<boolean>}" ] },
	"cs_look_player": { "prefix": "cs_look_player", "description": "[2,3]  Actor looks at nearest player for the duration of the cs, or until overridden", "body": [ "cs_look_player ${1:<boolean>}" ] },
	"cs_lower_weapon": { "prefix": "cs_lower_weapon", "description": "[3]  Actor keeps weapon lowered", "body": [ "cs_lower_weapon ${1:<boolean>}" ] },
	"cs_melee_direction": { "prefix": "cs_melee_direction", "description": "[3]  Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)", "body": [ "cs_melee_direction ${1:<long>}" ] },
	"cs_move_in_direction": { "prefix": "cs_move_in_direction", "description": "[2,3]  Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)", "body": [ "cs_move_in_direction ${1:<real>} ${0:<real>}" ] },
	"cs_move_towards": { "prefix": "cs_move_towards", "description": "[3]  Move in the direction of the given object", "body": [ "cs_move_towards ${1:<object>}" ] },
	"cs_movement_mode": { "prefix": "cs_movement_mode", "description": "[2,3]  Actor switches to given animation mode", "body": [ "cs_movement_mode ${1:<short>}" ] },
	"cs_moving": { "prefix": "cs_moving", "description": "[2,3]  <boolean>  Returns TRUE if the actor is currently following a path", "body": [ "cs_moving" ] },
	"cs_number_queued": { "prefix": "cs_number_queued", "description": "[2,3]  <short>  Returns the number of queued command scripts", "body": [ "cs_number_queued ${1:<ai>}" ] },
	"cs_pause": { "prefix": "cs_pause", "description": "[2,3]  The actor does nothing for the given number of seconds", "body": [ "cs_pause ${1:<real>}" ] },
	"cs_play_line": { "prefix": "cs_play_line", "description": "[2,3]  Play the named line in the current scene", "body": [ "cs_play_line ${1:<string_id>}" ] },
	"cs_play_sound": { "prefix": "cs_play_sound", "description": "[2,3]  Actor plays an impulse sound and the atom blocks until it is complete", "body": [ "cs_play_sound ${1:<sound>}" ] },
	"cs_player_melee": { "prefix": "cs_player_melee", "description": "[3]  Actor performs player-specific melee", "body": [ "cs_player_melee ${1:<long>}" ] },
	"cs_posture_exit": { "prefix": "cs_posture_exit", "description": "[3]  Actor exits the posture it's in", "body": [ "cs_posture_exit" ] },
	"cs_posture_set": { "prefix": "cs_posture_set", "description": "[3]  Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)", "body": [ "cs_posture_set ${1:<string_id>} ${0:<boolean>}" ] },
	"cs_queue_command_script": { "prefix": "cs_queue_command_script", "description": "[2,3]  Add a command script onto the end of an actor's command script queue", "body": [ "cs_queue_command_script ${1:<ai>} ${0:<ai_command_script>}" ] },
	"cs_run_command_script": { "prefix": "cs_run_command_script", "description": "[2,3]  Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)", "body": [ "cs_run_command_script ${1:<ai>} ${0:<ai_command_script>}" ] },
	"cs_run_joint_command_script": { "prefix": "cs_run_joint_command_script", "description": "[2]  Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)", "body": [ "cs_run_joint_command_script ${1:<ai_command_script>} ${2:<ai>} ${0:<ai>}" ] },
	"cs_set_behavior": { "prefix": "cs_set_behavior", "description": "[2]  Actor performs the indicated behavior", "body": [ "cs_set_behavior ${1:<ai_behavior>}" ] },
	"cs_set_pathfinding_radius": { "prefix": "cs_set_pathfinding_radius", "description": "[2,3]  Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script", "body": [ "cs_set_pathfinding_radius ${1:<real>}" ] },
	"cs_set_style": { "prefix": "cs_set_style", "description": "[2,3]  Override the actor's style", "body": [ "cs_set_style ${1:<style>}" ] },
	"cs_shoot": { "prefix": "cs_shoot", "description": "[2,3]  Actor is allowed to shoot at its target or not", "body": [ "cs_shoot ${1:<boolean>}" ] },
	"cs_shoot_point": { "prefix": "cs_shoot_point", "description": "[2,3]  Actor shoots at given point", "body": [ "cs_shoot_point ${1:<boolean>} ${0:<point_reference>}" ] },
	"cs_shoot_secondary_trigger": { "prefix": "cs_shoot_secondary_trigger", "description": "[3]  Actor uses secondary trigger whenever he shoots", "body": [ "cs_shoot_secondary_trigger ${1:<boolean>}" ] },
	"cs_smash_direction": { "prefix": "cs_smash_direction", "description": "[3]  Actor performs smash in provided direction", "body": [ "cs_smash_direction ${1:<long>}" ] },
	"cs_stack_command_script": { "prefix": "cs_stack_command_script", "description": "[2,3]  Push a command script to the top of the actor's command script queue", "body": [ "cs_stack_command_script ${1:<ai>} ${0:<ai_command_script>}" ] },
	"cs_start_approach": { "prefix": "cs_start_approach", "description": "[2]  (approach <object> <distance> <max-distance> <follow-distance>) NON-BLOCKING", "body": [ "cs_start_approach ${1:<object>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"cs_start_approach_player": { "prefix": "cs_start_approach_player", "description": "[2]  (approach <distance> <max-distance> <follow-distance>) NON-BLOCKING", "body": [ "cs_start_approach_player ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"cs_start_to": { "prefix": "cs_start_to", "description": "[2]  Moves the actor to a specified point. DOES NOT BLOCK SCRIPT EXECUTION", "body": [ "cs_start_to ${1:<point_reference>}" ] },
	"cs_stop_custom_animation": { "prefix": "cs_stop_custom_animation", "description": "[2,3]  Stop running a custom animation", "body": [ "cs_stop_custom_animation" ] },
	"cs_stop_sound": { "prefix": "cs_stop_sound", "description": "[2,3]  Stops the specified impulse sound.", "body": [ "cs_stop_sound ${1:<sound>}" ] },
	"cs_stow": { "prefix": "cs_stow", "description": "[3]  Actor stows its current weapon", "body": [ "cs_stow" ] },
	"cs_suppress_activity_termination": { "prefix": "cs_suppress_activity_termination", "description": "[3]  Autonomous termination of activities is suppressed for the remainder of the command script", "body": [ "cs_suppress_activity_termination ${1:<boolean>}" ] },
	"cs_suppress_dialogue_global": { "prefix": "cs_suppress_dialogue_global", "description": "[2,3]  Combat dialogue is suppressed for the remainder of the command script", "body": [ "cs_suppress_dialogue_global ${1:<boolean>}" ] },
	"cs_swarm_from": { "prefix": "cs_swarm_from", "description": "[3]  A swarm swarms away from the point in question, going at least the given distance", "body": [ "cs_swarm_from ${1:<point_reference>} ${0:<real>}" ] },
	"cs_swarm_to": { "prefix": "cs_swarm_to", "description": "[3]  A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius", "body": [ "cs_swarm_to ${1:<point_reference>} ${0:<real>}" ] },
	"cs_switch": { "prefix": "cs_switch", "description": "[2]  Switch control of the joint command script to the given member", "body": [ "cs_switch ${1:<string_id>}" ] },
	"cs_switch_index": { "prefix": "cs_switch_index", "description": "[2]  Switch control of the joint command script to the given member", "body": [ "cs_switch_index ${1:<short>}" ] },
	"cs_teleport": { "prefix": "cs_teleport", "description": "[2,3]  Actor teleports to point1 facing point2", "body": [ "cs_teleport ${1:<point_reference>} ${0:<point_reference>}" ] },
	"cs_transfer": { "prefix": "cs_transfer", "description": "[2]  Transfer control of the command script to the given actor (replacing what he has)", "body": [ "cs_transfer ${1:<ai>}" ] },
	"cs_transfer_queue": { "prefix": "cs_transfer_queue", "description": "[2]  Transfer control of the command script to the given actor (queueing it)", "body": [ "cs_transfer_queue ${1:<ai>}" ] },
	"cs_transfer_stack": { "prefix": "cs_transfer_stack", "description": "[2]  Transfer control of the command script to the given actor (stacking it)", "body": [ "cs_transfer_stack ${1:<ai>}" ] },
	"cs_turn_sharpness": { "prefix": "cs_turn_sharpness", "description": "[2,3]  Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)", "body": [ "cs_turn_sharpness ${1:<boolean>} ${0:<real>}" ] },
	"cs_vehicle_boost": { "prefix": "cs_vehicle_boost", "description": "[2,3]  Enables or disables boost", "body": [ "cs_vehicle_boost ${1:<boolean>}" ] },
	"cs_vehicle_speed": { "prefix": "cs_vehicle_speed", "description": "[2,3]  Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1", "body": [ "cs_vehicle_speed ${1:<real>}" ] },
	"cs_vehicle_speed_instantaneous": { "prefix": "cs_vehicle_speed_instantaneous", "description": "[2,3]  Set the instantaneous speed of the vehicle we're driving", "body": [ "cs_vehicle_speed_instantaneous ${1:<real>}" ] },
	"cs_vocalize": { "prefix": "cs_vocalize", "description": "[2,3]  Actor emits vocalization of given type", "body": [ "cs_vocalize ${1:<short>}" ] },
	"cs_walk": { "prefix": "cs_walk", "description": "[3]  Actor walks for the remainder of the command script, or until overridden", "body": [ "cs_walk ${1:<boolean>}" ] },
	"cubemap_dynamic_generate": { "prefix": "cubemap_dynamic_generate", "description": "[3]  generates a dynamic cubemap and saves in the cubemaps directory", "body": [ "cubemap_dynamic_generate" ] },
	"current_zone_set": { "prefix": "current_zone_set", "description": "[3]  <long>  returns the current zone set", "body": [ "current_zone_set" ] },
	"current_zone_set_fully_active": { "prefix": "current_zone_set_fully_active", "description": "[3]  <long>  returns the current zone set", "body": [ "current_zone_set_fully_active" ] },
	"custom_animation": { "prefix": "custom_animation", "description": "[1,2,3]  <boolean>  starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)", "body": [ "custom_animation ${1:<unit>} ${2:<animation_graph>} ${3:<string>} ${0:<boolean>}" ] },
	"custom_animation_list": { "prefix": "custom_animation_list", "description": "[1,2,3]  <boolean>  starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)", "body": [ "custom_animation_list ${1:<object_list>} ${2:<animation_graph>} ${3:<string>} ${0:<boolean>}" ] },
	"custom_animation_loop": { "prefix": "custom_animation_loop", "description": "[2,3]  <boolean>  starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)", "body": [ "custom_animation_loop ${1:<unit>} ${2:<animation_graph>} ${3:<string_id>} ${0:<boolean>}" ] },
	"custom_animation_relative": { "prefix": "custom_animation_relative", "description": "[2,3]  <boolean>  starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)", "body": [ "custom_animation_relative ${1:<unit>} ${2:<animation_graph>} ${3:<string_id>} ${4:<boolean>} ${0:<object>}" ] },
	"custom_animation_relative_loop": { "prefix": "custom_animation_relative_loop", "description": "[2,3]  <boolean>  starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)", "body": [ "custom_animation_relative_loop ${1:<unit>} ${2:<animation_graph>} ${3:<string_id>} ${4:<boolean>} ${0:<object>}" ] },
	"d3d_enum_modes": { "prefix": "d3d_enum_modes", "description": "[3]  enumerate and dump available video modes", "body": [ "d3d_enum_modes" ] },
	"d3d_reset": { "prefix": "d3d_reset", "description": "[3]  reset device", "body": [ "d3d_reset" ] },
	"d3d_set_mode": { "prefix": "d3d_set_mode", "description": "[3]  set render mode (<adapter> <width> <height> <fullscreen>)", "body": [ "d3d_set_mode ${1:<short>} ${2:<short>} ${3:<short>} ${0:<boolean>}" ] },
	"d3d_set_mode_idx": { "prefix": "d3d_set_mode_idx", "description": "[3]  set render mode (<adapter> <mode> <fullscreen>)", "body": [ "d3d_set_mode_idx ${1:<short>} ${2:<short>} ${0:<boolean>}" ] },
	"damage_control_get": { "prefix": "damage_control_get", "description": "[2,3]  gets a damage control setting by string", "body": [ "damage_control_get ${1:<string>}" ] },
	"damage_control_set": { "prefix": "damage_control_set", "description": "[2,3]  sets a damage control setting by string", "body": [ "damage_control_set ${1:<string>} ${0:<boolean>}" ] },
	"damage_new": { "prefix": "damage_new", "description": "[1,2,3]  causes the specified damage at the specified flag.", "body": [ "damage_new ${1:<damage>} ${0:<cutscene_flag>}" ] },
	"damage_object": { "prefix": "damage_object", "description": "[1,2,3]  causes the specified damage at the specified object.", "body": [ "damage_object ${1:<damage>} ${0:<object>}" ] },
	"damage_object_effect": { "prefix": "damage_object_effect", "description": "[3]  causes the specified damage at the specified object.", "body": [ "damage_object_effect ${1:<damage>} ${0:<object>}" ] },
	"damage_objects": { "prefix": "damage_objects", "description": "[2,3]  causes the specified damage at the specified object list.", "body": [ "damage_objects ${1:<damage>} ${0:<object_list>}" ] },
	"damage_objects_effect": { "prefix": "damage_objects_effect", "description": "[3]  causes the specified damage at the specified object list.", "body": [ "damage_objects_effect ${1:<damage>} ${0:<object_list>}" ] },
	"damage_players": { "prefix": "damage_players", "description": "[2,3]  damages all players with the given damage effect", "body": [ "damage_players ${1:<damage>}" ] },
	"data_mine_debug_menu_setting": { "prefix": "data_mine_debug_menu_setting", "description": "[2,3]  close debug menu and set user experience setting to string", "body": [ "data_mine_debug_menu_setting ${1:<string>}" ] },
	"data_mine_display_disk_writes": { "prefix": "data_mine_display_disk_writes", "description": "[2]  enable/disable console message on disk writes", "body": [ "data_mine_display_disk_writes ${1:<boolean>}" ] },
	"data_mine_display_event": { "prefix": "data_mine_display_event", "description": "[2]  enable displaying of an event", "body": [ "data_mine_display_event ${1:<string>}" ] },
	"data_mine_display_mission_segment": { "prefix": "data_mine_display_mission_segment", "description": "[2]  display the current mission segment", "body": [ "data_mine_display_mission_segment ${1:<boolean>}" ] },
	"data_mine_display_session_data": { "prefix": "data_mine_display_session_data", "description": "[2]  show data mine session, game, and network ids", "body": [ "data_mine_display_session_data" ] },
	"data_mine_enable": { "prefix": "data_mine_enable", "description": "[2,3]  enable/disable data mining", "body": [ "data_mine_enable ${1:<boolean>}" ] },
	"data_mine_flush": { "prefix": "data_mine_flush", "description": "[3]  flush any pending data mine data to disk", "body": [ "data_mine_flush" ] },
	"data_mine_insert": { "prefix": "data_mine_insert", "description": "[2,3]  insert text and camera position in the data mine", "body": [ "data_mine_insert ${1:<string>}" ] },
	"data_mine_open_debug_menu": { "prefix": "data_mine_open_debug_menu", "description": "[2,3]  open debug menu", "body": [ "data_mine_open_debug_menu" ] },
	"data_mine_playback": { "prefix": "data_mine_playback", "description": "[2]  loads and displays data mine data from a file", "body": [ "data_mine_playback ${1:<string>}" ] },
	"data_mine_playback_exit": { "prefix": "data_mine_playback_exit", "description": "[2]  exit data visualization", "body": [ "data_mine_playback_exit" ] },
	"data_mine_playback_last": { "prefix": "data_mine_playback_last", "description": "[2]  loads and displays last data mine data", "body": [ "data_mine_playback_last" ] },
	"data_mine_set_display_mission_segment": { "prefix": "data_mine_set_display_mission_segment", "description": "[3]  toggle display of data mine mission segment", "body": [ "data_mine_set_display_mission_segment ${1:<boolean>}" ] },
	"data_mine_set_mission_segment": { "prefix": "data_mine_set_mission_segment", "description": "[2,3]  sets the mission segment for single player data mine events", "body": [ "data_mine_set_mission_segment ${1:<string>}" ] },
	"data_mine_show_all_events": { "prefix": "data_mine_show_all_events", "description": "[2]  show all data mine events", "body": [ "data_mine_show_all_events" ] },
	"data_mine_show_displayed_events": { "prefix": "data_mine_show_displayed_events", "description": "[2]  show what events are being displayed by the data mine", "body": [ "data_mine_show_displayed_events" ] },
	"data_mine_show_tracked_events": { "prefix": "data_mine_show_tracked_events", "description": "[2]  show what events are being tracked by the data mine", "body": [ "data_mine_show_tracked_events" ] },
	"data_mine_track_event": { "prefix": "data_mine_track_event", "description": "[2]  enable mining of an event", "body": [ "data_mine_track_event ${1:<string>}" ] },
	"data_mine_upload": { "prefix": "data_mine_upload", "description": "[2,3]  upload all data mining data files to debug server", "body": [ "data_mine_upload" ] },
	"deactivate_nav_point_flag": { "prefix": "deactivate_nav_point_flag", "description": "[1,2]  deactivates a nav point type attached to a player <unit> anchored to a flag", "body": [ "deactivate_nav_point_flag ${1:<unit>} ${0:<cutscene_flag>}" ] },
	"deactivate_nav_point_object": { "prefix": "deactivate_nav_point_object", "description": "[1,2]  deactivates a nav point type attached to a player <unit> anchored to an object", "body": [ "deactivate_nav_point_object ${1:<unit>} ${0:<object>}" ] },
	"deactivate_team_nav_point_flag": { "prefix": "deactivate_team_nav_point_flag", "description": "[1,2]  deactivates a nav point type attached to a team anchored to a flag", "body": [ "deactivate_team_nav_point_flag ${1:<team>} ${0:<cutscene_flag>}" ] },
	"deactivate_team_nav_point_object": { "prefix": "deactivate_team_nav_point_object", "description": "[1,2]  deactivates a nav point type attached to a team anchored to an object", "body": [ "deactivate_team_nav_point_object ${1:<team>} ${0:<object>}" ] },
	"debug_camera_load": { "prefix": "debug_camera_load", "description": "[1,2,3]  loads the saved camera position and facing.", "body": [ "debug_camera_load" ] },
	"debug_camera_load_name": { "prefix": "debug_camera_load_name", "description": "[1,2,3]  loads the camera position and facing from filename", "body": [ "debug_camera_load_name ${1:<string>}" ] },
	"debug_camera_load_simple_name": { "prefix": "debug_camera_load_simple_name", "description": "[1]  loads the camera position and facing from camera_<name>.txt", "body": [ "debug_camera_load_simple_name ${1:<string>}" ] },
	"debug_camera_load_text": { "prefix": "debug_camera_load_text", "description": "[1,2,3]  loads the camera position and facing from a passed in string", "body": [ "debug_camera_load_text ${1:<string>}" ] },
	"debug_camera_save": { "prefix": "debug_camera_save", "description": "[1,2,3]  saves the camera position and facing.", "body": [ "debug_camera_save" ] },
	"debug_camera_save_name": { "prefix": "debug_camera_save_name", "description": "[1,2,3]  saves the camera position and facing to filename", "body": [ "debug_camera_save_name ${1:<string>}" ] },
	"debug_camera_save_simple_name": { "prefix": "debug_camera_save_simple_name", "description": "[1]  saves the camera position and facing to camera_<name>.txt", "body": [ "debug_camera_save_simple_name ${1:<string>}" ] },
	"debug_initial_spawn_point_objects": { "prefix": "debug_initial_spawn_point_objects", "description": "[3]  toggles debug cycling through multiplayer initial spawn points objects", "body": [ "debug_initial_spawn_point_objects ${1:<boolean>}" ] },
	"debug_memory": { "prefix": "debug_memory", "description": "[2,3]  dumps memory leaks.", "body": [ "debug_memory" ] },
	"debug_memory_by_file": { "prefix": "debug_memory_by_file", "description": "[2,3]  dumps memory leaks by source file.", "body": [ "debug_memory_by_file" ] },
	"debug_memory_for_file": { "prefix": "debug_memory_for_file", "description": "[2,3]  dumps memory leaks from the specified source file.", "body": [ "debug_memory_for_file ${1:<string>}" ] },
	"debug_menu_rebuild": { "prefix": "debug_menu_rebuild", "description": "[3]  Reparses the debug menu from the text file.", "body": [ "debug_menu_rebuild" ] },
	"debug_pvs": { "prefix": "debug_pvs", "description": "[1]  displays the current pvs", "body": [ "debug_pvs ${1:<boolean>}" ] },
	"debug_respawn_point_objects": { "prefix": "debug_respawn_point_objects", "description": "[3]  toggles debug cycling through multiplayer respawn points objects", "body": [ "debug_respawn_point_objects ${1:<boolean>}" ] },
	"debug_script_thread": { "prefix": "debug_script_thread", "description": "[3]  Verbose threads spew to log about script and function calls.", "body": [ "debug_script_thread ${1:<string>} ${0:<boolean>}" ] },
	"debug_scripting": { "prefix": "debug_scripting", "description": "[3]  Turn on/off hs script debugging.", "body": [ "debug_scripting ${1:<boolean>}" ] },
	"debug_scripting_globals": { "prefix": "debug_scripting_globals", "description": "[3]  Turn on/off hs global debugging.", "body": [ "debug_scripting_globals ${1:<boolean>}" ] },
	"debug_scripting_show_thread": { "prefix": "debug_scripting_show_thread", "description": "[3]  shows or hides the display of any thread containing the given substring.", "body": [ "debug_scripting_show_thread ${1:<string>} ${0:<boolean>}" ] },
	"debug_sound_channels_by_substring": { "prefix": "debug_sound_channels_by_substring", "description": "[2]  filter display sound channels by substring", "body": [ "debug_sound_channels_by_substring ${1:<string>}" ] },
	"debug_sound_environment_parameter": { "prefix": "debug_sound_environment_parameter", "description": "[2,3]  ", "body": [ "debug_sound_environment_parameter ${1:<long>} ${0:<real>}" ] },
	"debug_sound_environment_source_parameter": { "prefix": "debug_sound_environment_source_parameter", "description": "[2,3]  blah", "body": [ "debug_sound_environment_source_parameter ${1:<long>} ${0:<real>}" ] },
	"debug_sounds_enable": { "prefix": "debug_sounds_enable", "description": "[1,2,3]  enables or disables all sound classes matching the substring.", "body": [ "debug_sounds_enable ${1:<string>} ${0:<boolean>}" ] },
	"debug_spawning": { "prefix": "debug_spawning", "description": "[2]  debugs spawn points for the inputted player", "body": [ "debug_spawning ${1:<string>} ${0:<boolean>}" ] },
	"debug_spawning_dangerous_projectiles": { "prefix": "debug_spawning_dangerous_projectiles", "description": "[3]  debugs dangerous projectile influences", "body": [ "debug_spawning_dangerous_projectiles ${1:<boolean>}" ] },
	"debug_spawning_deployed_equipment": { "prefix": "debug_spawning_deployed_equipment", "description": "[3]  debugs deployed equipment influences", "body": [ "debug_spawning_deployed_equipment ${1:<boolean>}" ] },
	"debug_spawning_influencers": { "prefix": "debug_spawning_influencers", "description": "[3]  toggle debugging of any & all dynamic respawn influencers", "body": [ "debug_spawning_influencers ${1:<boolean>}" ] },
	"debug_spawning_moving_vehicle": { "prefix": "debug_spawning_moving_vehicle", "description": "[3]  debugs moving vehicle danger influences", "body": [ "debug_spawning_moving_vehicle ${1:<boolean>}" ] },
	"debug_spawning_natural_weight": { "prefix": "debug_spawning_natural_weight", "description": "[3]  toggles display of the natural weight influence contribution", "body": [ "debug_spawning_natural_weight ${1:<boolean>}" ] },
	"debug_spawning_nominal_weight": { "prefix": "debug_spawning_nominal_weight", "description": "[3]  toggles display of the nominal weight influence contribution", "body": [ "debug_spawning_nominal_weight ${1:<boolean>}" ] },
	"debug_spawning_proximity_enemy": { "prefix": "debug_spawning_proximity_enemy", "description": "[3]  debugs enemy proximity bias influences", "body": [ "debug_spawning_proximity_enemy ${1:<boolean>}" ] },
	"debug_spawning_proximity_forbid": { "prefix": "debug_spawning_proximity_forbid", "description": "[3]  debugs enemy proximity forbid influences", "body": [ "debug_spawning_proximity_forbid ${1:<boolean>}" ] },
	"debug_spawning_random_influence": { "prefix": "debug_spawning_random_influence", "description": "[3]  toggles display of random influence contribution", "body": [ "debug_spawning_random_influence ${1:<boolean>}" ] },
	"debug_spawning_respawn_zones": { "prefix": "debug_spawning_respawn_zones", "description": "[3]  debugs respawn zone influences", "body": [ "debug_spawning_respawn_zones ${1:<boolean>}" ] },
	"debug_spawning_target": { "prefix": "debug_spawning_target", "description": "[3]  sets target player for respawn influencer debugging display", "body": [ "debug_spawning_target ${1:<string>}" ] },
	"debug_spawning_teammates": { "prefix": "debug_spawning_teammates", "description": "[3]  debugs teammate proximity bias influences", "body": [ "debug_spawning_teammates ${1:<boolean>}" ] },
	"debug_spawning_use_history": { "prefix": "debug_spawning_use_history", "description": "[3]  sets the saved respawn state for respawn influencer debugging display", "body": [ "debug_spawning_use_history ${1:<long>}" ] },
	"debug_spawning_weapon_influences": { "prefix": "debug_spawning_weapon_influences", "description": "[3]  debugs enemy weapon danger influences", "body": [ "debug_spawning_weapon_influences ${1:<boolean>}" ] },
	"debug_structure_cluster": { "prefix": "debug_structure_cluster", "description": "[3]  specify a structure and cluster to debug", "body": [ "debug_structure_cluster ${1:<long>} ${0:<long>}" ] },
	"debug_tags": { "prefix": "debug_tags", "description": "[2,3]  writes all memory being used by tag files into tag_dump.txt", "body": [ "debug_tags" ] },
	"debug_teleport_player": { "prefix": "debug_teleport_player", "description": "[1,2,3]  for testing: teleports one player to another's location", "body": [ "debug_teleport_player ${1:<short>} ${0:<short>}" ] },
	"decorator_rebuild_all": { "prefix": "decorator_rebuild_all", "description": "[2]  ", "body": [ "decorator_rebuild_all" ] },
	"decorators_split": { "prefix": "decorators_split", "description": "[3]  duplicates decorator set <index> and moves <percentage> of the decorators into it", "body": [ "decorators_split ${1:<long>} ${0:<real>}" ] },
	"designer_zone_activate": { "prefix": "designer_zone_activate", "description": "[3]  activate designer zone", "body": [ "designer_zone_activate ${1:<designer_zone>}" ] },
	"designer_zone_deactivate": { "prefix": "designer_zone_deactivate", "description": "[3]  deactivates designer zone, deletes objects that were part of that designer zone", "body": [ "designer_zone_deactivate ${1:<designer_zone>}" ] },
	"designer_zone_sync": { "prefix": "designer_zone_sync", "description": "[3]  synchronizes global objects with loaded designer zones", "body": [ "designer_zone_sync" ] },
	"determinism_debug_manager_enable_game_state_checksum": { "prefix": "determinism_debug_manager_enable_game_state_checksum", "description": "[2,3]  enable/disable determinism checkpoints", "body": [ "determinism_debug_manager_enable_game_state_checksum ${1:<boolean>}" ] },
	"determinism_debug_manager_enable_log_file_comparision_on_oos": { "prefix": "determinism_debug_manager_enable_log_file_comparision_on_oos", "description": "[2,3]  enables/disables determinism log file comparision on oos", "body": [ "determinism_debug_manager_enable_log_file_comparision_on_oos ${1:<boolean>}" ] },
	"determinism_debug_manager_enable_logging": { "prefix": "determinism_debug_manager_enable_logging", "description": "[2,3]  enable/disable determinism logging", "body": [ "determinism_debug_manager_enable_logging ${1:<boolean>}" ] },
	"determinism_debug_manager_enable_trace": { "prefix": "determinism_debug_manager_enable_trace", "description": "[2,3]  enable determinism tracing", "body": [ "determinism_debug_manager_enable_trace ${1:<boolean>}" ] },
	"determinism_debug_manager_set_consumer_sample_level": { "prefix": "determinism_debug_manager_set_consumer_sample_level", "description": "[2,3]  sets sample level for a consumer", "body": [ "determinism_debug_manager_set_consumer_sample_level ${1:<string>} ${0:<long>}" ] },
	"determinism_debug_manager_set_trace_flags": { "prefix": "determinism_debug_manager_set_trace_flags", "description": "[2,3]  set which determinism debugging traces should be turned on", "body": [ "determinism_debug_manager_set_trace_flags ${1:<long>}" ] },
	"determinism_log_compare_log_files": { "prefix": "determinism_log_compare_log_files", "description": "[2,3]  comares determinism log files", "body": [ "determinism_log_compare_log_files ${1:<string>} ${0:<string>}" ] },
	"deterministic_end_game": { "prefix": "deterministic_end_game", "description": "[3]  end game deterministically, by inserting a simulation queue event", "body": [ "deterministic_end_game" ] },
	"device_animate_overlay": { "prefix": "device_animate_overlay", "description": "[2,3]  animate the overlay over time", "body": [ "device_animate_overlay ${1:<device>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"device_animate_position": { "prefix": "device_animate_position", "description": "[2,3]  animate the position over time", "body": [ "device_animate_position ${1:<device>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<real>} ${0:<boolean>}" ] },
	"device_closes_automatically_set": { "prefix": "device_closes_automatically_set", "description": "[2,3]  TRUE makes the given device close automatically after it has opened, FALSE makes it not", "body": [ "device_closes_automatically_set ${1:<device>} ${0:<boolean>}" ] },
	"device_get_position": { "prefix": "device_get_position", "description": "[1,2,3]  <real>  gets the current position of the given device (used for devices without explicit device groups)", "body": [ "device_get_position ${1:<device>}" ] },
	"device_get_power": { "prefix": "device_get_power", "description": "[1,2,3]  <real>  gets the current power of a named device", "body": [ "device_get_power ${1:<device>}" ] },
	"device_group_change_only_once_more_set": { "prefix": "device_group_change_only_once_more_set", "description": "[1,2,3]  TRUE allows a device to change states only once", "body": [ "device_group_change_only_once_more_set ${1:<device_group>} ${0:<boolean>}" ] },
	"device_group_get": { "prefix": "device_group_get", "description": "[1,2,3]  <real>  returns the desired value of the specified device group.", "body": [ "device_group_get ${1:<device_group>}" ] },
	"device_group_set": { "prefix": "device_group_set", "description": "[1,2,3]  <boolean>  changes the desired value of the specified device group.", "body": [ "device_group_set ${1:<device_group>} ${0:<real>}" ] },
	"device_group_set_immediate": { "prefix": "device_group_set_immediate", "description": "[1,2,3]  instantaneously changes the value of the specified device group.", "body": [ "device_group_set_immediate ${1:<device_group>} ${0:<real>}" ] },
	"device_ignore_player_set": { "prefix": "device_ignore_player_set", "description": "[3]  TRUE makes the given device ignore the player (won't open for players), FALSE makes it work for the player", "body": [ "device_ignore_player_set ${1:<device>} ${0:<boolean>}" ] },
	"device_one_sided_set": { "prefix": "device_one_sided_set", "description": "[1,2,3]  TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided", "body": [ "device_one_sided_set ${1:<device>} ${0:<boolean>}" ] },
	"device_operates_automatically_set": { "prefix": "device_operates_automatically_set", "description": "[1,2,3]  TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not", "body": [ "device_operates_automatically_set ${1:<device>} ${0:<boolean>}" ] },
	"device_set_never_appears_locked": { "prefix": "device_set_never_appears_locked", "description": "[1,2,3]  changes a machine's never_appears_locked flag, but only if paul is a bastard", "body": [ "device_set_never_appears_locked ${1:<device>} ${0:<boolean>}" ] },
	"device_set_overlay_track": { "prefix": "device_set_overlay_track", "description": "[2,3]  <boolean>  set the desired overlay animation to use", "body": [ "device_set_overlay_track ${1:<device>} ${0:<string_id>}" ] },
	"device_set_position": { "prefix": "device_set_position", "description": "[1,2,3]  <boolean>  set the desired position of the given device (used for devices without explicit device groups)", "body": [ "device_set_position ${1:<device>} ${0:<real>}" ] },
	"device_set_position_immediate": { "prefix": "device_set_position_immediate", "description": "[1,2,3]  instantaneously changes the position of the given device (used for devices without explicit device groups", "body": [ "device_set_position_immediate ${1:<device>} ${0:<real>}" ] },
	"device_set_position_track": { "prefix": "device_set_position_track", "description": "[2,3]  <boolean>  set the desired position track animation to use (optional interpolation time onto track)", "body": [ "device_set_position_track ${1:<device>} ${2:<string_id>} ${0:<real>}" ] },
	"device_set_power": { "prefix": "device_set_power", "description": "[1,2,3]  immediately sets the power of a named device to the given value", "body": [ "device_set_power ${1:<device>} ${0:<real>}" ] },
	"dip_stats_dump": { "prefix": "dip_stats_dump", "description": "[3]  save DIP statistics to file", "body": [ "dip_stats_dump" ] },
	"dip_stats_enable": { "prefix": "dip_stats_enable", "description": "[3]  <on> enable DIP statistics", "body": [ "dip_stats_enable ${1:<boolean>}" ] },
	"dip_stats_sort_toggle": { "prefix": "dip_stats_sort_toggle", "description": "[3]  toggle DIP statistics sort mode (inclusive DIP, exclusive DIP)", "body": [ "dip_stats_sort_toggle" ] },
	"director_debug_camera": { "prefix": "director_debug_camera", "description": "[2,3]  enable/disable camera debugging", "body": [ "director_debug_camera ${1:<boolean>}" ] },
	"disable_render_light_suppressor": { "prefix": "disable_render_light_suppressor", "description": "[2]  disables the code that constrains the max # active lights", "body": [ "disable_render_light_suppressor" ] },
	"display_scenario_help": { "prefix": "display_scenario_help", "description": "[1]  display in-game help dialog", "body": [ "display_scenario_help ${1:<short>}" ] },
	"display_video_standard": { "prefix": "display_video_standard", "description": "[3]  displays the video standard the game is in", "body": [ "display_video_standard" ] },
	"display_zone_size_estimates": { "prefix": "display_zone_size_estimates", "description": "[3]  display zone size estimates HUD", "body": [ "display_zone_size_estimates ${1:<boolean>}" ] },
	"drop": { "prefix": "drop", "description": "[2,3]  drops the named tag e.g. objects\\vehicles\\banshee\\banshee.vehicle", "body": [ "drop ${1:<string>}" ] },
	"drop_ai": { "prefix": "drop_ai", "description": "[3]  Drop an ai with the given weapon at the current camera position", "body": [ "drop_ai ${1:<string>} ${0:<string>}" ] },
	"drop_permutation": { "prefix": "drop_permutation", "description": "[3]  drops the named tag e.g. objects\\characters\\brute\\brute.biped using the specified permutation. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).", "body": [ "drop_permutation ${1:<string>} ${0:<string>}" ] },
	"drop_safe": { "prefix": "drop_safe", "description": "[3]  drops the named tag e.g. objects\\vehicles\\banshee\\banshee.vehicle", "body": [ "drop_safe ${1:<any_tag>}" ] },
	"drop_variant": { "prefix": "drop_variant", "description": "[2,3]  drops the named tag e.g. objects\\vehicles\\banshee\\banshee.vehicle using the specified variant name", "body": [ "drop_variant ${1:<string>} ${0:<string>}" ] },
	"dump_active_resources": { "prefix": "dump_active_resources", "description": "[3]  blah", "body": [ "dump_active_resources" ] },
	"dump_active_zone_tags": { "prefix": "dump_active_zone_tags", "description": "[3]  blah", "body": [ "dump_active_zone_tags" ] },
	"dump_cinematics_script": { "prefix": "dump_cinematics_script", "description": "[3]  dump the cinematic script to cinematic_dump.txt", "body": [ "dump_cinematics_script" ] },
	"dump_cortana_script": { "prefix": "dump_cortana_script", "description": "[3]  dump the cinematic script to cinematic_dump_cortana.txt", "body": [ "dump_cortana_script" ] },
	"dump_designer_zone": { "prefix": "dump_designer_zone", "description": "[3]  dump interesting info about a designer zone", "body": [ "dump_designer_zone ${1:<designer_zone>}" ] },
	"dump_loaded_tags": { "prefix": "dump_loaded_tags", "description": "[2,3]  dump a list of open tags to <map_name>_tags.txt", "body": [ "dump_loaded_tags" ] },
	"effect_new": { "prefix": "effect_new", "description": "[1,2,3]  starts the specified effect at the specified flag.", "body": [ "effect_new ${1:<effect>} ${0:<cutscene_flag>}" ] },
	"effect_new_at_ai_point": { "prefix": "effect_new_at_ai_point", "description": "[3]  starts the specified effect at the specified ai point.", "body": [ "effect_new_at_ai_point ${1:<effect>} ${0:<point_reference>}" ] },
	"effect_new_on_ground": { "prefix": "effect_new_on_ground", "description": "[3]  starts the specified effect on the ground underneath the object's root.", "body": [ "effect_new_on_ground ${1:<effect>} ${0:<object>}" ] },
	"effect_new_on_object_marker": { "prefix": "effect_new_on_object_marker", "description": "[1,2,3]  starts the specified effect on the specified object at the specified marker.", "body": [ "effect_new_on_object_marker ${1:<effect>} ${2:<object>} ${0:<string>}" ] },
	"effect_new_random": { "prefix": "effect_new_random", "description": "[3]  starts the specified effect at one of the points in the given a point set.", "body": [ "effect_new_random ${1:<effect>} ${0:<point_reference>}" ] },
	"enable_hud_help_flash": { "prefix": "enable_hud_help_flash", "description": "[1,2]  starts/stops the help text flashing", "body": [ "enable_hud_help_flash ${1:<boolean>}" ] },
	"enable_render_light_suppressor": { "prefix": "enable_render_light_suppressor", "description": "[2]  enables the code that constrains the max # active lights", "body": [ "enable_render_light_suppressor" ] },
	"error_enable": { "prefix": "error_enable", "description": "[2]  enables/disables display for a class of errors", "body": [ "error_enable ${1:<string>} ${0:<boolean>}" ] },
	"error_geometry_hide": { "prefix": "error_geometry_hide", "description": "[3]  hides all error geometry with a name that includes the given substring", "body": [ "error_geometry_hide ${1:<string>}" ] },
	"error_geometry_hide_all": { "prefix": "error_geometry_hide_all", "description": "[3]  hides all error geometry", "body": [ "error_geometry_hide_all" ] },
	"error_geometry_list": { "prefix": "error_geometry_list", "description": "[3]  prints out a list of all error geometry types and counts", "body": [ "error_geometry_list" ] },
	"error_geometry_show": { "prefix": "error_geometry_show", "description": "[3]  highlights all error geometry with a name that includes the given substring", "body": [ "error_geometry_show ${1:<string>}" ] },
	"error_geometry_show_all": { "prefix": "error_geometry_show_all", "description": "[3]  highlights all error geometry", "body": [ "error_geometry_show_all" ] },
	"error_overflow_suppression": { "prefix": "error_overflow_suppression", "description": "[1,2]  enables or disables the suppression of error spamming", "body": [ "error_overflow_suppression ${1:<boolean>}" ] },
	"event_debugger_break_category": { "prefix": "event_debugger_break_category", "description": "[3]  sets the debugger break level for a named category of network events", "body": [ "event_debugger_break_category ${1:<string>} ${0:<event>}" ] },
	"event_display_category": { "prefix": "event_display_category", "description": "[3]  sets the display level for a named category of network events", "body": [ "event_display_category ${1:<string>} ${0:<event>}" ] },
	"event_force_display_category": { "prefix": "event_force_display_category", "description": "[3]  sets the forced display level for a named category of network events", "body": [ "event_force_display_category ${1:<string>} ${0:<event>}" ] },
	"event_global_display_category": { "prefix": "event_global_display_category", "description": "[3]  sets the global event display level", "body": [ "event_global_display_category ${1:<event>}" ] },
	"event_global_log_category": { "prefix": "event_global_log_category", "description": "[3]  sets the global evetn log level", "body": [ "event_global_log_category ${1:<event>}" ] },
	"event_global_remote_log_category": { "prefix": "event_global_remote_log_category", "description": "[3]  sets the global remote evetn log level", "body": [ "event_global_remote_log_category ${1:<event>}" ] },
	"event_halt_category": { "prefix": "event_halt_category", "description": "[3]  sets the halt (assert/crash) level for a named category of network events", "body": [ "event_halt_category ${1:<string>} ${0:<event>}" ] },
	"event_list_categories": { "prefix": "event_list_categories", "description": "[3]  lists all categories that exist under a particular category string", "body": [ "event_list_categories ${1:<string>}" ] },
	"event_log_category": { "prefix": "event_log_category", "description": "[3]  sets the log level for a named category of network events", "body": [ "event_log_category ${1:<string>} ${0:<event>}" ] },
	"event_logs_snapshot": { "prefix": "event_logs_snapshot", "description": "[3]  copy error files to the error snapshot folder", "body": [ "event_logs_snapshot" ] },
	"event_remote_log_category": { "prefix": "event_remote_log_category", "description": "[3]  sets the remote log level for a named category of network events", "body": [ "event_remote_log_category ${1:<string>} ${0:<event>}" ] },
	"events_disable_suppression": { "prefix": "events_disable_suppression", "description": "[3]  enable/disable event suppression", "body": [ "events_disable_suppression ${1:<boolean>}" ] },
	"events_enabled": { "prefix": "events_enabled", "description": "[3]  enable/disable all events", "body": [ "events_enabled ${1:<boolean>}" ] },
	"events_spam_suppression_enable": { "prefix": "events_spam_suppression_enable", "description": "[3]  enables or disables the suppression of event spamming", "body": [ "events_spam_suppression_enable ${1:<boolean>}" ] },
	"events_suppress_console_display": { "prefix": "events_suppress_console_display", "description": "[3]  disables console display for events", "body": [ "events_suppress_console_display ${1:<boolean>}" ] },
	"fade_in": { "prefix": "fade_in", "description": "[1,2,3]  does a screen fade in from a particular color", "body": [ "fade_in ${1:<real>} ${2:<real>} ${3:<real>} ${0:<short>}" ] },
	"fade_out": { "prefix": "fade_out", "description": "[1,2,3]  does a screen fade out to a particular color", "body": [ "fade_out ${1:<real>} ${2:<real>} ${3:<real>} ${0:<short>}" ] },
	"find": { "prefix": "find", "description": "[3]  prints any hs command matching the string passed in", "body": [ "find ${1:<string>}" ] },
	"flag_new": { "prefix": "flag_new", "description": "[2,3]  <name> <description>", "body": [ "flag_new ${1:<string>} ${0:<string>}" ] },
	"flag_new_at_look": { "prefix": "flag_new_at_look", "description": "[2,3]  <name> <description>", "body": [ "flag_new_at_look ${1:<string>} ${0:<string>}" ] },
	"flags_clear": { "prefix": "flags_clear", "description": "[2,3]  erases all comment flags when not in editor (sapien)", "body": [ "flags_clear" ] },
	"flags_default_comment": { "prefix": "flags_default_comment", "description": "[2,3]  <default comment flag description>", "body": [ "flags_default_comment ${1:<string>}" ] },
	"flags_default_name": { "prefix": "flags_default_name", "description": "[2,3]  <default comment flag name>", "body": [ "flags_default_name ${1:<string>}" ] },
	"flags_export": { "prefix": "flags_export", "description": "[2]  dump comment flags to a .txt file", "body": [ "flags_export" ] },
	"flags_export_filtered": { "prefix": "flags_export_filtered", "description": "[2]  <substring filter>", "body": [ "flags_export_filtered ${1:<string>}" ] },
	"flags_export_named": { "prefix": "flags_export_named", "description": "[2]  <file name>", "body": [ "flags_export_named ${1:<string>}" ] },
	"flags_export_named_filtered": { "prefix": "flags_export_named_filtered", "description": "[2]  <filter string> <file name>", "body": [ "flags_export_named_filtered ${1:<string>} ${0:<string>}" ] },
	"flags_save": { "prefix": "flags_save", "description": "[2]  dump comment flags to vrml file", "body": [ "flags_save" ] },
	"flags_save_filtered": { "prefix": "flags_save_filtered", "description": "[2]  <substring filter>", "body": [ "flags_save_filtered ${1:<string>}" ] },
	"flags_save_named": { "prefix": "flags_save_named", "description": "[2]  <file name>", "body": [ "flags_save_named ${1:<string>}" ] },
	"flags_save_named_filtered": { "prefix": "flags_save_named_filtered", "description": "[2]  <filter string> <file name>", "body": [ "flags_save_named_filtered ${1:<string>} ${0:<string>}" ] },
	"flags_set_filter": { "prefix": "flags_set_filter", "description": "[2,3]  <flag name filter>", "body": [ "flags_set_filter ${1:<string>}" ] },
	"floating_point_exceptions_enable": { "prefix": "floating_point_exceptions_enable", "description": "[3]  enables/disables floating point exceptions", "body": [ "floating_point_exceptions_enable ${1:<boolean>}" ] },
	"flock_create": { "prefix": "flock_create", "description": "[2,3]  <boolean>  Create the given flock", "body": [ "flock_create ${1:<string_id>}" ] },
	"flock_definition_set": { "prefix": "flock_definition_set", "description": "[3]  <boolean>  Set the definition of the given flock to the given tag", "body": [ "flock_definition_set ${1:<string_id>} ${0:<any_tag>}" ] },
	"flock_delete": { "prefix": "flock_delete", "description": "[2,3]  <boolean>  Delete the given flock", "body": [ "flock_delete ${1:<string_id>}" ] },
	"flock_start": { "prefix": "flock_start", "description": "[2,3]  <boolean>  The flock starts producing boids", "body": [ "flock_start ${1:<string_id>}" ] },
	"flock_stop": { "prefix": "flock_stop", "description": "[2,3]  <boolean>  The flock stops producing boids", "body": [ "flock_stop ${1:<string_id>}" ] },
	"flock_unperch": { "prefix": "flock_unperch", "description": "[3]  Cause the given flock to unperch (if it is perched)", "body": [ "flock_unperch ${1:<string_id>}" ] },
	"flush_ddm": { "prefix": "flush_ddm", "description": "[2]  flush ddm file", "body": [ "flush_ddm" ] },
	"fog_mode_control": { "prefix": "fog_mode_control", "description": "[2]  ", "body": [ "fog_mode_control ${1:<boolean>} ${2:<boolean>} ${3:<boolean>} ${0:<boolean>}" ] },
	"fog_override_atmospheric_fog": { "prefix": "fog_override_atmospheric_fog", "description": "[2]  ", "body": [ "fog_override_atmospheric_fog ${1:<real>} ${2:<string>} ${3:<real>} ${0:<real>}" ] },
	"fog_override_atmospheric_fog_off": { "prefix": "fog_override_atmospheric_fog_off", "description": "[2]  ", "body": [ "fog_override_atmospheric_fog_off" ] },
	"fog_override_atmospheric_planar_blend": { "prefix": "fog_override_atmospheric_planar_blend", "description": "[2]  ", "body": [ "fog_override_atmospheric_planar_blend ${1:<real>}" ] },
	"fog_override_atmospheric_planar_blend_off": { "prefix": "fog_override_atmospheric_planar_blend_off", "description": "[2]  ", "body": [ "fog_override_atmospheric_planar_blend_off" ] },
	"fog_override_atmospheric_secondary_blend": { "prefix": "fog_override_atmospheric_secondary_blend", "description": "[2]  ", "body": [ "fog_override_atmospheric_secondary_blend ${1:<real>}" ] },
	"fog_override_atmospheric_secondary_blend_off": { "prefix": "fog_override_atmospheric_secondary_blend_off", "description": "[2]  ", "body": [ "fog_override_atmospheric_secondary_blend_off" ] },
	"fog_override_mode": { "prefix": "fog_override_mode", "description": "[2]  ", "body": [ "fog_override_mode ${1:<long>}" ] },
	"fog_override_mode_off": { "prefix": "fog_override_mode_off", "description": "[2]  ", "body": [ "fog_override_mode_off" ] },
	"fog_override_off": { "prefix": "fog_override_off", "description": "[2]  ", "body": [ "fog_override_off" ] },
	"fog_override_planar_fog": { "prefix": "fog_override_planar_fog", "description": "[2]  ", "body": [ "fog_override_planar_fog ${1:<real>} ${2:<string>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"fog_override_planar_fog_off": { "prefix": "fog_override_planar_fog_off", "description": "[2]  ", "body": [ "fog_override_planar_fog_off" ] },
	"fog_override_planar_fog_plane": { "prefix": "fog_override_planar_fog_plane", "description": "[2]  ", "body": [ "fog_override_planar_fog_plane ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"fog_override_planar_fog_plane_off": { "prefix": "fog_override_planar_fog_plane_off", "description": "[2]  ", "body": [ "fog_override_planar_fog_plane_off" ] },
	"fog_override_planar_max_atmospheric_depth": { "prefix": "fog_override_planar_max_atmospheric_depth", "description": "[2]  ", "body": [ "fog_override_planar_max_atmospheric_depth ${1:<real>}" ] },
	"fog_override_planar_max_atmospheric_depth_off": { "prefix": "fog_override_planar_max_atmospheric_depth_off", "description": "[2]  ", "body": [ "fog_override_planar_max_atmospheric_depth_off" ] },
	"fog_override_planar_planar_eye_density": { "prefix": "fog_override_planar_planar_eye_density", "description": "[2]  ", "body": [ "fog_override_planar_planar_eye_density ${1:<real>}" ] },
	"fog_override_planar_planar_eye_density_off": { "prefix": "fog_override_planar_planar_eye_density_off", "description": "[2]  ", "body": [ "fog_override_planar_planar_eye_density_off" ] },
	"fog_override_secondary_fog": { "prefix": "fog_override_secondary_fog", "description": "[2]  ", "body": [ "fog_override_secondary_fog ${1:<real>} ${2:<string>} ${3:<real>} ${0:<real>}" ] },
	"fog_override_secondary_fog_off": { "prefix": "fog_override_secondary_fog_off", "description": "[2]  ", "body": [ "fog_override_secondary_fog_off" ] },
	"fog_override_sky_fog": { "prefix": "fog_override_sky_fog", "description": "[2]  ", "body": [ "fog_override_sky_fog ${1:<real>} ${0:<string>}" ] },
	"fog_override_sky_fog_off": { "prefix": "fog_override_sky_fog_off", "description": "[2]  ", "body": [ "fog_override_sky_fog_off" ] },
	"fog_report": { "prefix": "fog_report", "description": "[2]  ", "body": [ "fog_report" ] },
	"fog_report_summary": { "prefix": "fog_report_summary", "description": "[2]  ", "body": [ "fog_report_summary" ] },
	"fog_report_verbose": { "prefix": "fog_report_verbose", "description": "[2]  ", "body": [ "fog_report_verbose" ] },
	"font_cache_bitmap_save": { "prefix": "font_cache_bitmap_save", "description": "[3]  save font cache bitmap to targa file", "body": [ "font_cache_bitmap_save ${1:<string>}" ] },
	"font_cache_flush": { "prefix": "font_cache_flush", "description": "[3]  NULL", "body": [ "font_cache_flush" ] },
	"font_set_emergency": { "prefix": "font_set_emergency", "description": "[3]  sets the font system into emergency mode", "body": [ "font_set_emergency" ] },
	"force_debugger_always_present": { "prefix": "force_debugger_always_present", "description": "[3]  forces is_debugger_present() to return true", "body": [ "force_debugger_always_present ${1:<boolean>}" ] },
	"force_debugger_not_present": { "prefix": "force_debugger_not_present", "description": "[3]  forces is_debugger_present() to return false", "body": [ "force_debugger_not_present ${1:<boolean>}" ] },
	"force_manifest_redownload": { "prefix": "force_manifest_redownload", "description": "[3]  redownload the online storage manifest", "body": [ "force_manifest_redownload" ] },
	"fxaa_enable": { "prefix": "fxaa_enable", "description": "[3]  turn on/off fxaa", "body": [ "fxaa_enable ${1:<boolean>}" ] },
	"game_achievements_display_achievement_names": { "prefix": "game_achievements_display_achievement_names", "description": "[3]  displays the achievement list", "body": [ "game_achievements_display_achievement_names" ] },
	"game_active_primary_skulls": { "prefix": "game_active_primary_skulls", "description": "[3]  debug map launching: sets the active primary skulls of the next map.", "body": [ "game_active_primary_skulls ${1:<long>}" ] },
	"game_active_secondary_skulls": { "prefix": "game_active_secondary_skulls", "description": "[3]  debug map launching: sets the active primary skulls of the next map.", "body": [ "game_active_secondary_skulls ${1:<long>}" ] },
	"game_all_quiet": { "prefix": "game_all_quiet", "description": "[1,2,3]  <boolean>  returns FALSE if there are bad guys around, projectiles in the air, etc.", "body": [ "game_all_quiet" ] },
	"game_award_level_complete_achievements": { "prefix": "game_award_level_complete_achievements", "description": "[3]  causes the player to successfully finish the current level and move to the next", "body": [ "game_award_level_complete_achievements" ] },
	"game_can_use_flashlights": { "prefix": "game_can_use_flashlights", "description": "[2,3]  allows or disallows the user of player flashlights", "body": [ "game_can_use_flashlights ${1:<boolean>}" ] },
	"game_coop_player_count": { "prefix": "game_coop_player_count", "description": "[3]  <long>  returns the number of coop players active in game", "body": [ "game_coop_player_count" ] },
	"game_coop_players": { "prefix": "game_coop_players", "description": "[2,3]  debug map launching: sets the number of coop players for the next map.", "body": [ "game_coop_players ${1:<long>}" ] },
	"game_difficulty": { "prefix": "game_difficulty", "description": "[2,3]  debug map launching: sets the difficulty of the next map.", "body": [ "game_difficulty ${1:<game_difficulty>}" ] },
	"game_difficulty_get": { "prefix": "game_difficulty_get", "description": "[1,2,3]  <game_difficulty>  returns the current difficulty setting, but lies to you and will never return easy, instead returning normal", "body": [ "game_difficulty_get" ] },
	"game_difficulty_get_real": { "prefix": "game_difficulty_get_real", "description": "[1,2,3]  <game_difficulty>  returns the actual current difficulty setting without lying", "body": [ "game_difficulty_get_real" ] },
	"game_difficulty_set": { "prefix": "game_difficulty_set", "description": "[1]  changes the difficulty setting for the next map to be loaded", "body": [ "game_difficulty_set ${1:<game_difficulty>}" ] },
	"game_engine_event_test_assault": { "prefix": "game_engine_event_test_assault", "description": "[3]  test game engine assault event", "body": [ "game_engine_event_test_assault ${1:<long>}" ] },
	"game_engine_event_test_ctf": { "prefix": "game_engine_event_test_ctf", "description": "[3]  test game engine ctf event", "body": [ "game_engine_event_test_ctf ${1:<long>}" ] },
	"game_engine_event_test_flavor": { "prefix": "game_engine_event_test_flavor", "description": "[3]  test game engine flavor event", "body": [ "game_engine_event_test_flavor ${1:<long>}" ] },
	"game_engine_event_test_general": { "prefix": "game_engine_event_test_general", "description": "[3]  test game engine general event", "body": [ "game_engine_event_test_general ${1:<long>}" ] },
	"game_engine_event_test_infection": { "prefix": "game_engine_event_test_infection", "description": "[3]  test game engine infection event", "body": [ "game_engine_event_test_infection ${1:<long>}" ] },
	"game_engine_event_test_juggernaut": { "prefix": "game_engine_event_test_juggernaut", "description": "[3]  test game engine juggernaut event", "body": [ "game_engine_event_test_juggernaut ${1:<long>}" ] },
	"game_engine_event_test_king": { "prefix": "game_engine_event_test_king", "description": "[3]  test game engine king event", "body": [ "game_engine_event_test_king ${1:<long>}" ] },
	"game_engine_event_test_oddball": { "prefix": "game_engine_event_test_oddball", "description": "[3]  test game engine oddball event", "body": [ "game_engine_event_test_oddball ${1:<long>}" ] },
	"game_engine_event_test_slayer": { "prefix": "game_engine_event_test_slayer", "description": "[3]  test game engine slayer event", "body": [ "game_engine_event_test_slayer ${1:<long>}" ] },
	"game_engine_event_test_territories": { "prefix": "game_engine_event_test_territories", "description": "[3]  test game engine territories event", "body": [ "game_engine_event_test_territories ${1:<long>}" ] },
	"game_engine_event_test_vip": { "prefix": "game_engine_event_test_vip", "description": "[3]  test game engine vip event", "body": [ "game_engine_event_test_vip ${1:<long>}" ] },
	"game_engine_objects": { "prefix": "game_engine_objects", "description": "[2,3]  <object_list>  returns a list of the special game engine objects", "body": [ "game_engine_objects" ] },
	"game_export_variant_settings": { "prefix": "game_export_variant_settings", "description": "[3]  export the current game engine variant settings to the specified text file", "body": [ "game_export_variant_settings ${1:<string>}" ] },
	"game_grant_achievement_to_controller_by_string": { "prefix": "game_grant_achievement_to_controller_by_string", "description": "[3]  unlocks an achievement for a given controller", "body": [ "game_grant_achievement_to_controller_by_string ${1:<controller>} ${0:<string>}" ] },
	"game_grant_all_achievements_to_controller": { "prefix": "game_grant_all_achievements_to_controller", "description": "[3]  unlocks all achievements for a given controller", "body": [ "game_grant_all_achievements_to_controller ${1:<controller>}" ] },
	"game_initial_bsp": { "prefix": "game_initial_bsp", "description": "[2]  debug map launching: sets the initial bsp for the next map", "body": [ "game_initial_bsp ${1:<long>}" ] },
	"game_initial_zone_set": { "prefix": "game_initial_zone_set", "description": "[3]  debug map launching: sets the initial bsp for the next map.", "body": [ "game_initial_zone_set ${1:<long>}" ] },
	"game_insertion_point_get": { "prefix": "game_insertion_point_get", "description": "[3]  <short>  returns the number of the insertion point the map was started at", "body": [ "game_insertion_point_get" ] },
	"game_insertion_point_lock": { "prefix": "game_insertion_point_lock", "description": "[3]  unlocks the given insertion point for the current map for all players", "body": [ "game_insertion_point_lock ${1:<short>}" ] },
	"game_insertion_point_set": { "prefix": "game_insertion_point_set", "description": "[3]  retroactively sets the insertion point that we started at.", "body": [ "game_insertion_point_set ${1:<short>}" ] },
	"game_insertion_point_unlock": { "prefix": "game_insertion_point_unlock", "description": "[3]  unlocks the given insertion point for the current map for all players", "body": [ "game_insertion_point_unlock ${1:<short>}" ] },
	"game_is_authoritative": { "prefix": "game_is_authoritative", "description": "[1]  <boolean>  ", "body": [ "game_is_authoritative" ] },
	"game_is_cooperative": { "prefix": "game_is_cooperative", "description": "[1,2,3]  <boolean>  returns TRUE if the game is cooperative", "body": [ "game_is_cooperative" ] },
	"game_is_playtest": { "prefix": "game_is_playtest", "description": "[2,3]  <boolean>  returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt", "body": [ "game_is_playtest" ] },
	"game_lost": { "prefix": "game_lost", "description": "[1,2,3]  marks the game as lost or not lost", "body": [ "game_lost" ] },
	"game_multiplayer": { "prefix": "game_multiplayer", "description": "[2,3]  debug map launching: sets the multiplayer engine for the next map.", "body": [ "game_multiplayer ${1:<string>}" ] },
	"game_rate": { "prefix": "game_rate", "description": "[2,3]  changes game update rate (DANGER: only use if you know what you're doing!)", "body": [ "game_rate ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"game_revert": { "prefix": "game_revert", "description": "[1,2,3]  causes the player to revert to their previous saved game (for testing and cinematic skipping only please!)", "body": [ "game_revert" ] },
	"game_reverted": { "prefix": "game_reverted", "description": "[1,2,3]  <boolean>  don't use this for anything, you black-hearted bastards.", "body": [ "game_reverted" ] },
	"game_safe_to_respawn": { "prefix": "game_safe_to_respawn", "description": "[3]  disables/enables player respawning for campaign", "body": [ "game_safe_to_respawn ${1:<boolean>}" ] },
	"game_safe_to_save": { "prefix": "game_safe_to_save", "description": "[1,2,3]  <boolean>  returns FALSE if it would be a bad idea to save the player's game right now", "body": [ "game_safe_to_save" ] },
	"game_safe_to_speak": { "prefix": "game_safe_to_speak", "description": "[1,2,3]  <boolean>  returns FALSE if it would be a bad idea to play mission dialog right now", "body": [ "game_safe_to_speak" ] },
	"game_save": { "prefix": "game_save", "description": "[1,2,3]  checks to see if it is safe to save game, then saves (gives up after 8 seconds)", "body": [ "game_save" ] },
	"game_save_and_quit": { "prefix": "game_save_and_quit", "description": "[2,3]  save & quit to the main menu", "body": [ "game_save_and_quit" ] },
	"game_save_cancel": { "prefix": "game_save_cancel", "description": "[1,2,3]  cancels any pending game_save, timeout or not", "body": [ "game_save_cancel" ] },
	"game_save_cinematic_skip": { "prefix": "game_save_cinematic_skip", "description": "[2,3]  don't use this, except in one place.", "body": [ "game_save_cinematic_skip" ] },
	"game_save_immediate": { "prefix": "game_save_immediate", "description": "[2,3]  disregards player's current situation and saves (BE VERY CAREFUL!)", "body": [ "game_save_immediate" ] },
	"game_save_no_timeout": { "prefix": "game_save_no_timeout", "description": "[1,2,3]  checks to see if it is safe to save game, then saves (this version never gives up)", "body": [ "game_save_no_timeout" ] },
	"game_save_totally_unsafe": { "prefix": "game_save_totally_unsafe", "description": "[1]  disregards player's current situation", "body": [ "game_save_totally_unsafe" ] },
	"game_save_unsafe": { "prefix": "game_save_unsafe", "description": "[2,3]  saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)", "body": [ "game_save_unsafe" ] },
	"game_saving": { "prefix": "game_saving", "description": "[1,2,3]  <boolean>  checks to see if the game is trying to save the map.", "body": [ "game_saving" ] },
	"game_skip_ticks": { "prefix": "game_skip_ticks", "description": "[1]  skips <short> amount of game ticks. ONLY USE IN CUTSCENES!!!", "body": [ "game_skip_ticks ${1:<short>}" ] },
	"game_speed": { "prefix": "game_speed", "description": "[1]  changes the game speed", "body": [ "game_speed ${1:<real>}" ] },
	"game_splitscreen": { "prefix": "game_splitscreen", "description": "[2,3]  debug map launching: sets the number of multiplayer splitscreen players for the next map.", "body": [ "game_splitscreen ${1:<long>}" ] },
	"game_start": { "prefix": "game_start", "description": "[2,3]  debug map launching: starts a game on the specified map.", "body": [ "game_start ${1:<string>}" ] },
	"game_start_when_joined": { "prefix": "game_start_when_joined", "description": "[3]  nicely starts a game when the specified number of users are in the lobby", "body": [ "game_start_when_joined ${1:<long>}" ] },
	"game_start_when_ready": { "prefix": "game_start_when_ready", "description": "[3]  nicely starts the current game once the pregame lobby is stable", "body": [ "game_start_when_ready" ] },
	"game_tick_get": { "prefix": "game_tick_get", "description": "[2,3]  <long>  returns current game tick", "body": [ "game_tick_get" ] },
	"game_tick_length": { "prefix": "game_tick_length", "description": "[2]  <real>  returns how many seconds are in a current game tick", "body": [ "game_tick_length" ] },
	"game_tick_rate": { "prefix": "game_tick_rate", "description": "[2,3]  debug map launching: sets the tick rate for the next map.", "body": [ "game_tick_rate ${1:<long>}" ] },
	"game_tick_rate_scalar": { "prefix": "game_tick_rate_scalar", "description": "[2]  <long>  returns current game ticks per second rate relative to k_authored_tick_rate (30Hz)", "body": [ "game_tick_rate_scalar" ] },
	"game_time": { "prefix": "game_time", "description": "[1]  <long>  gets ticks elapsed since the start of the game", "body": [ "game_time" ] },
	"game_variant": { "prefix": "game_variant", "description": "[1]  set the game engine", "body": [ "game_variant ${1:<string>}" ] },
	"game_won": { "prefix": "game_won", "description": "[1,2,3]  causes the player to successfully finish the current level and move to the next", "body": [ "game_won" ] },
	"garbage_collect_multiplayer": { "prefix": "garbage_collect_multiplayer", "description": "[2,3]  runs multiplayer garbage collection", "body": [ "garbage_collect_multiplayer" ] },
	"garbage_collect_now": { "prefix": "garbage_collect_now", "description": "[1,2,3]  causes all garbage objects except those visible to a player to be collected immediately", "body": [ "garbage_collect_now" ] },
	"garbage_collect_unsafe": { "prefix": "garbage_collect_unsafe", "description": "[2,3]  forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)", "body": [ "garbage_collect_unsafe" ] },
	"generate_pathfinding": { "prefix": "generate_pathfinding", "description": "[2,3]  <boolean>  Generate pathfinding info for all structure bsps in the current scenario", "body": [ "generate_pathfinding" ] },
	"generate_rsa_2048_key_pair": { "prefix": "generate_rsa_2048_key_pair", "description": "[3]  generates an RSA key pair", "body": [ "generate_rsa_2048_key_pair" ] },
	"geometry_cache_flush": { "prefix": "geometry_cache_flush", "description": "[3]  we fear change", "body": [ "geometry_cache_flush" ] },
	"get_camera_third_person": { "prefix": "get_camera_third_person", "description": "[3]  <boolean>  <user_index> gets user's camera perspective", "body": [ "get_camera_third_person ${1:<long>}" ] },
	"get_executing_running_thread": { "prefix": "get_executing_running_thread", "description": "[3]  <long>  Retrieves the current executing thread index", "body": [ "get_executing_running_thread" ] },
	"get_performance_throttle": { "prefix": "get_performance_throttle", "description": "[3]  <real>  gets the value of a performance throttle for a given number of players", "body": [ "get_performance_throttle ${1:<string>} ${0:<long>}" ] },
	"get_pitch_rate": { "prefix": "get_pitch_rate", "description": "[1]  <real>  gets the yaw rate for the given player number", "body": [ "get_pitch_rate ${1:<short>}" ] },
	"get_yaw_rate": { "prefix": "get_yaw_rate", "description": "[1]  <real>  gets the yaw rate for the given player number", "body": [ "get_yaw_rate ${1:<short>}" ] },
	"give_medal": { "prefix": "give_medal", "description": "[3]  awards a medal (0..58) to pad 1 due to pad 2 (if they're there)", "body": [ "give_medal ${1:<short>}" ] },
	"global_preferences_clear": { "prefix": "global_preferences_clear", "description": "[3]  clears all game preference information", "body": [ "global_preferences_clear" ] },
	"gui_debug_bitmap_animation": { "prefix": "gui_debug_bitmap_animation", "description": "[3]  Toggle display of given bitmap widget's animation state", "body": [ "gui_debug_bitmap_animation ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_bitmap_bounds": { "prefix": "gui_debug_bitmap_bounds", "description": "[3]  Toggle display of given bitmap widget's bounds", "body": [ "gui_debug_bitmap_bounds ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_bitmap_name": { "prefix": "gui_debug_bitmap_name", "description": "[3]  Toggle display of given bitmap widget's name", "body": [ "gui_debug_bitmap_name ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_bitmap_rotation": { "prefix": "gui_debug_bitmap_rotation", "description": "[3]  Toggle display of given bitmap widget's rotation", "body": [ "gui_debug_bitmap_rotation ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_group_animation": { "prefix": "gui_debug_group_animation", "description": "[3]  Toggle display of given group's animations, optionally recursive", "body": [ "gui_debug_group_animation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_group_bounds": { "prefix": "gui_debug_group_bounds", "description": "[3]  Toggle display of given group's bounds, optionally recursive", "body": [ "gui_debug_group_bounds ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_group_name": { "prefix": "gui_debug_group_name", "description": "[3]  Toggle display of given group's name, optionally recursive", "body": [ "gui_debug_group_name ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_group_rotation": { "prefix": "gui_debug_group_rotation", "description": "[3]  Toggle display of given group's rotation, optionally recursive", "body": [ "gui_debug_group_rotation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_animation": { "prefix": "gui_debug_list_animation", "description": "[3]  Toggle display of given list's animations, optionally recursive", "body": [ "gui_debug_list_animation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_bounds": { "prefix": "gui_debug_list_bounds", "description": "[3]  Toggle display of given list's bounds, optionally recursive", "body": [ "gui_debug_list_bounds ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_item_animation": { "prefix": "gui_debug_list_item_animation", "description": "[3]  Toggle display of given list item's animation, optionally recursive", "body": [ "gui_debug_list_item_animation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_item_bounds": { "prefix": "gui_debug_list_item_bounds", "description": "[3]  Toggle display of given list item's bounds, optionally recursive", "body": [ "gui_debug_list_item_bounds ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_item_name": { "prefix": "gui_debug_list_item_name", "description": "[3]  Toggle display of given list item's name, optionally recursive", "body": [ "gui_debug_list_item_name ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_item_rotation": { "prefix": "gui_debug_list_item_rotation", "description": "[3]  Toggle display of given list item's rotation, optionally recursive", "body": [ "gui_debug_list_item_rotation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_name": { "prefix": "gui_debug_list_name", "description": "[3]  Toggle display of given list's name, optionally recursive", "body": [ "gui_debug_list_name ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_list_rotation": { "prefix": "gui_debug_list_rotation", "description": "[3]  Toggle display of given list's rotation, optionally recursive", "body": [ "gui_debug_list_rotation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_music_state": { "prefix": "gui_debug_music_state", "description": "[3]  Toggle display of UI music state", "body": [ "gui_debug_music_state ${1:<boolean>}" ] },
	"gui_debug_screen_animation": { "prefix": "gui_debug_screen_animation", "description": "[3]  Toggle display of given screen animations, optionally recursive", "body": [ "gui_debug_screen_animation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_screen_bounds": { "prefix": "gui_debug_screen_bounds", "description": "[3]  Toggle display of given screen's bounds, optionally recursive", "body": [ "gui_debug_screen_bounds ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_screen_name": { "prefix": "gui_debug_screen_name", "description": "[3]  Toggle display of given screen's name, optionally recursive", "body": [ "gui_debug_screen_name ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_screen_rotation": { "prefix": "gui_debug_screen_rotation", "description": "[3]  Toggle display of given screen's rotation, optionally recursive", "body": [ "gui_debug_screen_rotation ${1:<string_id>} ${2:<boolean>} ${0:<boolean>}" ] },
	"gui_debug_text_animation": { "prefix": "gui_debug_text_animation", "description": "[3]  Toggle display of given text widget's animation state", "body": [ "gui_debug_text_animation ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_text_bounds": { "prefix": "gui_debug_text_bounds", "description": "[3]  Toggle display of given text widget's bounds", "body": [ "gui_debug_text_bounds ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_text_name": { "prefix": "gui_debug_text_name", "description": "[3]  Toggle display of given text widget's name", "body": [ "gui_debug_text_name ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_debug_text_rotation": { "prefix": "gui_debug_text_rotation", "description": "[3]  Toggle display of given text widget's rotation", "body": [ "gui_debug_text_rotation ${1:<string_id>} ${0:<boolean>}" ] },
	"gui_dialog_show": { "prefix": "gui_dialog_show", "description": "[3]  <dialog name>", "body": [ "gui_dialog_show ${1:<string_id>}" ] },
	"gui_enter_lobby": { "prefix": "gui_enter_lobby", "description": "[3]  <lobby index> index 0-4", "body": [ "gui_enter_lobby ${1:<long>}" ] },
	"gui_error_clear": { "prefix": "gui_error_clear", "description": "[3]  <error_name> <controller_index> clears an error condition in the ui", "body": [ "gui_error_clear ${1:<string_id>} ${0:<long>}" ] },
	"gui_error_post": { "prefix": "gui_error_post", "description": "[3]  <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui", "body": [ "gui_error_post ${1:<string_id>} ${2:<long>} ${0:<boolean>}" ] },
	"gui_error_post_toast": { "prefix": "gui_error_post_toast", "description": "[3]  <error_code> <controller_index> <must_be_cleared> sets an error condition in the ui", "body": [ "gui_error_post_toast ${1:<string_id>} ${2:<long>} ${0:<boolean>}" ] },
	"gui_error_resolve": { "prefix": "gui_error_resolve", "description": "[3]  <error_name> <controller_index> resolves an error condition in the ui", "body": [ "gui_error_resolve ${1:<string_id>} ${0:<long>}" ] },
	"gui_load_screen": { "prefix": "gui_load_screen", "description": "[3]  load the named screen", "body": [ "gui_load_screen ${1:<string_id>}" ] },
	"gui_print_active_screen_strings": { "prefix": "gui_print_active_screen_strings", "description": "[3]  display strings tag file name for current topmost screen", "body": [ "gui_print_active_screen_strings" ] },
	"gui_print_active_screens": { "prefix": "gui_print_active_screens", "description": "[3]  display list of active halox ui screens", "body": [ "gui_print_active_screens" ] },
	"gui_reset": { "prefix": "gui_reset", "description": "[3]  cleans out the halox ui screens and errors", "body": [ "gui_reset" ] },
	"gui_spartan_milestone_show": { "prefix": "gui_spartan_milestone_show", "description": "[3]  show dialog for milestone upgrade (1..3)", "body": [ "gui_spartan_milestone_show ${1:<short>}" ] },
	"gui_spartan_rank_show": { "prefix": "gui_spartan_rank_show", "description": "[3]  show toast for rank upgrade (1..36)", "body": [ "gui_spartan_rank_show ${1:<short>}" ] },
	"gui_spartan_reset_profile": { "prefix": "gui_spartan_reset_profile", "description": "[3]  reset profile stored milestone and hopper rankings", "body": [ "gui_spartan_reset_profile ${1:<controller>}" ] },
	"gui_spartan_set_achievement_day_of_month": { "prefix": "gui_spartan_set_achievement_day_of_month", "description": "[3]  overrides the system time's day of the month for 7 on 7 EXP achievement", "body": [ "gui_spartan_set_achievement_day_of_month ${1:<short>}" ] },
	"gui_start": { "prefix": "gui_start", "description": "[3]  tells the window location manager to resume", "body": [ "gui_start" ] },
	"gui_stop": { "prefix": "gui_stop", "description": "[3]  tells the window location manager to stop bringing up screens on its own", "body": [ "gui_stop" ] },
	"h2a2_effect_new": { "prefix": "h2a2_effect_new", "description": "[2]  starts the specified effect on the specified object at the specified marker", "body": [ "h2a2_effect_new ${1:<effect>} ${2:<long>} ${0:<string_id>}" ] },
	"havok_debug_start": { "prefix": "havok_debug_start", "description": "[2,3]  start up the havok visual debugger", "body": [ "havok_debug_start" ] },
	"havok_dump_world": { "prefix": "havok_dump_world", "description": "[2,3]  dump the state of the havok world, with our without a movie", "body": [ "havok_dump_world ${1:<string>} ${0:<boolean>}" ] },
	"havok_dump_world_close_movie": { "prefix": "havok_dump_world_close_movie", "description": "[2,3]  end the capture of a havok dump movie", "body": [ "havok_dump_world_close_movie" ] },
	"havok_profile_end": { "prefix": "havok_profile_end", "description": "[2]  start profiling havok", "body": [ "havok_profile_end" ] },
	"havok_profile_range": { "prefix": "havok_profile_range", "description": "[3]  captures timers and a movie of a specific tick range", "body": [ "havok_profile_range ${1:<long>} ${0:<long>}" ] },
	"havok_profile_start": { "prefix": "havok_profile_start", "description": "[2,3]  start profiling havok", "body": [ "havok_profile_start" ] },
	"havok_profile_stop": { "prefix": "havok_profile_stop", "description": "[3]  stop profiling havok, and save the results", "body": [ "havok_profile_stop" ] },
	"havok_reset_allocated_state": { "prefix": "havok_reset_allocated_state", "description": "[2,3]  strips down and builds back up all allocated havok memory", "body": [ "havok_reset_allocated_state" ] },
	"help": { "prefix": "help", "description": "[1,2,3]  prints a description of the named function.", "body": [ "help ${1:<string>}" ] },
	"hopper_verify_force_failures_disable": { "prefix": "hopper_verify_force_failures_disable", "description": "[2]  disable forcing hopper failure", "body": [ "hopper_verify_force_failures_disable" ] },
	"hopper_verify_force_failures_enable": { "prefix": "hopper_verify_force_failures_enable", "description": "[2]  enable forcing hopper failure", "body": [ "hopper_verify_force_failures_enable" ] },
	"hopper_verify_ignore_failures_disable": { "prefix": "hopper_verify_ignore_failures_disable", "description": "[2]  disable ignoring hopper failure", "body": [ "hopper_verify_ignore_failures_disable" ] },
	"hopper_verify_ignore_failures_enable": { "prefix": "hopper_verify_ignore_failures_enable", "description": "[2]  enable ignoring hopper failure", "body": [ "hopper_verify_ignore_failures_enable" ] },
	"hud_activate_team_nav_point_flag": { "prefix": "hud_activate_team_nav_point_flag", "description": "[3]  activates a nav point type <string> attached to a team anchored to a flag with a vertical offset <real>. If the player is not local to the machine, this will fail", "body": [ "hud_activate_team_nav_point_flag ${1:<team>} ${2:<cutscene_flag>} ${0:<real>}" ] },
	"hud_blink_health": { "prefix": "hud_blink_health", "description": "[1]  starts/stops manual blinking of the health panel", "body": [ "hud_blink_health ${1:<boolean>}" ] },
	"hud_blink_motion_sensor": { "prefix": "hud_blink_motion_sensor", "description": "[1]  starts/stops manual blinking of the motion sensor panel", "body": [ "hud_blink_motion_sensor ${1:<boolean>}" ] },
	"hud_blink_shield": { "prefix": "hud_blink_shield", "description": "[1]  starts/stops manual blinking of the shield panel", "body": [ "hud_blink_shield ${1:<boolean>}" ] },
	"hud_cinematic_fade": { "prefix": "hud_cinematic_fade", "description": "[2]  parameter 1 is how, parameter 2 is when", "body": [ "hud_cinematic_fade ${1:<real>} ${0:<real>}" ] },
	"hud_clear_messages": { "prefix": "hud_clear_messages", "description": "[1,2]  clears all non-state messages on the hud", "body": [ "hud_clear_messages" ] },
	"hud_deactivate_team_nav_point_flag": { "prefix": "hud_deactivate_team_nav_point_flag", "description": "[3]  deactivates a nav point type attached to a team anchored to a flag", "body": [ "hud_deactivate_team_nav_point_flag ${1:<team>} ${0:<cutscene_flag>}" ] },
	"hud_enable_training": { "prefix": "hud_enable_training", "description": "[2,3]  true turns training on, false turns it off.", "body": [ "hud_enable_training ${1:<boolean>}" ] },
	"hud_get_timer_ticks": { "prefix": "hud_get_timer_ticks", "description": "[1,2]  <short>  returns the ticks left on the hud timer", "body": [ "hud_get_timer_ticks" ] },
	"hud_help_flash_restart": { "prefix": "hud_help_flash_restart", "description": "[1,2]  resets the timer for the help text flashing", "body": [ "hud_help_flash_restart" ] },
	"hud_set_help_text": { "prefix": "hud_set_help_text", "description": "[1,2]  displays <message> as the help text", "body": [ "hud_set_help_text ${1:<hud_message>}" ] },
	"hud_set_objective_text": { "prefix": "hud_set_objective_text", "description": "[1,2]  sets <message> as the current objective", "body": [ "hud_set_objective_text ${1:<hud_message>}" ] },
	"hud_set_timer_position": { "prefix": "hud_set_timer_position", "description": "[1,2]  sets the timer upper left position to (x, y)=>(<short>, <short>)", "body": [ "hud_set_timer_position ${1:<short>} ${2:<short>} ${0:<hud_corner>}" ] },
	"hud_set_timer_time": { "prefix": "hud_set_timer_time", "description": "[1,2]  sets the time for the timer to <short> minutes and <short> seconds, and starts and displays timer", "body": [ "hud_set_timer_time ${1:<short>} ${0:<short>}" ] },
	"hud_set_timer_warning_time": { "prefix": "hud_set_timer_warning_time", "description": "[1,2]  sets the warning time for the timer to <short> minutes and <short> seconds", "body": [ "hud_set_timer_warning_time ${1:<short>} ${0:<short>}" ] },
	"hud_set_training_text": { "prefix": "hud_set_training_text", "description": "[2,3]  sets the string id fo the scripted training text", "body": [ "hud_set_training_text ${1:<string_id>}" ] },
	"hud_show_crosshair": { "prefix": "hud_show_crosshair", "description": "[1]  hides/shows the weapon crosshair", "body": [ "hud_show_crosshair ${1:<boolean>}" ] },
	"hud_show_health": { "prefix": "hud_show_health", "description": "[1]  hides/shows the health panel", "body": [ "hud_show_health ${1:<boolean>}" ] },
	"hud_show_motion_sensor": { "prefix": "hud_show_motion_sensor", "description": "[1]  hides/shows the motion sensor panel", "body": [ "hud_show_motion_sensor ${1:<boolean>}" ] },
	"hud_show_shield": { "prefix": "hud_show_shield", "description": "[1]  hides/shows the shield panel", "body": [ "hud_show_shield ${1:<boolean>}" ] },
	"hud_show_training_text": { "prefix": "hud_show_training_text", "description": "[2,3]  true turns on scripted training text", "body": [ "hud_show_training_text ${1:<boolean>}" ] },
	"ice_cream_flavor_available": { "prefix": "ice_cream_flavor_available", "description": "[2]  <boolean>  ", "body": [ "ice_cream_flavor_available ${1:<long>}" ] },
	"ice_cream_flavor_stock": { "prefix": "ice_cream_flavor_stock", "description": "[2]  ", "body": [ "ice_cream_flavor_stock ${1:<long>}" ] },
	"if": { "prefix": "if", "description": "[1,2]  <passthrough>  returns one of two values based on the value of a condition.", "body": [ "if ${1:<boolean>} ${2:<then>} ${0:[<else>]}" ] },
	"input_disable_claw_button_combos": { "prefix": "input_disable_claw_button_combos", "description": "[3]  disabe the Claw button combos (for monkey testing)", "body": [ "input_disable_claw_button_combos ${1:<boolean>}" ] },
	"input_suppress_rumble": { "prefix": "input_suppress_rumble", "description": "[3]  disable the friggin' rumble", "body": [ "input_suppress_rumble ${1:<boolean>}" ] },
	"input_suppress_vibration": { "prefix": "input_suppress_vibration", "description": "[2]  disable the friggin' vibration", "body": [ "input_suppress_vibration ${1:<boolean>}" ] },
	"inspect": { "prefix": "inspect", "description": "[1,2,3]  prints the value of an expression to the screen for debugging purposes.", "body": [ "inspect ${1:<expression>}" ] },
	"interpolator_evaluate_at": { "prefix": "interpolator_evaluate_at", "description": "[2,3]  <real>  <name> <value in> <use function ON/OFF>", "body": [ "interpolator_evaluate_at ${1:<string_id>} ${2:<real>} ${0:<boolean>}" ] },
	"interpolator_evaluate_at_time": { "prefix": "interpolator_evaluate_at_time", "description": "[2,3]  <real>  <name> <time in> <use function ON/OFF>", "body": [ "interpolator_evaluate_at_time ${1:<string_id>} ${2:<real>} ${0:<boolean>}" ] },
	"interpolator_evaluate_at_time_delta": { "prefix": "interpolator_evaluate_at_time_delta", "description": "[2,3]  <real>  <name> <time delta> <use function ON/OFF>", "body": [ "interpolator_evaluate_at_time_delta ${1:<string_id>} ${2:<real>} ${0:<boolean>}" ] },
	"interpolator_evaluate_at_time_fraction": { "prefix": "interpolator_evaluate_at_time_fraction", "description": "[2,3]  <real>  <name> <time fraction in> <use function ON/OFF>", "body": [ "interpolator_evaluate_at_time_fraction ${1:<string_id>} ${2:<real>} ${0:<boolean>}" ] },
	"interpolator_flip": { "prefix": "interpolator_flip", "description": "[2,3]  ", "body": [ "interpolator_flip" ] },
	"interpolator_get_current_phase": { "prefix": "interpolator_get_current_phase", "description": "[2,3]  <real>  <name>", "body": [ "interpolator_get_current_phase ${1:<string_id>}" ] },
	"interpolator_get_current_time_fraction": { "prefix": "interpolator_get_current_time_fraction", "description": "[2,3]  <real>  <name>", "body": [ "interpolator_get_current_time_fraction ${1:<string_id>}" ] },
	"interpolator_get_current_value": { "prefix": "interpolator_get_current_value", "description": "[2,3]  <real>  <name> <use function ON/OFF>", "body": [ "interpolator_get_current_value ${1:<string_id>} ${0:<boolean>}" ] },
	"interpolator_get_final_time": { "prefix": "interpolator_get_final_time", "description": "[2,3]  <real>  <name>", "body": [ "interpolator_get_final_time ${1:<string_id>}" ] },
	"interpolator_get_final_value": { "prefix": "interpolator_get_final_value", "description": "[2,3]  <real>  <name> <use function ON/OFF>", "body": [ "interpolator_get_final_value ${1:<string_id>} ${0:<boolean>}" ] },
	"interpolator_get_start_time": { "prefix": "interpolator_get_start_time", "description": "[2,3]  <real>  <name>", "body": [ "interpolator_get_start_time ${1:<string_id>}" ] },
	"interpolator_get_start_value": { "prefix": "interpolator_get_start_value", "description": "[2,3]  <real>  <name> <use function ON/OFF>", "body": [ "interpolator_get_start_value ${1:<string_id>} ${0:<boolean>}" ] },
	"interpolator_is_active": { "prefix": "interpolator_is_active", "description": "[2,3]  <boolean>  <name>", "body": [ "interpolator_is_active ${1:<string_id>}" ] },
	"interpolator_is_finished": { "prefix": "interpolator_is_finished", "description": "[2,3]  <boolean>  <name>", "body": [ "interpolator_is_finished ${1:<string_id>}" ] },
	"interpolator_restart": { "prefix": "interpolator_restart", "description": "[2,3]  <long>  <name>", "body": [ "interpolator_restart ${1:<string_id>}" ] },
	"interpolator_restart_all": { "prefix": "interpolator_restart_all", "description": "[2,3]  ", "body": [ "interpolator_restart_all" ] },
	"interpolator_set_current_value": { "prefix": "interpolator_set_current_value", "description": "[2,3]  <long>  <name> <current value>", "body": [ "interpolator_set_current_value ${1:<string_id>} ${0:<real>}" ] },
	"interpolator_start": { "prefix": "interpolator_start", "description": "[2,3]  <long>  <name> <final value> <time>", "body": [ "interpolator_start ${1:<string_id>} ${2:<real>} ${0:<real>}" ] },
	"interpolator_start_smooth": { "prefix": "interpolator_start_smooth", "description": "[2,3]  <long>  <name> <final value> <time>", "body": [ "interpolator_start_smooth ${1:<string_id>} ${2:<real>} ${0:<real>}" ] },
	"interpolator_stop": { "prefix": "interpolator_stop", "description": "[2,3]  <long>  <name>", "body": [ "interpolator_stop ${1:<string_id>}" ] },
	"interpolator_stop_all": { "prefix": "interpolator_stop_all", "description": "[2,3]  ", "body": [ "interpolator_stop_all" ] },
	"is_ace_build": { "prefix": "is_ace_build", "description": "[3]  <boolean>  returns if this is an ACE enabled build", "body": [ "is_ace_build" ] },
	"kill_active_scripts": { "prefix": "kill_active_scripts", "description": "[3]  Terminates all currently running threads.", "body": [ "kill_active_scripts" ] },
	"kill_thread": { "prefix": "kill_thread", "description": "[3]  Kill the specified thread", "body": [ "kill_thread ${1:<long>}" ] },
	"kill_volume_disable": { "prefix": "kill_volume_disable", "description": "[2,3]  disables a kill volume", "body": [ "kill_volume_disable ${1:<trigger_volume>}" ] },
	"kill_volume_enable": { "prefix": "kill_volume_enable", "description": "[2,3]  enables a kill volume", "body": [ "kill_volume_enable ${1:<trigger_volume>}" ] },
	"king_set_hill": { "prefix": "king_set_hill", "description": "[2]  sets which index the active hill should be", "body": [ "king_set_hill ${1:<long>}" ] },
	"language_set": { "prefix": "language_set", "description": "[3]  change the language for localization", "body": [ "language_set ${1:<string>}" ] },
	"lightmaps_expose": { "prefix": "lightmaps_expose", "description": "[2]  re-exposes the lightmap palettes", "body": [ "lightmaps_expose ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"lightshafts_enable": { "prefix": "lightshafts_enable", "description": "[3]  turn on/off lightshafts", "body": [ "lightshafts_enable ${1:<boolean>}" ] },
	"list_count": { "prefix": "list_count", "description": "[1,2,3]  <short>  returns the number of objects in a list", "body": [ "list_count ${1:<object_list>}" ] },
	"list_count_not_dead": { "prefix": "list_count_not_dead", "description": "[1,2,3]  <short>  returns the number of objects in a list that aren't dead", "body": [ "list_count_not_dead ${1:<object_list>}" ] },
	"list_get": { "prefix": "list_get", "description": "[1,2,3]  <object>  returns an item in an object list.", "body": [ "list_get ${1:<object_list>} ${0:<short>}" ] },
	"loading_screen_fade_to_white": { "prefix": "loading_screen_fade_to_white", "description": "[2]  sets the next loading screen to just fade to white", "body": [ "loading_screen_fade_to_white" ] },
	"local_players": { "prefix": "local_players", "description": "[1]  <object_list>  returns a list of the living player units on the local machine", "body": [ "local_players" ] },
	"log_print": { "prefix": "log_print", "description": "[1,3]  prints a string to the hs log file.", "body": [ "log_print ${1:<string>}" ] },
	"loop_clear": { "prefix": "loop_clear", "description": "[3]  runs the expression at most once per tick", "body": [ "loop_clear" ] },
	"loop_it": { "prefix": "loop_it", "description": "[3]  runs the expression at most once per tick", "body": [ "loop_it ${1:<string>}" ] },
	"magic_melee_attack": { "prefix": "magic_melee_attack", "description": "[1,2,3]  causes player's unit to start a melee attack", "body": [ "magic_melee_attack" ] },
	"magic_seat_name": { "prefix": "magic_seat_name", "description": "[1]  all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')", "body": [ "magic_seat_name ${1:<string>}" ] },
	"main_halt": { "prefix": "main_halt", "description": "[2,3]  goes to a halted pregame state", "body": [ "main_halt" ] },
	"main_menu": { "prefix": "main_menu", "description": "[2,3]  goes back to the main menu", "body": [ "main_menu" ] },
	"map_info": { "prefix": "map_info", "description": "[2,3]  prints the map, zone set, active bsps, and current bsp", "body": [ "map_info" ] },
	"map_name": { "prefix": "map_name", "description": "[1,2,3]  the same as game_start: launches a game for debugging purposes", "body": [ "map_name ${1:<string>}" ] },
	"map_reset": { "prefix": "map_reset", "description": "[1,2,3]  starts the map from the beginning.", "body": [ "map_reset" ] },
	"map_reset_random": { "prefix": "map_reset_random", "description": "[3]  starts the map from the beginning with a new random seed.", "body": [ "map_reset_random" ] },
	"max": { "prefix": "max", "description": "[1,2,3]  <real>  returns the maximum of all specified expressions.", "body": [ "max ${1:<number(s)>}" ] },
	"mcc_mission_segment": { "prefix": "mcc_mission_segment", "description": "[1]  <boolean>  ", "body": [ "mcc_mission_segment ${1:<string>}" ] },
	"min": { "prefix": "min", "description": "[1,2,3]  <real>  returns the minimum of all specified expressions.", "body": [ "min ${1:<number(s)>}" ] },
	"motion_blur": { "prefix": "motion_blur", "description": "[3]  enable/disable motion blur", "body": [ "motion_blur ${1:<boolean>}" ] },
	"mover_set_program": { "prefix": "mover_set_program", "description": "[3]  <boolean>  Set the motor program of the given mover object", "body": [ "mover_set_program ${1:<object>} ${0:<short>}" ] },
	"mp_active_player_count_by_team": { "prefix": "mp_active_player_count_by_team", "description": "[3]  <long>  given a team index, returns an object list containing all living player objects belonging to that team", "body": [ "mp_active_player_count_by_team ${1:<mp_team>}" ] },
	"mp_ai_allegiance": { "prefix": "mp_ai_allegiance", "description": "[3]  causes an allegiance to be formed between an AI squad team and a multiplayer team", "body": [ "mp_ai_allegiance ${1:<team>} ${0:<mp_team>}" ] },
	"mp_ai_kill": { "prefix": "mp_ai_kill", "description": "[3]  instantly kills the specified non-authoritative encounter and/or squad.", "body": [ "mp_ai_kill ${1:<ai>}" ] },
	"mp_ai_kill_silent": { "prefix": "mp_ai_kill_silent", "description": "[3]  instantly and silently (no animation or sound played) kills the specified non-authoritative encounter and/or squad.", "body": [ "mp_ai_kill_silent ${1:<ai>}" ] },
	"mp_ai_place": { "prefix": "mp_ai_place", "description": "[3]  places the specified squad on the map as a non-authoritative object", "body": [ "mp_ai_place ${1:<ai>}" ] },
	"mp_allegiance": { "prefix": "mp_allegiance", "description": "[3]  create an allegiance between two multiplayer teams", "body": [ "mp_allegiance ${1:<mp_team>} ${0:<mp_team>}" ] },
	"mp_debug_goal_object_boundary_geometry": { "prefix": "mp_debug_goal_object_boundary_geometry", "description": "[3]  toggle debug geometry for multiplayer goal objects", "body": [ "mp_debug_goal_object_boundary_geometry ${1:<boolean>}" ] },
	"mp_dump_candy_monitor_state": { "prefix": "mp_dump_candy_monitor_state", "description": "[3]  dumps the current candy monitor state to a file on disk", "body": [ "mp_dump_candy_monitor_state" ] },
	"mp_game_won": { "prefix": "mp_game_won", "description": "[3]  given a team index, declares the game a victory for that team and a loss for all others", "body": [ "mp_game_won ${1:<mp_team>}" ] },
	"mp_object_belongs_to_team": { "prefix": "mp_object_belongs_to_team", "description": "[3]  causes specified object to belong to the given team, so that only that team can pick it up", "body": [ "mp_object_belongs_to_team ${1:<object>} ${0:<mp_team>}" ] },
	"mp_object_create": { "prefix": "mp_object_create", "description": "[3]  creates a non-authoratative object from the scenario.", "body": [ "mp_object_create ${1:<object_name>}" ] },
	"mp_object_create_anew": { "prefix": "mp_object_create_anew", "description": "[3]  creates a non-authoratative object, destroying it first if it already exists.", "body": [ "mp_object_create_anew ${1:<object_name>}" ] },
	"mp_object_create_clone": { "prefix": "mp_object_create_clone", "description": "[3]  creates a non-authoratative object, potentially resulting in multiple objects if it already exists.", "body": [ "mp_object_create_clone ${1:<object_name>}" ] },
	"mp_object_destroy": { "prefix": "mp_object_destroy", "description": "[3]  destroys a non-authoratative object.", "body": [ "mp_object_destroy ${1:<object>}" ] },
	"mp_players_by_team": { "prefix": "mp_players_by_team", "description": "[3]  <object_list>  given a team index, returns an object list containing all living player objects belonging to that team", "body": [ "mp_players_by_team ${1:<mp_team>}" ] },
	"mp_respawn_override_timers": { "prefix": "mp_respawn_override_timers", "description": "[3]  causes all players on the specified team waiting to respawn (due to timer) to respawn immediately", "body": [ "mp_respawn_override_timers ${1:<mp_team>}" ] },
	"mp_round_started": { "prefix": "mp_round_started", "description": "[3]  <boolean>  used to determine if the mp game is in the active-round phase or not", "body": [ "mp_round_started" ] },
	"mp_scripts_reset": { "prefix": "mp_scripts_reset", "description": "[3]  on the host in a distributed game, resets the scripts (but not internal hs globals)", "body": [ "mp_scripts_reset" ] },
	"mp_wake_script": { "prefix": "mp_wake_script", "description": "[3]  on the host in a distributed game, sends a message to clients to wake a dormant script", "body": [ "mp_wake_script ${1:<string>}" ] },
	"mp_weapon_belongs_to_team": { "prefix": "mp_weapon_belongs_to_team", "description": "[3]  causes specified weapon to belong to the given team, so that only that team can pick it up", "body": [ "mp_weapon_belongs_to_team ${1:<object>} ${0:<mp_team>}" ] },
	"multiplayer_map_name": { "prefix": "multiplayer_map_name", "description": "[1]  changes the name of the multiplayer map", "body": [ "multiplayer_map_name ${1:<string>}" ] },
	"net_banhammer_dump_repeated_play_list": { "prefix": "net_banhammer_dump_repeated_play_list", "description": "[3]  display repeated play lists", "body": [ "net_banhammer_dump_repeated_play_list" ] },
	"net_banhammer_dump_strings": { "prefix": "net_banhammer_dump_strings", "description": "[3]  display cheat/ban strings", "body": [ "net_banhammer_dump_strings" ] },
	"net_banhammer_force_download": { "prefix": "net_banhammer_force_download", "description": "[3]  force banhammer file download", "body": [ "net_banhammer_force_download ${1:<boolean>} ${0:<boolean>}" ] },
	"net_banhammer_set_controller_ban_flags": { "prefix": "net_banhammer_set_controller_ban_flags", "description": "[3]  sets ban flags", "body": [ "net_banhammer_set_controller_ban_flags ${1:<controller>} ${2:<string>} ${3:<long>} ${0:<boolean>}" ] },
	"net_banhammer_set_controller_cheat_flags": { "prefix": "net_banhammer_set_controller_cheat_flags", "description": "[3]  sets cheat flags", "body": [ "net_banhammer_set_controller_cheat_flags ${1:<controller>} ${2:<string>} ${0:<boolean>}" ] },
	"net_build_game_variant": { "prefix": "net_build_game_variant", "description": "[3]  writes the current game variant to a file", "body": [ "net_build_game_variant ${1:<string>}" ] },
	"net_build_map_variant": { "prefix": "net_build_map_variant", "description": "[3]  writes the current map variant to a file", "body": [ "net_build_map_variant ${1:<string>}" ] },
	"net_build_network_config": { "prefix": "net_build_network_config", "description": "[3]  writes a new network configuration file", "body": [ "net_build_network_config" ] },
	"net_enable_join_friend_loop": { "prefix": "net_enable_join_friend_loop", "description": "[3]  randomly join a friend every <param> seconds, 0 to reset", "body": [ "net_enable_join_friend_loop ${1:<long>}" ] },
	"net_event_display_category": { "prefix": "net_event_display_category", "description": "[2]  sets the display level for a named category of network events", "body": [ "net_event_display_category ${1:<string>} ${0:<network_event>}" ] },
	"net_event_list_categories": { "prefix": "net_event_list_categories", "description": "[2]  lists all categories that exist under a particular category string", "body": [ "net_event_list_categories ${1:<string>}" ] },
	"net_event_log_category": { "prefix": "net_event_log_category", "description": "[2]  sets the log level for a named category of network events", "body": [ "net_event_log_category ${1:<string>} ${0:<network_event>}" ] },
	"net_game_set_player_standing": { "prefix": "net_game_set_player_standing", "description": "[3]  set's a player's standing by gamertag", "body": [ "net_game_set_player_standing ${1:<string>} ${0:<long>}" ] },
	"net_get_game_id": { "prefix": "net_get_game_id", "description": "[3]  prints the id of the game to the console", "body": [ "net_get_game_id" ] },
	"net_join_friend": { "prefix": "net_join_friend", "description": "[3]  join a friend's squad session, 'none' to cancel a previous join", "body": [ "net_join_friend ${1:<string>}" ] },
	"net_join_sessionid": { "prefix": "net_join_sessionid", "description": "[3]  join a squad session by sessionid, 'none' to cancel a previous join", "body": [ "net_join_sessionid ${1:<string>}" ] },
	"net_join_squad_to_friend": { "prefix": "net_join_squad_to_friend", "description": "[3]  join our squad to a friend's squad session, 'none' to cancel a previous join", "body": [ "net_join_squad_to_friend ${1:<string>}" ] },
	"net_join_squad_to_sessionid": { "prefix": "net_join_squad_to_sessionid", "description": "[3]  join a squad session by sessionid, 'none' to cancel a previous join", "body": [ "net_join_squad_to_sessionid ${1:<string>}" ] },
	"net_leaderboard_clear": { "prefix": "net_leaderboard_clear", "description": "[2]  <hopper> <user index> clears the stats for the given hopper and user", "body": [ "net_leaderboard_clear ${1:<long>} ${0:<long>}" ] },
	"net_leaderboard_clear_global_arbitrated": { "prefix": "net_leaderboard_clear_global_arbitrated", "description": "[3]  <user index> clears the global arbitrated stats for the user", "body": [ "net_leaderboard_clear_global_arbitrated ${1:<long>}" ] },
	"net_leaderboard_clear_global_arbitrated_all_users": { "prefix": "net_leaderboard_clear_global_arbitrated_all_users", "description": "[3]  clears the global arbitrated stats for all user", "body": [ "net_leaderboard_clear_global_arbitrated_all_users ${1:<string>}" ] },
	"net_leaderboard_clear_global_unarbitrated": { "prefix": "net_leaderboard_clear_global_unarbitrated", "description": "[3]  <user index> clears the global unarbitrated stats for the user", "body": [ "net_leaderboard_clear_global_unarbitrated ${1:<long>}" ] },
	"net_leaderboard_clear_global_unarbitrated_all_users": { "prefix": "net_leaderboard_clear_global_unarbitrated_all_users", "description": "[3]  clears the global unarbitrated stats for all user", "body": [ "net_leaderboard_clear_global_unarbitrated_all_users ${1:<string>}" ] },
	"net_leaderboard_clear_hopper": { "prefix": "net_leaderboard_clear_hopper", "description": "[3]  <user index> clears the hopper stats for the user", "body": [ "net_leaderboard_clear_hopper ${1:<long>}" ] },
	"net_leaderboard_clear_hopper_all_users": { "prefix": "net_leaderboard_clear_hopper_all_users", "description": "[3]  clears the hopper stats for the all user", "body": [ "net_leaderboard_clear_hopper_all_users ${1:<string>}" ] },
	"net_leaderboard_refresh": { "prefix": "net_leaderboard_refresh", "description": "[3]  <user index> refreshes stats for everybody in the session", "body": [ "net_leaderboard_refresh" ] },
	"net_leaderboard_set": { "prefix": "net_leaderboard_set", "description": "[2]  <hopper index> <user index> <stat index> <value> sets the stat for the given leaderboard and user", "body": [ "net_leaderboard_set ${1:<long>} ${2:<long>} ${3:<long>} ${0:<long>}" ] },
	"net_leaderboard_set_user_game_stats": { "prefix": "net_leaderboard_set_user_game_stats", "description": "[3]  slams more user stats", "body": [ "net_leaderboard_set_user_game_stats ${1:<long>} ${2:<long>} ${3:<long>} ${4:<long>} ${0:<long>}" ] },
	"net_leaderboard_set_user_stats": { "prefix": "net_leaderboard_set_user_stats", "description": "[3]  slams user leaderboard values locally", "body": [ "net_leaderboard_set_user_stats ${1:<long>} ${2:<real>} ${3:<real>} ${4:<long>} ${5:<long>} ${0:<long>}" ] },
	"net_load_and_use_game_variant": { "prefix": "net_load_and_use_game_variant", "description": "[3]  loads the contents of a packed game variant file and submits to networking for use in the current game", "body": [ "net_load_and_use_game_variant ${1:<string>}" ] },
	"net_quality_clear": { "prefix": "net_quality_clear", "description": "[3]  clear all network quality statistics", "body": [ "net_quality_clear" ] },
	"net_quality_dump": { "prefix": "net_quality_dump", "description": "[3]  dump all network quality statistics", "body": [ "net_quality_dump" ] },
	"net_quality_set_connection_badness_history": { "prefix": "net_quality_set_connection_badness_history", "description": "[3]  set connection history, true/false, # of bits to set", "body": [ "net_quality_set_connection_badness_history ${1:<boolean>} ${0:<short>}" ] },
	"net_quality_set_estimated_bandwidth": { "prefix": "net_quality_set_estimated_bandwidth", "description": "[3]  set upstream bandwidth history, <is reliable> <bandwidth in kbps>", "body": [ "net_quality_set_estimated_bandwidth ${1:<boolean>} ${0:<long>}" ] },
	"net_quality_set_group_client_badness_history": { "prefix": "net_quality_set_group_client_badness_history", "description": "[3]  set client badness history, true/false, # of bits to set", "body": [ "net_quality_set_group_client_badness_history ${1:<boolean>} ${0:<short>}" ] },
	"net_quality_set_group_host_badness_history": { "prefix": "net_quality_set_group_host_badness_history", "description": "[3]  set host badness history, true/false, # of bits to set", "body": [ "net_quality_set_group_host_badness_history ${1:<boolean>} ${0:<short>}" ] },
	"net_quality_set_squad_client_badness_history": { "prefix": "net_quality_set_squad_client_badness_history", "description": "[3]  set client badness history, true/false, # of bits to set", "body": [ "net_quality_set_squad_client_badness_history ${1:<boolean>} ${0:<short>}" ] },
	"net_quality_set_squad_host_badness_history": { "prefix": "net_quality_set_squad_host_badness_history", "description": "[3]  set host badness history, true/false, # of bits to set", "body": [ "net_quality_set_squad_host_badness_history ${1:<boolean>} ${0:<short>}" ] },
	"net_set_machine_name": { "prefix": "net_set_machine_name", "description": "[2,3]  sets the nickname of your xbox", "body": [ "net_set_machine_name ${1:<string>}" ] },
	"net_set_maximum_player_count": { "prefix": "net_set_maximum_player_count", "description": "[3]  sets the maximum player count for this squad", "body": [ "net_set_maximum_player_count ${1:<long>}" ] },
	"net_sim_dropspike_now": { "prefix": "net_sim_dropspike_now", "description": "[2,3]  network simulation: starts a packet loss spike immediately", "body": [ "net_sim_dropspike_now" ] },
	"net_sim_reset": { "prefix": "net_sim_reset", "description": "[2,3]  network simulation: resets the simulation state", "body": [ "net_sim_reset" ] },
	"net_sim_spike_now": { "prefix": "net_sim_spike_now", "description": "[2,3]  network simulation: starts a latency spike immediately", "body": [ "net_sim_spike_now" ] },
	"net_status_filter": { "prefix": "net_status_filter", "description": "[2,3]  filters the set of network status to display", "body": [ "net_status_filter ${1:<string>}" ] },
	"net_test_campaign_difficulty": { "prefix": "net_test_campaign_difficulty", "description": "[2,3]  network test: sets the difficulty of the campaign game to play", "body": [ "net_test_campaign_difficulty ${1:<short>}" ] },
	"net_test_channel_delete": { "prefix": "net_test_channel_delete", "description": "[2,3]  network test: deletes all channels", "body": [ "net_test_channel_delete" ] },
	"net_test_channel_loopback": { "prefix": "net_test_channel_loopback", "description": "[2]  network test: creates loopback channels", "body": [ "net_test_channel_loopback" ] },
	"net_test_clear_group_session_parameter": { "prefix": "net_test_clear_group_session_parameter", "description": "[3]  clears a group session parameter", "body": [ "net_test_clear_group_session_parameter ${1:<long>}" ] },
	"net_test_clear_squad_session_parameter": { "prefix": "net_test_clear_squad_session_parameter", "description": "[3]  clears a squad session parameter", "body": [ "net_test_clear_squad_session_parameter ${1:<long>}" ] },
	"net_test_delegate_host": { "prefix": "net_test_delegate_host", "description": "[2,3]  network test: delegate host to the specified player", "body": [ "net_test_delegate_host ${1:<long>}" ] },
	"net_test_delegate_leader": { "prefix": "net_test_delegate_leader", "description": "[2,3]  network test: delegate leadership to the specified player", "body": [ "net_test_delegate_leader ${1:<long>}" ] },
	"net_test_disconnect_group": { "prefix": "net_test_disconnect_group", "description": "[3]  disconnects the group session", "body": [ "net_test_disconnect_group" ] },
	"net_test_disconnect_squad": { "prefix": "net_test_disconnect_squad", "description": "[3]  disconnects the squad session", "body": [ "net_test_disconnect_squad" ] },
	"net_test_fatal_error": { "prefix": "net_test_fatal_error", "description": "[2,3]  creates a fatal simulation error", "body": [ "net_test_fatal_error" ] },
	"net_test_leave_squad": { "prefix": "net_test_leave_squad", "description": "[2]  network test: leave current squad", "body": [ "net_test_leave_squad" ] },
	"net_test_life_cycle_display_states": { "prefix": "net_test_life_cycle_display_states", "description": "[3]  display the life cycle states", "body": [ "net_test_life_cycle_display_states" ] },
	"net_test_life_cycle_pause": { "prefix": "net_test_life_cycle_pause", "description": "[3]  pauses the life cycle in the specified state", "body": [ "net_test_life_cycle_pause ${1:<string>} ${0:<boolean>}" ] },
	"net_test_map_name": { "prefix": "net_test_map_name", "description": "[2,3]  network test: sets the name of the scenario to play", "body": [ "net_test_map_name ${1:<string>}" ] },
	"net_test_matchmaking_hopper_game_list": { "prefix": "net_test_matchmaking_hopper_game_list", "description": "[3]  prints games for the current hopper", "body": [ "net_test_matchmaking_hopper_game_list" ] },
	"net_test_matchmaking_hopper_list": { "prefix": "net_test_matchmaking_hopper_list", "description": "[2,3]  prints the hopper list", "body": [ "net_test_matchmaking_hopper_list" ] },
	"net_test_matchmaking_hopper_print": { "prefix": "net_test_matchmaking_hopper_print", "description": "[2]  network test: prints out the maps, games and frequencies for a hopper", "body": [ "net_test_matchmaking_hopper_print ${1:<long>}" ] },
	"net_test_matchmaking_hopper_set_game": { "prefix": "net_test_matchmaking_hopper_set_game", "description": "[2,3]  sets the game vairant for the current hopper", "body": [ "net_test_matchmaking_hopper_set_game ${1:<long>} ${0:<long>}" ] },
	"net_test_ping": { "prefix": "net_test_ping", "description": "[2,3]  network test: sends a ping", "body": [ "net_test_ping" ] },
	"net_test_player_color": { "prefix": "net_test_player_color", "description": "[2,3]  network test: temporarily sets the color for all local players", "body": [ "net_test_player_color ${1:<long>}" ] },
	"net_test_reset_objects": { "prefix": "net_test_reset_objects", "description": "[2,3]  network test: resets all objects on the map", "body": [ "net_test_reset_objects" ] },
	"net_test_variant": { "prefix": "net_test_variant", "description": "[3]  network test: sets the game variant to play", "body": [ "net_test_variant ${1:<string>}" ] },
	"net_use_hopper_directory": { "prefix": "net_use_hopper_directory", "description": "[3]  set which hopper directory to use", "body": [ "net_use_hopper_directory ${1:<string>}" ] },
	"net_verify_game_variant": { "prefix": "net_verify_game_variant", "description": "[3]  verifies the contents of a packed game variant file", "body": [ "net_verify_game_variant ${1:<string>}" ] },
	"net_verify_map_variant": { "prefix": "net_verify_map_variant", "description": "[3]  verifies the contents of a packed map variant file", "body": [ "net_verify_map_variant ${1:<string>}" ] },
	"netdebug_prefer_internet": { "prefix": "netdebug_prefer_internet", "description": "[2,3]  hints to the netdebug code that that we're on the internet", "body": [ "netdebug_prefer_internet ${1:<boolean>}" ] },
	"network_storage_set_storage_subdirectory": { "prefix": "network_storage_set_storage_subdirectory", "description": "[3]  <subdirectory> The default is the build number or 'untracked'", "body": [ "network_storage_set_storage_subdirectory ${1:<string>}" ] },
	"network_storage_set_storage_user": { "prefix": "network_storage_set_storage_user", "description": "[3]  <user> Use the network file stored on untracked\\<user>.", "body": [ "network_storage_set_storage_user ${1:<string>}" ] },
	"noguchis_mystery_tour": { "prefix": "noguchis_mystery_tour", "description": "[3]  set the additional music directory to dump into the cache file", "body": [ "noguchis_mystery_tour ${1:<string>}" ] },
	"not": { "prefix": "not", "description": "[1,2,3]  <boolean>  returns the opposite of the expression.", "body": [ "not ${1:<boolean>}" ] },
	"numeric_countdown_timer_get": { "prefix": "numeric_countdown_timer_get", "description": "[1]  <short>  <digit_index>", "body": [ "numeric_countdown_timer_get ${1:<short>}" ] },
	"numeric_countdown_timer_set": { "prefix": "numeric_countdown_timer_set", "description": "[1]  <milliseconds>, <auto_start>", "body": [ "numeric_countdown_timer_set ${1:<long>} ${0:<boolean>}" ] },
	"object_at_marker": { "prefix": "object_at_marker", "description": "[2,3]  <object>  returns the object attached to the marker of the given parent object", "body": [ "object_at_marker ${1:<object>} ${0:<string_id>}" ] },
	"object_beautify": { "prefix": "object_beautify", "description": "[1]  makes an object pretty for the remainder of the levels' cutscenes", "body": [ "object_beautify ${1:<object>} ${0:<boolean>}" ] },
	"object_buckling_magnitude_get": { "prefix": "object_buckling_magnitude_get", "description": "[3]  <real>  returns the amoount [0-1] that a scarab is buckling", "body": [ "object_buckling_magnitude_get ${1:<object>}" ] },
	"object_can_take_damage": { "prefix": "object_can_take_damage", "description": "[1,2,3]  allows an object to take damage again", "body": [ "object_can_take_damage ${1:<object_list>}" ] },
	"object_cannot_die": { "prefix": "object_cannot_die", "description": "[2,3]  Set whether the object can die from damage or not (as opposed to by scripting)", "body": [ "object_cannot_die ${1:<object>} ${0:<boolean>}" ] },
	"object_cannot_take_damage": { "prefix": "object_cannot_take_damage", "description": "[1,2,3]  prevents an object from taking damage", "body": [ "object_cannot_take_damage ${1:<object_list>}" ] },
	"object_cinematic_collision": { "prefix": "object_cinematic_collision", "description": "[2,3]  makes an object not collide with other cinematic collision objects.", "body": [ "object_cinematic_collision ${1:<object>} ${0:<boolean>}" ] },
	"object_cinematic_lod": { "prefix": "object_cinematic_lod", "description": "[2,3]  makes an object use the highest lod for the remainder of the levels' cutscenes.", "body": [ "object_cinematic_lod ${1:<object>} ${0:<boolean>}" ] },
	"object_cinematic_visibility": { "prefix": "object_cinematic_visibility", "description": "[2,3]  makes an object bypass visibility and always render during cinematics.", "body": [ "object_cinematic_visibility ${1:<object>} ${0:<boolean>}" ] },
	"object_clear_all_function_variables": { "prefix": "object_clear_all_function_variables", "description": "[2,3]  clears all funciton variables for sin-o-matic use", "body": [ "object_clear_all_function_variables ${1:<object>}" ] },
	"object_clear_function_variable": { "prefix": "object_clear_function_variable", "description": "[2,3]  clears one funciton variables for sin-o-matic use", "body": [ "object_clear_function_variable ${1:<object>} ${0:<string_id>}" ] },
	"object_copy_player_appearance": { "prefix": "object_copy_player_appearance", "description": "[2,3]  copy appearance into object from player n (starts counting from 0)", "body": [ "object_copy_player_appearance ${1:<object>} ${0:<long>}" ] },
	"object_create": { "prefix": "object_create", "description": "[1,2,3]  creates an object from the scenario.", "body": [ "object_create ${1:<object_name>}" ] },
	"object_create_anew": { "prefix": "object_create_anew", "description": "[1,2,3]  creates an object, destroying it first if it already exists.", "body": [ "object_create_anew ${1:<object_name>}" ] },
	"object_create_anew_containing": { "prefix": "object_create_anew_containing", "description": "[1,2,3]  creates anew all objects from the scenario whose names contain the given substring.", "body": [ "object_create_anew_containing ${1:<string>}" ] },
	"object_create_clone": { "prefix": "object_create_clone", "description": "[2,3]  creates an object, potentially resulting in multiple objects if it already exists.", "body": [ "object_create_clone ${1:<object_name>}" ] },
	"object_create_clone_containing": { "prefix": "object_create_clone_containing", "description": "[2,3]  creates clones for all objects from the scenario whose names contain the given substring.", "body": [ "object_create_clone_containing ${1:<string>}" ] },
	"object_create_containing": { "prefix": "object_create_containing", "description": "[1,2,3]  creates all objects from the scenario whose names contain the given substring.", "body": [ "object_create_containing ${1:<string>}" ] },
	"object_create_folder": { "prefix": "object_create_folder", "description": "[3]  creates all the objects in the given folder", "body": [ "object_create_folder ${1:<folder>}" ] },
	"object_create_if_necessary": { "prefix": "object_create_if_necessary", "description": "[3]  creates an object if it doesn't already exists.", "body": [ "object_create_if_necessary ${1:<object_name>}" ] },
	"object_damage_damage_section": { "prefix": "object_damage_damage_section", "description": "[2,3]  applies damage to a damage section, causing all manner of effects/constraint breakage to occur", "body": [ "object_damage_damage_section ${1:<object>} ${2:<string_id>} ${0:<real>}" ] },
	"object_destroy": { "prefix": "object_destroy", "description": "[1,2,3]  destroys an object.", "body": [ "object_destroy ${1:<object>}" ] },
	"object_destroy_all": { "prefix": "object_destroy_all", "description": "[1,2,3]  destroys all non player objects.", "body": [ "object_destroy_all" ] },
	"object_destroy_containing": { "prefix": "object_destroy_containing", "description": "[1,2,3]  destroys all objects from the scenario whose names contain the given substring.", "body": [ "object_destroy_containing ${1:<string>}" ] },
	"object_destroy_folder": { "prefix": "object_destroy_folder", "description": "[3]  destroys all objects in the given folder.", "body": [ "object_destroy_folder ${1:<folder>}" ] },
	"object_destroy_type_mask": { "prefix": "object_destroy_type_mask", "description": "[2,3]  destroys all objects matching the type mask", "body": [ "object_destroy_type_mask ${1:<long>}" ] },
	"object_dynamic_simulation_disable": { "prefix": "object_dynamic_simulation_disable", "description": "[2,3]  disabled dynamic simulation for this object (makes it fixed)", "body": [ "object_dynamic_simulation_disable ${1:<object>} ${0:<boolean>}" ] },
	"object_function_set": { "prefix": "object_function_set", "description": "[2,3]  sets a global object function (0-3) to value", "body": [ "object_function_set ${1:<long>} ${0:<real>}" ] },
	"object_get_ai": { "prefix": "object_get_ai", "description": "[2,3]  <ai>  returns the ai attached to this object, if any", "body": [ "object_get_ai ${1:<object>}" ] },
	"object_get_health": { "prefix": "object_get_health", "description": "[2,3]  <real>  returns the health [0,1] of the object, returns -1 if the object does not exist", "body": [ "object_get_health ${1:<object>}" ] },
	"object_get_parent": { "prefix": "object_get_parent", "description": "[2,3]  <object>  returns the parent of the given object", "body": [ "object_get_parent ${1:<object>}" ] },
	"object_get_shield": { "prefix": "object_get_shield", "description": "[2,3]  <real>  returns the shield [0,1] of the object, returns -1 if the object does not exist", "body": [ "object_get_shield ${1:<object>}" ] },
	"object_get_turret": { "prefix": "object_get_turret", "description": "[3]  <vehicle>  returns the nth turret attached to the given object", "body": [ "object_get_turret ${1:<object>} ${0:<short>}" ] },
	"object_get_turret_count": { "prefix": "object_get_turret_count", "description": "[3]  <short>  returns the number of turrets attached to the given object", "body": [ "object_get_turret_count ${1:<object>}" ] },
	"object_hide": { "prefix": "object_hide", "description": "[2,3]  hides or shows the object passed in", "body": [ "object_hide ${1:<object>} ${0:<boolean>}" ] },
	"object_list_children": { "prefix": "object_list_children", "description": "[2,3]  <object_list>  returns list of child objects by definition.", "body": [ "object_list_children ${1:<object>} ${0:<object_definition>}" ] },
	"object_model_target_destroyed": { "prefix": "object_model_target_destroyed", "description": "[2,3]  <boolean>  returns TRUE if the specified model target is destroyed", "body": [ "object_model_target_destroyed ${1:<object>} ${0:<string_id>}" ] },
	"object_model_targets_destroyed": { "prefix": "object_model_targets_destroyed", "description": "[2,3]  <short>  returns TRUE if the specified model target is destroyed", "body": [ "object_model_targets_destroyed ${1:<object>} ${0:<string_id>}" ] },
	"object_pvs_activate": { "prefix": "object_pvs_activate", "description": "[1]  just another (old) name for object_pvs_set_object", "body": [ "object_pvs_activate ${1:<object>}" ] },
	"object_pvs_clear": { "prefix": "object_pvs_clear", "description": "[1]  removes the special place that activates everything it sees", "body": [ "object_pvs_clear" ] },
	"object_pvs_set_camera": { "prefix": "object_pvs_set_camera", "description": "[1]  sets the specified cutscene camera point as the special place that activates everything it sees", "body": [ "object_pvs_set_camera ${1:<cutscene_camera_point>}" ] },
	"object_pvs_set_object": { "prefix": "object_pvs_set_object", "description": "[1]  just another (old) name for object_pvs_set_object", "body": [ "object_pvs_set_object ${1:<object>}" ] },
	"object_recycling_clear_history": { "prefix": "object_recycling_clear_history", "description": "[3]  clear object recycling history", "body": [ "object_recycling_clear_history" ] },
	"object_set_always_active": { "prefix": "object_set_always_active", "description": "[3]  sets/unsets the object always active flag to ignore pvs changes", "body": [ "object_set_always_active ${1:<object>} ${0:<boolean>}" ] },
	"object_set_collideable": { "prefix": "object_set_collideable", "description": "[1]  FALSE prevents any object from colliding with the given object", "body": [ "object_set_collideable ${1:<object>} ${0:<boolean>}" ] },
	"object_set_collision_damage_armor_scale": { "prefix": "object_set_collision_damage_armor_scale", "description": "[3]  0==default of 1.0, otherwise it is scale on how this objects takes collisoin damage, >1 == more protection, <1 == less", "body": [ "object_set_collision_damage_armor_scale ${1:<object>} ${0:<real>}" ] },
	"object_set_custom_animation_speed": { "prefix": "object_set_custom_animation_speed", "description": "[3]  if the object is playing a custom animation, scale it to n playback speed", "body": [ "object_set_custom_animation_speed ${1:<object>} ${0:<real>}" ] },
	"object_set_custom_animations_hold_on_last_frame": { "prefix": "object_set_custom_animations_hold_on_last_frame", "description": "[2,3]  changes the default behavior for custom animations", "body": [ "object_set_custom_animations_hold_on_last_frame ${1:<boolean>}" ] },
	"object_set_custom_animations_prevent_lipsync_head_movement": { "prefix": "object_set_custom_animations_prevent_lipsync_head_movement", "description": "[2,3]  when true, prevents lipsync from bobbing the head during custom animations. default is true.", "body": [ "object_set_custom_animations_prevent_lipsync_head_movement ${1:<boolean>}" ] },
	"object_set_deleted_when_deactivated": { "prefix": "object_set_deleted_when_deactivated", "description": "[2,3]  when this object deactivates it will be deleted", "body": [ "object_set_deleted_when_deactivated ${1:<object>}" ] },
	"object_set_facing": { "prefix": "object_set_facing", "description": "[1,2,3]  turns the specified object in the direction of the specified flag.", "body": [ "object_set_facing ${1:<object>} ${0:<cutscene_flag>}" ] },
	"object_set_function_variable": { "prefix": "object_set_function_variable", "description": "[2,3]  sets funciton variable for sin-o-matic use", "body": [ "object_set_function_variable ${1:<object>} ${2:<string_id>} ${3:<real>} ${0:<real>}" ] },
	"object_set_inertia_tensor_scale": { "prefix": "object_set_inertia_tensor_scale", "description": "[3]  0==default of 1.0, otherwise it is scale on this objects inertia tensor", "body": [ "object_set_inertia_tensor_scale ${1:<object>} ${0:<real>}" ] },
	"object_set_melee_attack_inhibited": { "prefix": "object_set_melee_attack_inhibited", "description": "[1,2,3]  FALSE prevents object from using melee attack", "body": [ "object_set_melee_attack_inhibited ${1:<object>} ${0:<boolean>}" ] },
	"object_set_permutation": { "prefix": "object_set_permutation", "description": "[1,2,3]  sets the desired region (use \"\" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood \"right arm\" ~damaged)", "body": [ "object_set_permutation ${1:<object>} ${2:<string>} ${0:<string>}" ] },
	"object_set_persistent": { "prefix": "object_set_persistent", "description": "[3]  <object_index> <true/false> prevent this object from being garbage collected", "body": [ "object_set_persistent ${1:<object>} ${0:<boolean>}" ] },
	"object_set_phantom_power": { "prefix": "object_set_phantom_power", "description": "[2,3]  sets phantom power to be latched at 1.0f or 0.0f", "body": [ "object_set_phantom_power ${1:<object>} ${0:<boolean>}" ] },
	"object_set_physics": { "prefix": "object_set_physics", "description": "[2,3]  prevents an object from running physics or colliding with any other objects", "body": [ "object_set_physics ${1:<object>} ${0:<boolean>}" ] },
	"object_set_ranged_attack_inhibited": { "prefix": "object_set_ranged_attack_inhibited", "description": "[1,2,3]  FALSE prevents object from using ranged attack", "body": [ "object_set_ranged_attack_inhibited ${1:<object>} ${0:<boolean>}" ] },
	"object_set_region_state": { "prefix": "object_set_region_state", "description": "[2,3]  sets the desired region (use \"\" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)", "body": [ "object_set_region_state ${1:<object>} ${2:<string_id>} ${0:<model_state>}" ] },
	"object_set_scale": { "prefix": "object_set_scale", "description": "[1,2,3]  sets the scale for a given object and interpolates over the given number of frames to achieve that scale", "body": [ "object_set_scale ${1:<object>} ${2:<real>} ${0:<short>}" ] },
	"object_set_shadowless": { "prefix": "object_set_shadowless", "description": "[2,3]  set/reset shadow castingness of object", "body": [ "object_set_shadowless ${1:<object>} ${0:<boolean>}" ] },
	"object_set_shield": { "prefix": "object_set_shield", "description": "[1,2,3]  sets the shield vitality of the specified object (between 0 and 1).", "body": [ "object_set_shield ${1:<object>} ${0:<real>}" ] },
	"object_set_shield_effect": { "prefix": "object_set_shield_effect", "description": "[2,3]  sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)", "body": [ "object_set_shield_effect ${1:<object>} ${2:<real>} ${0:<real>}" ] },
	"object_set_shield_stun": { "prefix": "object_set_shield_stun", "description": "[2,3]  set how long the shield will be stunned for, 0 is unstunned", "body": [ "object_set_shield_stun ${1:<object>} ${0:<real>}" ] },
	"object_set_shield_stun_infinite": { "prefix": "object_set_shield_stun_infinite", "description": "[2,3]  make this objects shield be stunned permanently", "body": [ "object_set_shield_stun_infinite ${1:<object>}" ] },
	"object_set_velocity": { "prefix": "object_set_velocity", "description": "[2,3]  Sets the (object-relative) forward velocity of the given object", "body": [ "object_set_velocity ${1:<object>} ${0:<real>}" ] },
	"object_teleport": { "prefix": "object_teleport", "description": "[1,2,3]  moves the specified object to the specified flag.", "body": [ "object_teleport ${1:<object>} ${0:<cutscene_flag>}" ] },
	"object_teleport_to_ai_point": { "prefix": "object_teleport_to_ai_point", "description": "[3]  moves the specified object to the specified ai point.", "body": [ "object_teleport_to_ai_point ${1:<object>} ${0:<point_reference>}" ] },
	"object_type_predict": { "prefix": "object_type_predict", "description": "[1,2,3]  loads textures necessary to draw an object that's about to come on-screen.", "body": [ "object_type_predict ${1:<object_definition>}" ] },
	"object_type_predict_high": { "prefix": "object_type_predict_high", "description": "[2,3]  loads textures necessary to draw an object that's about to come on-screen.", "body": [ "object_type_predict_high ${1:<object_definition>}" ] },
	"object_type_predict_low": { "prefix": "object_type_predict_low", "description": "[2,3]  loads textures necessary to draw an object that's about to come on-screen.", "body": [ "object_type_predict_low ${1:<object_definition>}" ] },
	"object_uses_cinematic_lighting": { "prefix": "object_uses_cinematic_lighting", "description": "[2]  makes an object use the cinematic directional and ambient lights instead of sampling the lightmap", "body": [ "object_uses_cinematic_lighting ${1:<object>} ${0:<boolean>}" ] },
	"object_vitality_pinned": { "prefix": "object_vitality_pinned", "description": "[2,3]  <boolean>  returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.", "body": [ "object_vitality_pinned ${1:<object>}" ] },
	"object_wake_physics": { "prefix": "object_wake_physics", "description": "[2,3]  wakes physics of an object.  For example it would make an usupported crate fall", "body": [ "object_wake_physics ${1:<object>}" ] },
	"objectives_clear": { "prefix": "objectives_clear", "description": "[2,3]  clears the mission objectives.", "body": [ "objectives_clear" ] },
	"objectives_finish_up_to": { "prefix": "objectives_finish_up_to", "description": "[2,3]  mark primary campaign objectives 0..n as complete", "body": [ "objectives_finish_up_to ${1:<long>}" ] },
	"objectives_secondary_finish": { "prefix": "objectives_secondary_finish", "description": "[3]  mark secondary campaign objective N as complete", "body": [ "objectives_secondary_finish ${1:<long>}" ] },
	"objectives_secondary_show": { "prefix": "objectives_secondary_show", "description": "[3]  show secondary campaign objective N", "body": [ "objectives_secondary_show ${1:<long>}" ] },
	"objectives_secondary_unavailable": { "prefix": "objectives_secondary_unavailable", "description": "[3]  mark secondary campaign objective N as unavailable", "body": [ "objectives_secondary_unavailable ${1:<long>}" ] },
	"objectives_show_up_to": { "prefix": "objectives_show_up_to", "description": "[2,3]  show primary campaign objectives 0..n", "body": [ "objectives_show_up_to ${1:<long>}" ] },
	"objects_attach": { "prefix": "objects_attach", "description": "[1,2,3]  attaches the second object to the first both strings can be empty", "body": [ "objects_attach ${1:<object>} ${2:<string>} ${3:<object>} ${0:<string>}" ] },
	"objects_can_see_flag": { "prefix": "objects_can_see_flag", "description": "[1,2,3]  <boolean>  returns true if any of the specified units are looking within the specified number of degrees of the flag.", "body": [ "objects_can_see_flag ${1:<object_list>} ${2:<cutscene_flag>} ${0:<real>}" ] },
	"objects_can_see_object": { "prefix": "objects_can_see_object", "description": "[1,2,3]  <boolean>  returns true if any of the specified units are looking within the specified number of degrees of the object.", "body": [ "objects_can_see_object ${1:<object_list>} ${2:<object>} ${0:<real>}" ] },
	"objects_delete_by_definition": { "prefix": "objects_delete_by_definition", "description": "[1,2,3]  deletes all objects of type <definition>", "body": [ "objects_delete_by_definition ${1:<object_definition>}" ] },
	"objects_detach": { "prefix": "objects_detach", "description": "[1,2,3]  detaches from the given parent object the given child object", "body": [ "objects_detach ${1:<object>} ${0:<object>}" ] },
	"objects_distance_to_flag": { "prefix": "objects_distance_to_flag", "description": "[1,2,3]  <real>  returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)", "body": [ "objects_distance_to_flag ${1:<object_list>} ${0:<cutscene_flag>}" ] },
	"objects_distance_to_object": { "prefix": "objects_distance_to_object", "description": "[1,2,3]  <real>  returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)", "body": [ "objects_distance_to_object ${1:<object_list>} ${0:<object>}" ] },
	"objects_dump_memory": { "prefix": "objects_dump_memory", "description": "[1,2,3]  debugs object memory usage", "body": [ "objects_dump_memory" ] },
	"objects_predict": { "prefix": "objects_predict", "description": "[1,2,3]  loads textures/geometry/sounds necessary to present objects that are about to come on-screen", "body": [ "objects_predict ${1:<object_list>}" ] },
	"objects_predict_high": { "prefix": "objects_predict_high", "description": "[2,3]  loads textures/geometry/sounds necessary to present objects that are about to come on-screen", "body": [ "objects_predict_high ${1:<object_list>}" ] },
	"objects_predict_low": { "prefix": "objects_predict_low", "description": "[2,3]  loads textures/geometry/sounds necessary to present objects that are about to come on-screen", "body": [ "objects_predict_low ${1:<object_list>}" ] },
	"on_target_platform": { "prefix": "on_target_platform", "description": "[3]  <boolean>  returns true if the game thinks it's running on the target platform", "body": [ "on_target_platform" ] },
	"online_files_retry": { "prefix": "online_files_retry", "description": "[3]  tell the upload queue to start up again after a failure", "body": [ "online_files_retry" ] },
	"online_files_throttle_bandwidth": { "prefix": "online_files_throttle_bandwidth", "description": "[3]  <bytes per second> sets the maximum bandwidth that online_files can use", "body": [ "online_files_throttle_bandwidth ${1:<long>}" ] },
	"online_files_upload": { "prefix": "online_files_upload", "description": "[3]  <filename> <slot_index> enqueues the specified filename for upload", "body": [ "online_files_upload ${1:<string>} ${0:<long>}" ] },
	"online_marketplace_refresh": { "prefix": "online_marketplace_refresh", "description": "[3]  tells the marketplace manager to take another look at signed in users", "body": [ "online_marketplace_refresh" ] },
	"online_message_send": { "prefix": "online_message_send", "description": "[2]  send a message from <controller_from> to <controller_to>", "body": [ "online_message_send ${1:<long>} ${2:<long>} ${0:<string>}" ] },
	"online_task_list": { "prefix": "online_task_list", "description": "[2]  lists all active online tasks", "body": [ "online_task_list" ] },
	"or": { "prefix": "or", "description": "[1,2]  <boolean>  returns true if any specified expressions are true.", "body": [ "or ${1:<boolean(s)>}" ] },
	"overlapped_display_task_descriptions": { "prefix": "overlapped_display_task_descriptions", "description": "[3]  displays all tasks", "body": [ "overlapped_display_task_descriptions" ] },
	"overlapped_task_inject_error": { "prefix": "overlapped_task_inject_error", "description": "[3]  inject error for tasks", "body": [ "overlapped_task_inject_error ${1:<string>} ${0:<boolean>}" ] },
	"overlapped_task_pause": { "prefix": "overlapped_task_pause", "description": "[3]  pause tasks", "body": [ "overlapped_task_pause ${1:<string>} ${0:<boolean>}" ] },
	"pause_hud_timer": { "prefix": "pause_hud_timer", "description": "[1,2]  pauses or unpauses the hud timer", "body": [ "pause_hud_timer ${1:<boolean>}" ] },
	"physical_memory_dump": { "prefix": "physical_memory_dump", "description": "[3]  dumps a record of all physical memory allocations", "body": [ "physical_memory_dump" ] },
	"physics_constants_reset": { "prefix": "physics_constants_reset", "description": "[1,2,3]  resets all physics constants to earthly values", "body": [ "physics_constants_reset" ] },
	"physics_disable_character_ground_adhesion_forces": { "prefix": "physics_disable_character_ground_adhesion_forces", "description": "[2,3]  turn off ground adhesion forces so you can play tricks with gravity", "body": [ "physics_disable_character_ground_adhesion_forces ${1:<real>}" ] },
	"physics_get_gravity": { "prefix": "physics_get_gravity", "description": "[1]  <real>  get the current global gravity acceleration relative to halo standard gravity", "body": [ "physics_get_gravity" ] },
	"physics_set_gravity": { "prefix": "physics_set_gravity", "description": "[1,2,3]  set global gravity acceleration relative to halo standard gravity", "body": [ "physics_set_gravity ${1:<real>}" ] },
	"physics_set_velocity_frame": { "prefix": "physics_set_velocity_frame", "description": "[2,3]  sets a local frame of motion for updating physics of things that wish to respect it", "body": [ "physics_set_velocity_frame ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"pin": { "prefix": "pin", "description": "[1,2,3]  <real>  returns the first value pinned between the second two", "body": [ "pin ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"play_bink_movie": { "prefix": "play_bink_movie", "description": "[2,3]  um...", "body": [ "play_bink_movie ${1:<string>}" ] },
	"play_bink_movie_from_tag": { "prefix": "play_bink_movie_from_tag", "description": "[3]  play a bink movie from a tag", "body": [ "play_bink_movie_from_tag ${1:<bink_definition>}" ] },
	"play_cortana_effect": { "prefix": "play_cortana_effect", "description": "[3]  scales the cortana effect distances", "body": [ "play_cortana_effect ${1:<string_id>}" ] },
	"play_credits": { "prefix": "play_credits", "description": "[2]  ur...", "body": [ "play_credits" ] },
	"play_credits_skip_to_menu": { "prefix": "play_credits_skip_to_menu", "description": "[3]  plays credits movie, pressing any button will stop credits and launch main menu", "body": [ "play_credits_skip_to_menu" ] },
	"play_credits_unskippable": { "prefix": "play_credits_unskippable", "description": "[3]  plays credits movie, no button press detection (you can still use cinematic skipping around this)", "body": [ "play_credits_unskippable" ] },
	"playback": { "prefix": "playback", "description": "[1]  starts game in film playback mode", "body": [ "playback" ] },
	"player_action_test_accept": { "prefix": "player_action_test_accept", "description": "[1,2,3]  <boolean>  returns true if any player has hit accept since the last call to (player_action_test_reset).", "body": [ "player_action_test_accept" ] },
	"player_action_test_action": { "prefix": "player_action_test_action", "description": "[1,2,3]  <boolean>  returns true if any player has hit the action key since the last call to (player_action_test_reset).", "body": [ "player_action_test_action" ] },
	"player_action_test_back": { "prefix": "player_action_test_back", "description": "[1,2,3]  <boolean>  returns true if any player has pressed the back button since the last call to (player_action_test_reset).", "body": [ "player_action_test_back" ] },
	"player_action_test_cancel": { "prefix": "player_action_test_cancel", "description": "[2,3]  <boolean>  returns true if any player has hit cancel key since the last call to (player_action_test_reset).", "body": [ "player_action_test_cancel" ] },
	"player_action_test_cinematic_skip": { "prefix": "player_action_test_cinematic_skip", "description": "[3]  <boolean>  returns true if any player has pressed the cinematic skip button (player_action_test_reset).", "body": [ "player_action_test_cinematic_skip" ] },
	"player_action_test_grenade_trigger": { "prefix": "player_action_test_grenade_trigger", "description": "[1,2,3]  <boolean>  returns true if any player has used grenade trigger since the last call to (player_action_test_reset).", "body": [ "player_action_test_grenade_trigger" ] },
	"player_action_test_jump": { "prefix": "player_action_test_jump", "description": "[1,2,3]  <boolean>  returns true if any player has jumped since the last call to (player_action_test_reset).", "body": [ "player_action_test_jump" ] },
	"player_action_test_look_down_begin": { "prefix": "player_action_test_look_down_begin", "description": "[2,3]  sets down player look down test", "body": [ "player_action_test_look_down_begin" ] },
	"player_action_test_look_pitch_end": { "prefix": "player_action_test_look_pitch_end", "description": "[2,3]  ends the look pitch testing", "body": [ "player_action_test_look_pitch_end" ] },
	"player_action_test_look_relative_all_directions": { "prefix": "player_action_test_look_relative_all_directions", "description": "[1,2,3]  <boolean>  returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).", "body": [ "player_action_test_look_relative_all_directions" ] },
	"player_action_test_look_relative_down": { "prefix": "player_action_test_look_relative_down", "description": "[1,2,3]  <boolean>  returns true if any player has looked down since the last call to (player_action_test_reset).", "body": [ "player_action_test_look_relative_down" ] },
	"player_action_test_look_relative_left": { "prefix": "player_action_test_look_relative_left", "description": "[1,2,3]  <boolean>  returns true if any player has looked left since the last call to (player_action_test_reset).", "body": [ "player_action_test_look_relative_left" ] },
	"player_action_test_look_relative_right": { "prefix": "player_action_test_look_relative_right", "description": "[1,2,3]  <boolean>  returns true if any player has looked right since the last call to (player_action_test_reset).", "body": [ "player_action_test_look_relative_right" ] },
	"player_action_test_look_relative_up": { "prefix": "player_action_test_look_relative_up", "description": "[1,2,3]  <boolean>  returns true if any player has looked up since the last call to (player_action_test_reset).", "body": [ "player_action_test_look_relative_up" ] },
	"player_action_test_look_up_begin": { "prefix": "player_action_test_look_up_begin", "description": "[2,3]  sets up player look up test", "body": [ "player_action_test_look_up_begin" ] },
	"player_action_test_lookstick_backward": { "prefix": "player_action_test_lookstick_backward", "description": "[2,3]  <boolean>  true if the first player pushed backward on lookstick", "body": [ "player_action_test_lookstick_backward" ] },
	"player_action_test_lookstick_forward": { "prefix": "player_action_test_lookstick_forward", "description": "[2,3]  <boolean>  true if the first player pushed forward on lookstick", "body": [ "player_action_test_lookstick_forward" ] },
	"player_action_test_melee": { "prefix": "player_action_test_melee", "description": "[2,3]  <boolean>  returns true if any player has hit the melee button since the last call to (player_action_test_reset).", "body": [ "player_action_test_melee" ] },
	"player_action_test_move_relative_all_directions": { "prefix": "player_action_test_move_relative_all_directions", "description": "[1,2,3]  <boolean>  returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).", "body": [ "player_action_test_move_relative_all_directions" ] },
	"player_action_test_primary_trigger": { "prefix": "player_action_test_primary_trigger", "description": "[1,2,3]  <boolean>  returns true if any player has used primary trigger since the last call to (player_action_test_reset).", "body": [ "player_action_test_primary_trigger" ] },
	"player_action_test_reset": { "prefix": "player_action_test_reset", "description": "[1,2,3]  resets the player action test state so that all tests will return false.", "body": [ "player_action_test_reset" ] },
	"player_action_test_rotate_grenades": { "prefix": "player_action_test_rotate_grenades", "description": "[2,3]  <boolean>  returns true if any player has hit the rotate-grenades button since the last call to (player_action_test_reset).", "body": [ "player_action_test_rotate_grenades" ] },
	"player_action_test_rotate_weapons": { "prefix": "player_action_test_rotate_weapons", "description": "[2,3]  <boolean>  returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).", "body": [ "player_action_test_rotate_weapons" ] },
	"player_action_test_start": { "prefix": "player_action_test_start", "description": "[2,3]  <boolean>  returns true if any player has pressed the start button since the last call to (player_action_test_reset).", "body": [ "player_action_test_start" ] },
	"player_action_test_vision_trigger": { "prefix": "player_action_test_vision_trigger", "description": "[2,3]  <boolean>  returns true if any player has used vision trigger since the last call to (player_action_test_reset).", "body": [ "player_action_test_vision_trigger" ] },
	"player_action_test_zoom": { "prefix": "player_action_test_zoom", "description": "[1,2,3]  <boolean>  returns true if any player has hit the zoom button since the last call to (player_action_test_reset).", "body": [ "player_action_test_zoom" ] },
	"player_active_camouflage_on": { "prefix": "player_active_camouflage_on", "description": "[2,3]  <boolean>  returns true if any player is active camouflaged", "body": [ "player_active_camouflage_on" ] },
	"player_add_equipment": { "prefix": "player_add_equipment", "description": "[1]  adds/resets the player's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false", "body": [ "player_add_equipment ${1:<unit>} ${2:<starting_profile>} ${0:<boolean>}" ] },
	"player_camera_control": { "prefix": "player_camera_control", "description": "[1,2,3]  <boolean>  enables/disables camera control globally", "body": [ "player_camera_control ${1:<boolean>}" ] },
	"player_control_fade_in_all_input": { "prefix": "player_control_fade_in_all_input", "description": "[3]  fade in all play control over x seconds", "body": [ "player_control_fade_in_all_input ${1:<real>}" ] },
	"player_control_fade_out_all_input": { "prefix": "player_control_fade_out_all_input", "description": "[3]  fade out all play control over x seconds", "body": [ "player_control_fade_out_all_input ${1:<real>}" ] },
	"player_control_lock_gaze": { "prefix": "player_control_lock_gaze", "description": "[3]  player turn to face point with max velocity degrees/second", "body": [ "player_control_lock_gaze ${1:<unit>} ${2:<point_reference>} ${0:<real>}" ] },
	"player_control_scale_all_input": { "prefix": "player_control_scale_all_input", "description": "[3]  scale input to x strength over y seconds", "body": [ "player_control_scale_all_input ${1:<real>} ${0:<real>}" ] },
	"player_control_unlock_gaze": { "prefix": "player_control_unlock_gaze", "description": "[3]  unlock player from any gaze point", "body": [ "player_control_unlock_gaze ${1:<unit>}" ] },
	"player_disable_movement": { "prefix": "player_disable_movement", "description": "[2,3]  toggle player input. the look stick works, but nothing else.", "body": [ "player_disable_movement ${1:<boolean>}" ] },
	"player_disable_weapon_pickup": { "prefix": "player_disable_weapon_pickup", "description": "[3]  enable/disable all players' ability to pick up weapons", "body": [ "player_disable_weapon_pickup ${1:<boolean>}" ] },
	"player_effect_set_max_rotation": { "prefix": "player_effect_set_max_rotation", "description": "[1,2,3]  <yaw> <pitch> <roll>", "body": [ "player_effect_set_max_rotation ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"player_effect_set_max_rumble": { "prefix": "player_effect_set_max_rumble", "description": "[1,3]  <left> <right>", "body": [ "player_effect_set_max_rumble ${1:<real>} ${0:<real>}" ] },
	"player_effect_set_max_translation": { "prefix": "player_effect_set_max_translation", "description": "[1,2,3]  <x> <y> <z>", "body": [ "player_effect_set_max_translation ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"player_effect_set_max_vibrate": { "prefix": "player_effect_set_max_vibrate", "description": "[1]  <left> <right>", "body": [ "player_effect_set_max_vibrate ${1:<real>} ${0:<real>}" ] },
	"player_effect_set_max_vibration": { "prefix": "player_effect_set_max_vibration", "description": "[2]  <left> <right>", "body": [ "player_effect_set_max_vibration ${1:<real>} ${0:<real>}" ] },
	"player_effect_start": { "prefix": "player_effect_start", "description": "[1,2,3]  <max_intensity> <attack time>", "body": [ "player_effect_start ${1:<real>} ${0:<real>}" ] },
	"player_effect_stop": { "prefix": "player_effect_stop", "description": "[1,2,3]  <decay>", "body": [ "player_effect_stop ${1:<real>}" ] },
	"player_enable_input": { "prefix": "player_enable_input", "description": "[1,2,3]  toggle player input. the player can still free-look, but nothing else.", "body": [ "player_enable_input ${1:<boolean>}" ] },
	"player_flashlight_on": { "prefix": "player_flashlight_on", "description": "[2,3]  <boolean>  returns true if any player has a flashlight on", "body": [ "player_flashlight_on" ] },
	"player_force_mode": { "prefix": "player_force_mode", "description": "[3]  force your will upon the player", "body": [ "player_force_mode ${1:<string_id>}" ] },
	"player_has_mad_secret_skills": { "prefix": "player_has_mad_secret_skills", "description": "[2,3]  You are the best!", "body": [ "player_has_mad_secret_skills ${1:<long>}" ] },
	"player_has_skills": { "prefix": "player_has_skills", "description": "[2,3]  <boolean>  Are you the best?", "body": [ "player_has_skills" ] },
	"player_in_vehicle": { "prefix": "player_in_vehicle", "description": "[3]  <boolean>  Returns whether any players are in the given vehicle", "body": [ "player_in_vehicle ${1:<vehicle>}" ] },
	"player_profile_create": { "prefix": "player_profile_create", "description": "[2]  create a player profile", "body": [ "player_profile_create ${1:<string>} ${2:<short>} ${3:<short>} ${4:<boolean>} ${5:<boolean>} ${0:<boolean>}" ] },
	"player_profile_create_corrupt": { "prefix": "player_profile_create_corrupt", "description": "[2]  create a corrupt player profile, for ui testing", "body": [ "player_profile_create_corrupt ${1:<string>}" ] },
	"player_training_activate_crouch": { "prefix": "player_training_activate_crouch", "description": "[2,3]  guess", "body": [ "player_training_activate_crouch" ] },
	"player_training_activate_equipment": { "prefix": "player_training_activate_equipment", "description": "[3]  guess", "body": [ "player_training_activate_equipment" ] },
	"player_training_activate_flashlight": { "prefix": "player_training_activate_flashlight", "description": "[2,3]  guess", "body": [ "player_training_activate_flashlight" ] },
	"player_training_activate_jump": { "prefix": "player_training_activate_jump", "description": "[3]  guess", "body": [ "player_training_activate_jump" ] },
	"player_training_activate_stealth": { "prefix": "player_training_activate_stealth", "description": "[2,3]  guess", "body": [ "player_training_activate_stealth" ] },
	"player0_joystick_set_is_normal": { "prefix": "player0_joystick_set_is_normal", "description": "[1]  <boolean>  returns TRUE if player0 is using the normal joystick set", "body": [ "player0_joystick_set_is_normal" ] },
	"player0_look_invert_pitch": { "prefix": "player0_look_invert_pitch", "description": "[1]  invert player0's look", "body": [ "player0_look_invert_pitch ${1:<boolean>}" ] },
	"player0_look_pitch_is_inverted": { "prefix": "player0_look_pitch_is_inverted", "description": "[1]  <boolean>  returns TRUE if player0's look pitch is inverted", "body": [ "player0_look_pitch_is_inverted" ] },
	"player0_looking_down": { "prefix": "player0_looking_down", "description": "[2,3]  <boolean>  true if the first player is looking down", "body": [ "player0_looking_down" ] },
	"player0_looking_up": { "prefix": "player0_looking_up", "description": "[2,3]  <boolean>  true if the first player is looking up", "body": [ "player0_looking_up" ] },
	"player0_set_pitch": { "prefix": "player0_set_pitch", "description": "[3]  sets up player look up test", "body": [ "player0_set_pitch ${1:<real>} ${0:<long>}" ] },
	"player1_set_pitch": { "prefix": "player1_set_pitch", "description": "[3]  sets up player look up test", "body": [ "player1_set_pitch ${1:<real>} ${0:<long>}" ] },
	"player2_set_pitch": { "prefix": "player2_set_pitch", "description": "[3]  sets up player look up test", "body": [ "player2_set_pitch ${1:<real>} ${0:<long>}" ] },
	"player3_set_pitch": { "prefix": "player3_set_pitch", "description": "[3]  sets up player look up test", "body": [ "player3_set_pitch ${1:<real>} ${0:<long>}" ] },
	"players": { "prefix": "players", "description": "[1,2,3]  <object_list>  returns a list of the players (DO NOT USE TO COUNT PLAYERS IN COOP GAME, USE game_coop_player_count)", "body": [ "players" ] },
	"players_on_multiplayer_team": { "prefix": "players_on_multiplayer_team", "description": "[1]  <object_list>  returns a list of the living player units on the MP team", "body": [ "players_on_multiplayer_team ${1:<short>}" ] },
	"players_unzoom_all": { "prefix": "players_unzoom_all", "description": "[1,2,3]  resets zoom levels on all players", "body": [ "players_unzoom_all" ] },
	"position_predict": { "prefix": "position_predict", "description": "[2,3]  in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.", "body": [ "position_predict ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"predict_animation": { "prefix": "predict_animation", "description": "[2,3]  begin loading an animation for the graph provided", "body": [ "predict_animation ${1:<animation_graph>} ${0:<string_id>}" ] },
	"predict_bink_movie": { "prefix": "predict_bink_movie", "description": "[3]  um2...", "body": [ "predict_bink_movie ${1:<string>}" ] },
	"predict_bink_movie_from_tag": { "prefix": "predict_bink_movie_from_tag", "description": "[3]  um2...", "body": [ "predict_bink_movie_from_tag ${1:<bink_definition>}" ] },
	"predict_bitmap": { "prefix": "predict_bitmap", "description": "[2]  predict a bitmap", "body": [ "predict_bitmap ${1:<bitmap>} ${0:<long>}" ] },
	"predict_lightmap_bucket": { "prefix": "predict_lightmap_bucket", "description": "[2]  predict a geometry block", "body": [ "predict_lightmap_bucket ${1:<structure_bsp>} ${0:<long>}" ] },
	"predict_model_section": { "prefix": "predict_model_section", "description": "[2]  predict a geometry block", "body": [ "predict_model_section ${1:<render_model>} ${0:<long>}" ] },
	"predict_structure_section": { "prefix": "predict_structure_section", "description": "[2]  predict a geometry block", "body": [ "predict_structure_section ${1:<structure_bsp>} ${2:<long>} ${0:<boolean>}" ] },
	"preferred_animation_list_add": { "prefix": "preferred_animation_list_add", "description": "[3]  <boolean>  adds an animation into the 'preferred list' of animations", "body": [ "preferred_animation_list_add ${1:<object>} ${0:<string_id>}" ] },
	"preferred_animation_list_clear": { "prefix": "preferred_animation_list_clear", "description": "[3]  clears the 'preferred list' of animations", "body": [ "preferred_animation_list_clear" ] },
	"prepare_to_switch_to_zone_set": { "prefix": "prepare_to_switch_to_zone_set", "description": "[3]  prepare for switch to zone set", "body": [ "prepare_to_switch_to_zone_set ${1:<zone_set>}" ] },
	"print": { "prefix": "print", "description": "[1,2,3]  prints a string to the console.", "body": [ "print ${1:<string>}" ] },
	"print_binds": { "prefix": "print_binds", "description": "[1]  prints a list of all input bindings", "body": [ "print_binds" ] },
	"print_if": { "prefix": "print_if", "description": "[1]  prints a string to the console if the condition is true", "body": [ "print_if ${1:<boolean>} ${0:<string>}" ] },
	"print_light_state": { "prefix": "print_light_state", "description": "[3]  outputs text light state", "body": [ "print_light_state" ] },
	"profile_activate": { "prefix": "profile_activate", "description": "[3]  activates profile sections based on a substring.", "body": [ "profile_activate ${1:<string>}" ] },
	"profile_deactivate": { "prefix": "profile_deactivate", "description": "[3]  deactivates profile sections based on a substring.", "body": [ "profile_deactivate ${1:<string>}" ] },
	"profile_load": { "prefix": "profile_load", "description": "[1]  Load any included builtin profiles and create profiles on disk", "body": [ "profile_load ${1:<string>}" ] },
	"profiler_auto_core_save": { "prefix": "profiler_auto_core_save", "description": "[3]  profiler dumps a core for each encounter", "body": [ "profiler_auto_core_save ${1:<boolean>}" ] },
	"profiler_dump_history": { "prefix": "profiler_dump_history", "description": "[3]  dump profile history.", "body": [ "profiler_dump_history" ] },
	"profiler_enable": { "prefix": "profiler_enable", "description": "[3]  toggles the profile display on/off", "body": [ "profiler_enable ${1:<boolean>}" ] },
	"profiler_output_pulse": { "prefix": "profiler_output_pulse", "description": "[3]  dump profile stats to telnet console.", "body": [ "profiler_output_pulse" ] },
	"profiler_set_attribute": { "prefix": "profiler_set_attribute", "description": "[3]  sets an attribute to profile by name", "body": [ "profiler_set_attribute ${1:<string>}" ] },
	"profiler_set_range": { "prefix": "profiler_set_range", "description": "[3]  sets the collection range used", "body": [ "profiler_set_range ${1:<long>}" ] },
	"profiler_set_sort_method": { "prefix": "profiler_set_sort_method", "description": "[3]  sets the sorting method used", "body": [ "profiler_set_sort_method ${1:<long>}" ] },
	"profiler_set_thread": { "prefix": "profiler_set_thread", "description": "[3]  sets the thread index being profiled", "body": [ "profiler_set_thread ${1:<long>}" ] },
	"pvs_clear": { "prefix": "pvs_clear", "description": "[2,3]  removes the special place that activates everything it sees.", "body": [ "pvs_clear" ] },
	"pvs_reset": { "prefix": "pvs_reset", "description": "[3]  forces pvs to empty then back to full.", "body": [ "pvs_reset" ] },
	"pvs_set_camera": { "prefix": "pvs_set_camera", "description": "[2,3]  sets the specified cutscene camera point as the special place that activates everything it sees.", "body": [ "pvs_set_camera ${1:<cutscene_camera_point>}" ] },
	"pvs_set_object": { "prefix": "pvs_set_object", "description": "[2,3]  sets the specified object as the special place that activates everything it sees.", "body": [ "pvs_set_object ${1:<object>}" ] },
	"quit": { "prefix": "quit", "description": "[1]  quits the game", "body": [ "quit" ] },
	"radiosity_debug_point": { "prefix": "radiosity_debug_point", "description": "[1]  tests sun occlusion at a point", "body": [ "radiosity_debug_point" ] },
	"radiosity_save": { "prefix": "radiosity_save", "description": "[1]  saves radiosity solution", "body": [ "radiosity_save" ] },
	"radiosity_start": { "prefix": "radiosity_start", "description": "[1]  starts radiosity computation", "body": [ "radiosity_start" ] },
	"rally_point_save_name": { "prefix": "rally_point_save_name", "description": "[2]  saves game state as rally point to core\\<path>", "body": [ "rally_point_save_name ${1:<string>}" ] },
	"random_range": { "prefix": "random_range", "description": "[1,2,3]  <short>  returns a random value in the range [lower bound, upper bound)", "body": [ "random_range ${1:<short>} ${0:<short>}" ] },
	"rasterizer_bloom_override": { "prefix": "rasterizer_bloom_override", "description": "[2,3]  enable", "body": [ "rasterizer_bloom_override ${1:<boolean>}" ] },
	"rasterizer_bloom_override_blur_amount": { "prefix": "rasterizer_bloom_override_blur_amount", "description": "[2,3]  blur mount", "body": [ "rasterizer_bloom_override_blur_amount ${1:<real>}" ] },
	"rasterizer_bloom_override_box_factor": { "prefix": "rasterizer_bloom_override_box_factor", "description": "[2,3]  box factor", "body": [ "rasterizer_bloom_override_box_factor ${1:<real>}" ] },
	"rasterizer_bloom_override_brightness": { "prefix": "rasterizer_bloom_override_brightness", "description": "[2,3]  brightness", "body": [ "rasterizer_bloom_override_brightness ${1:<real>}" ] },
	"rasterizer_bloom_override_brightness_alpha": { "prefix": "rasterizer_bloom_override_brightness_alpha", "description": "[2,3]  brightness alpha", "body": [ "rasterizer_bloom_override_brightness_alpha ${1:<real>}" ] },
	"rasterizer_bloom_override_high_res": { "prefix": "rasterizer_bloom_override_high_res", "description": "[2,3]  high res", "body": [ "rasterizer_bloom_override_high_res ${1:<boolean>}" ] },
	"rasterizer_bloom_override_max_factor": { "prefix": "rasterizer_bloom_override_max_factor", "description": "[2,3]  max factor", "body": [ "rasterizer_bloom_override_max_factor ${1:<real>}" ] },
	"rasterizer_bloom_override_max_factor_alpha": { "prefix": "rasterizer_bloom_override_max_factor_alpha", "description": "[2,3]  max factor alpha", "body": [ "rasterizer_bloom_override_max_factor_alpha ${1:<real>}" ] },
	"rasterizer_bloom_override_only": { "prefix": "rasterizer_bloom_override_only", "description": "[2,3]  only", "body": [ "rasterizer_bloom_override_only ${1:<boolean>}" ] },
	"rasterizer_bloom_override_reset": { "prefix": "rasterizer_bloom_override_reset", "description": "[2,3]  reset", "body": [ "rasterizer_bloom_override_reset ${1:<boolean>}" ] },
	"rasterizer_bloom_override_silver_bullet": { "prefix": "rasterizer_bloom_override_silver_bullet", "description": "[2,3]  silver bullet", "body": [ "rasterizer_bloom_override_silver_bullet ${1:<boolean>}" ] },
	"rasterizer_bloom_override_threshold": { "prefix": "rasterizer_bloom_override_threshold", "description": "[2,3]  threshold", "body": [ "rasterizer_bloom_override_threshold ${1:<real>}" ] },
	"rasterizer_blur": { "prefix": "rasterizer_blur", "description": "[2]  sets the blur (0=disabled, 1=4x, 2=16x)", "body": [ "rasterizer_blur ${1:<short>}" ] },
	"rasterizer_debug_crap_pixel_shader": { "prefix": "rasterizer_debug_crap_pixel_shader", "description": "[2]  spew texture usage data per frame", "body": [ "rasterizer_debug_crap_pixel_shader ${1:<boolean>}" ] },
	"rasterizer_debug_display_bitmap": { "prefix": "rasterizer_debug_display_bitmap", "description": "[2]  displays a bitmap", "body": [ "rasterizer_debug_display_bitmap ${1:<string>}" ] },
	"rasterizer_debug_frame_usage": { "prefix": "rasterizer_debug_frame_usage", "description": "[2]  spew texture usage data per frame", "body": [ "rasterizer_debug_frame_usage ${1:<boolean>}" ] },
	"rasterizer_decal_depth_bias": { "prefix": "rasterizer_decal_depth_bias", "description": "[2]  sets the depth bias offset for decals", "body": [ "rasterizer_decal_depth_bias ${1:<real>}" ] },
	"rasterizer_decal_depth_bias_slope_scale": { "prefix": "rasterizer_decal_depth_bias_slope_scale", "description": "[2]  sets the depth bias slope scale for decals", "body": [ "rasterizer_decal_depth_bias_slope_scale ${1:<real>}" ] },
	"rasterizer_decals_flush": { "prefix": "rasterizer_decals_flush", "description": "[1,2]  flush all decals", "body": [ "rasterizer_decals_flush" ] },
	"rasterizer_f2": { "prefix": "rasterizer_f2", "description": "[2]  ", "body": [ "rasterizer_f2 ${1:<real>} ${0:<real>}" ] },
	"rasterizer_f3": { "prefix": "rasterizer_f3", "description": "[2]  ", "body": [ "rasterizer_f3 ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"rasterizer_f4": { "prefix": "rasterizer_f4", "description": "[2]  ", "body": [ "rasterizer_f4 ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_f5": { "prefix": "rasterizer_f5", "description": "[2]  ", "body": [ "rasterizer_f5 ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"rasterizer_f6": { "prefix": "rasterizer_f6", "description": "[2]  ", "body": [ "rasterizer_f6 ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<real>} ${0:<real>}" ] },
	"rasterizer_fps_accumulate": { "prefix": "rasterizer_fps_accumulate", "description": "[1]  average fps", "body": [ "rasterizer_fps_accumulate" ] },
	"rasterizer_hud_ten_foot": { "prefix": "rasterizer_hud_ten_foot", "description": "[2]  sets the 10 foot HUD experience implementation", "body": [ "rasterizer_hud_ten_foot ${1:<short>}" ] },
	"rasterizer_lens_flares_clear_for_frame": { "prefix": "rasterizer_lens_flares_clear_for_frame", "description": "[2]  ", "body": [ "rasterizer_lens_flares_clear_for_frame" ] },
	"rasterizer_lights_reset_for_new_map": { "prefix": "rasterizer_lights_reset_for_new_map", "description": "[1]  ", "body": [ "rasterizer_lights_reset_for_new_map" ] },
	"rasterizer_model_ambient_reflection_tint": { "prefix": "rasterizer_model_ambient_reflection_tint", "description": "[1]  ", "body": [ "rasterizer_model_ambient_reflection_tint ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_reload_effects": { "prefix": "rasterizer_reload_effects", "description": "[1]  check for shader changes", "body": [ "rasterizer_reload_effects" ] },
	"rasterizer_solid_decorator_color": { "prefix": "rasterizer_solid_decorator_color", "description": "[2]  ", "body": [ "rasterizer_solid_decorator_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_decorator_decal_color": { "prefix": "rasterizer_solid_decorator_decal_color", "description": "[2]  ", "body": [ "rasterizer_solid_decorator_decal_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_decorator_model_color": { "prefix": "rasterizer_solid_decorator_model_color", "description": "[2]  ", "body": [ "rasterizer_solid_decorator_model_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_decorator_sprite_color": { "prefix": "rasterizer_solid_decorator_sprite_color", "description": "[2]  ", "body": [ "rasterizer_solid_decorator_sprite_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_model_color": { "prefix": "rasterizer_solid_model_color", "description": "[2]  ", "body": [ "rasterizer_solid_model_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_sky_color": { "prefix": "rasterizer_solid_sky_color", "description": "[2]  ", "body": [ "rasterizer_solid_sky_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_structure_color": { "prefix": "rasterizer_solid_structure_color", "description": "[2]  ", "body": [ "rasterizer_solid_structure_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_solid_structure_instanced_geometry_color": { "prefix": "rasterizer_solid_structure_instanced_geometry_color", "description": "[2]  ", "body": [ "rasterizer_solid_structure_instanced_geometry_color ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"rasterizer_test_screen": { "prefix": "rasterizer_test_screen", "description": "[2]  ", "body": [ "rasterizer_test_screen ${1:<long>} ${2:<real>} ${0:<real>}" ] },
	"rasterizer_test_screen_off": { "prefix": "rasterizer_test_screen_off", "description": "[2]  ", "body": [ "rasterizer_test_screen_off" ] },
	"rasterizer_test_screen_supablur": { "prefix": "rasterizer_test_screen_supablur", "description": "[2]  ", "body": [ "rasterizer_test_screen_supablur ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"real_random_range": { "prefix": "real_random_range", "description": "[1,2,3]  <real>  returns a random value in the range [lower bound, upper bound)", "body": [ "real_random_range ${1:<real>} ${0:<real>}" ] },
	"record_movie": { "prefix": "record_movie", "description": "[2,3]  <frame rate> <seconds> <width> <height>", "body": [ "record_movie ${1:<short>} ${2:<long>} ${0:<short>}" ] },
	"record_movie_distributed": { "prefix": "record_movie_distributed", "description": "[2,3]  <frame rate> <seconds> <screen size> <mod count> <mod index>", "body": [ "record_movie_distributed ${1:<short>} ${2:<long>} ${3:<short>} ${4:<long>} ${0:<long>}" ] },
	"recording_kill": { "prefix": "recording_kill", "description": "[1,2,3]  kill the specified unit's cutscene recording.", "body": [ "recording_kill ${1:<unit>}" ] },
	"recording_play": { "prefix": "recording_play", "description": "[1,2,3]  <boolean>  make the specified unit run the specified cutscene recording.", "body": [ "recording_play ${1:<unit>} ${0:<cutscene_recording>}" ] },
	"recording_play_and_delete": { "prefix": "recording_play_and_delete", "description": "[1,2,3]  <boolean>  make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.", "body": [ "recording_play_and_delete ${1:<unit>} ${0:<cutscene_recording>}" ] },
	"recording_play_and_hover": { "prefix": "recording_play_and_hover", "description": "[1,2,3]  <boolean>  make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.", "body": [ "recording_play_and_hover ${1:<vehicle>} ${0:<cutscene_recording>}" ] },
	"recording_time": { "prefix": "recording_time", "description": "[1,2,3]  <short>  return the time remaining in the specified unit's cutscene recording.", "body": [ "recording_time ${1:<unit>}" ] },
	"reload_shader_transparent_chicago": { "prefix": "reload_shader_transparent_chicago", "description": "[1]  ", "body": [ "reload_shader_transparent_chicago" ] },
	"render_atmosphere_fog": { "prefix": "render_atmosphere_fog", "description": "[3]  enable/disable atmosphere fog", "body": [ "render_atmosphere_fog ${1:<boolean>}" ] },
	"render_autoexposure_enable": { "prefix": "render_autoexposure_enable", "description": "[3]  toggle autoexposure", "body": [ "render_autoexposure_enable ${1:<boolean>}" ] },
	"render_autoexposure_instant": { "prefix": "render_autoexposure_instant", "description": "[3]  instantly adopt auto exposure values in the next N frames", "body": [ "render_autoexposure_instant ${1:<long>}" ] },
	"render_cinematic_motion_blur": { "prefix": "render_cinematic_motion_blur", "description": "[3]  enable/disable cinematic motion blur", "body": [ "render_cinematic_motion_blur ${1:<boolean>}" ] },
	"render_debug_query_all_object_resources": { "prefix": "render_debug_query_all_object_resources", "description": "[3]  Outputs text of texture and geometry memory usage", "body": [ "render_debug_query_all_object_resources" ] },
	"render_debug_query_bsp_resources": { "prefix": "render_debug_query_bsp_resources", "description": "[3]  BSP index and whether to spit out all bitmaps used", "body": [ "render_debug_query_bsp_resources ${1:<long>} ${0:<boolean>}" ] },
	"render_debug_query_d3d_resources": { "prefix": "render_debug_query_d3d_resources", "description": "[3]  Outputs text of d3d resource usage", "body": [ "render_debug_query_d3d_resources" ] },
	"render_debug_query_object_bitmaps": { "prefix": "render_debug_query_object_bitmaps", "description": "[3]  substring of object definition name to spew out it's debug usage", "body": [ "render_debug_query_object_bitmaps ${1:<string>}" ] },
	"render_debug_structure_all_cluster_errors": { "prefix": "render_debug_structure_all_cluster_errors", "description": "[2,3]  enables cluster error debugging (all)", "body": [ "render_debug_structure_all_cluster_errors ${1:<boolean>}" ] },
	"render_debug_structure_all_fog_planes": { "prefix": "render_debug_structure_all_fog_planes", "description": "[2,3]  enables fog plane debugging (all)", "body": [ "render_debug_structure_all_fog_planes ${1:<boolean>}" ] },
	"render_debug_structure_cluster_fog": { "prefix": "render_debug_structure_cluster_fog", "description": "[2,3]  enables cluster fog debugging", "body": [ "render_debug_structure_cluster_fog ${1:<long>}" ] },
	"render_debug_structure_cluster_visibility": { "prefix": "render_debug_structure_cluster_visibility", "description": "[2]  enables cluster visibility debugging", "body": [ "render_debug_structure_cluster_visibility ${1:<long>}" ] },
	"render_debug_structure_fog_plane": { "prefix": "render_debug_structure_fog_plane", "description": "[2,3]  enables fog plane debugging", "body": [ "render_debug_structure_fog_plane ${1:<long>}" ] },
	"render_debug_structure_fog_plane_infinite_extent": { "prefix": "render_debug_structure_fog_plane_infinite_extent", "description": "[2,3]  enables fog plane debugging", "body": [ "render_debug_structure_fog_plane_infinite_extent ${1:<long>}" ] },
	"render_debug_structure_fog_zone": { "prefix": "render_debug_structure_fog_zone", "description": "[2,3]  enabled fog zone debugging", "body": [ "render_debug_structure_fog_zone ${1:<long>}" ] },
	"render_debug_structure_fog_zone_floodfill": { "prefix": "render_debug_structure_fog_zone_floodfill", "description": "[2,3]  enables fog zone debugging", "body": [ "render_debug_structure_fog_zone_floodfill ${1:<long>}" ] },
	"render_debug_structure_line_opacity": { "prefix": "render_debug_structure_line_opacity", "description": "[2,3]  sets the opacity (0 is default)", "body": [ "render_debug_structure_line_opacity ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"render_debug_structure_non_occluded_fog_planes": { "prefix": "render_debug_structure_non_occluded_fog_planes", "description": "[2,3]  controls non-occluded fog plane debugging", "body": [ "render_debug_structure_non_occluded_fog_planes ${1:<boolean>}" ] },
	"render_debug_structure_opacity": { "prefix": "render_debug_structure_opacity", "description": "[2,3]  sets the opacity (0 is default)", "body": [ "render_debug_structure_opacity ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"render_debug_structure_text_opacity": { "prefix": "render_debug_structure_text_opacity", "description": "[2,3]  sets the opacity (0 is default)", "body": [ "render_debug_structure_text_opacity ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"render_debug_text_using_simple_font": { "prefix": "render_debug_text_using_simple_font", "description": "[3]  toggles use of the much faster simple_font system for debug text rendering", "body": [ "render_debug_text_using_simple_font ${1:<boolean>}" ] },
	"render_debug_texture_camera": { "prefix": "render_debug_texture_camera", "description": "[3]  toggles displaying the texture camera in the corner of the screen", "body": [ "render_debug_texture_camera ${1:<boolean>}" ] },
	"render_debug_video_mode": { "prefix": "render_debug_video_mode", "description": "[3]  displays the current video mode", "body": [ "render_debug_video_mode" ] },
	"render_depth_of_field": { "prefix": "render_depth_of_field", "description": "[3]  animate depth of field, in focus from <near> to <far>, with depth of field <depth>, in <ticks>", "body": [ "render_depth_of_field ${1:<real>} ${2:<real>} ${3:<real>} ${0:<real>}" ] },
	"render_depth_of_field_enable": { "prefix": "render_depth_of_field_enable", "description": "[3]  turns depth of field on and off", "body": [ "render_depth_of_field_enable ${1:<boolean>}" ] },
	"render_dof_blur_animate": { "prefix": "render_dof_blur_animate", "description": "[3]  interpolate depth of field maximum blur to <blur> in <ticks>", "body": [ "render_dof_blur_animate ${1:<real>} ${0:<real>}" ] },
	"render_dof_focus_depth": { "prefix": "render_dof_focus_depth", "description": "[3]  interpolate depth of field to <depth>", "body": [ "render_dof_focus_depth ${1:<real>}" ] },
	"render_effects": { "prefix": "render_effects", "description": "[1]  ", "body": [ "render_effects ${1:<boolean>}" ] },
	"render_exposure": { "prefix": "render_exposure", "description": "[3]  fade to animated exposure <stops> in <seconds>", "body": [ "render_exposure ${1:<real>} ${0:<real>}" ] },
	"render_exposure_fade_in": { "prefix": "render_exposure_fade_in", "description": "[3]  fade to animated exposure <stops> in <seconds>", "body": [ "render_exposure_fade_in ${1:<real>} ${0:<real>}" ] },
	"render_exposure_fade_out": { "prefix": "render_exposure_fade_out", "description": "[3]  fade to default exposure settings in <seconds>", "body": [ "render_exposure_fade_out ${1:<real>}" ] },
	"render_exposure_full": { "prefix": "render_exposure_full", "description": "[3]  animate exposure from <initial> to <final> stops using <initial> to <final> opacity in <seconds>", "body": [ "render_exposure_full ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"render_exposure_set_environment_darken": { "prefix": "render_exposure_set_environment_darken", "description": "[3]  set environmental darkening", "body": [ "render_exposure_set_environment_darken ${1:<real>}" ] },
	"render_layer_enable": { "prefix": "render_layer_enable", "description": "[2]  enable/disables a render_layer", "body": [ "render_layer_enable ${1:<string>} ${0:<boolean>}" ] },
	"render_layer_enable_all": { "prefix": "render_layer_enable_all", "description": "[2]  enable/disables all render_layers", "body": [ "render_layer_enable_all ${1:<boolean>}" ] },
	"render_lights": { "prefix": "render_lights", "description": "[1,2,3]  <boolean>  enables/disables dynamic lights", "body": [ "render_lights ${1:<boolean>}" ] },
	"render_lights_enable_cinematic_shadow": { "prefix": "render_lights_enable_cinematic_shadow", "description": "[2,3]  enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name", "body": [ "render_lights_enable_cinematic_shadow ${1:<boolean>} ${2:<object>} ${3:<string_id>} ${0:<real>}" ] },
	"render_patchy_fog": { "prefix": "render_patchy_fog", "description": "[3]  enable/disable patchy fog", "body": [ "render_patchy_fog ${1:<boolean>}" ] },
	"render_postprocess_color_tweaking_reset": { "prefix": "render_postprocess_color_tweaking_reset", "description": "[3]  resets hue saturation filters to default", "body": [ "render_postprocess_color_tweaking_reset" ] },
	"render_weather": { "prefix": "render_weather", "description": "[3]  enable/disable atmosphere fog", "body": [ "render_weather ${1:<boolean>}" ] },
	"report_zone_size_estimates": { "prefix": "report_zone_size_estimates", "description": "[3]  dump zone size estimates to design report log", "body": [ "report_zone_size_estimates" ] },
	"reset_dsp_image": { "prefix": "reset_dsp_image", "description": "[3]  if we ever need to use this someone is getting fired", "body": [ "reset_dsp_image" ] },
	"run_like_dvd": { "prefix": "run_like_dvd", "description": "[3]  ", "body": [ "run_like_dvd" ] },
	"run_no_hdd": { "prefix": "run_no_hdd", "description": "[3]  ", "body": [ "run_no_hdd" ] },
	"saved_film_disable_version_checking": { "prefix": "saved_film_disable_version_checking", "description": "[3]  disable saved film version checking", "body": [ "saved_film_disable_version_checking ${1:<boolean>}" ] },
	"saved_film_manager_should_record_film_default": { "prefix": "saved_film_manager_should_record_film_default", "description": "[3]  Toggle recording of replay in single player game", "body": [ "saved_film_manager_should_record_film_default ${1:<boolean>}" ] },
	"saved_film_play": { "prefix": "saved_film_play", "description": "[3]  plays a saved film for given controller", "body": [ "saved_film_play ${1:<controller>} ${0:<string>}" ] },
	"saved_film_play_last": { "prefix": "saved_film_play_last", "description": "[3]  play back last recorded saved film for given controller", "body": [ "saved_film_play_last" ] },
	"saved_film_seek_to_film_tick": { "prefix": "saved_film_seek_to_film_tick", "description": "[3]  seeks to a film tick", "body": [ "saved_film_seek_to_film_tick ${1:<long>}" ] },
	"saved_film_set_pending_playback_game_speed": { "prefix": "saved_film_set_pending_playback_game_speed", "description": "[3]  set the pending saved film playback speed", "body": [ "saved_film_set_pending_playback_game_speed ${1:<real>}" ] },
	"saved_film_set_playback_game_speed": { "prefix": "saved_film_set_playback_game_speed", "description": "[3]  set the saved film playback speed", "body": [ "saved_film_set_playback_game_speed ${1:<real>}" ] },
	"saved_film_set_repro_mode": { "prefix": "saved_film_set_repro_mode", "description": "[3]  set the saved film into repro mode (splitscreen users are created based on the number of splitscreen players that recorded the film)", "body": [ "saved_film_set_repro_mode ${1:<boolean>}" ] },
	"saved_film_toggle_debug_saving": { "prefix": "saved_film_toggle_debug_saving", "description": "[3]  toggle saving of last film to the debug output directory automatically after each game level", "body": [ "saved_film_toggle_debug_saving ${1:<boolean>}" ] },
	"saved_films_delete_on_level_load": { "prefix": "saved_films_delete_on_level_load", "description": "[3]  toggle deletion last saved film after loading a new game level", "body": [ "saved_films_delete_on_level_load ${1:<boolean>}" ] },
	"saved_films_show_timestamp": { "prefix": "saved_films_show_timestamp", "description": "[3]  toggle showing timestamp for saved film playback", "body": [ "saved_films_show_timestamp ${1:<boolean>}" ] },
	"saved_games_autosave_free_up_space": { "prefix": "saved_games_autosave_free_up_space", "description": "[3]  tell the autosave queue to run its cleanup routine for each content type", "body": [ "saved_games_autosave_free_up_space" ] },
	"saved_games_delete_campaign_save": { "prefix": "saved_games_delete_campaign_save", "description": "[3]  delete the campaign saved game file for a controller", "body": [ "saved_games_delete_campaign_save ${1:<controller>}" ] },
	"saved_games_enumerate": { "prefix": "saved_games_enumerate", "description": "[3]  test enumeration of saved game files on a controller", "body": [ "saved_games_enumerate ${1:<controller>}" ] },
	"saved_games_save_last_film": { "prefix": "saved_games_save_last_film", "description": "[3]  test saving of last recorded film for a controller", "body": [ "saved_games_save_last_film ${1:<controller>}" ] },
	"scenario_dump_scenario_signature_disable": { "prefix": "scenario_dump_scenario_signature_disable", "description": "[2]  disable signature dumps", "body": [ "scenario_dump_scenario_signature_disable" ] },
	"scenario_dump_scenario_signature_enable": { "prefix": "scenario_dump_scenario_signature_enable", "description": "[2]  enable signature dumps", "body": [ "scenario_dump_scenario_signature_enable" ] },
	"scenario_force_name_failure_disable": { "prefix": "scenario_force_name_failure_disable", "description": "[2]  disable forcing name failure", "body": [ "scenario_force_name_failure_disable" ] },
	"scenario_force_name_failure_enable": { "prefix": "scenario_force_name_failure_enable", "description": "[2]  enable forcing name failure", "body": [ "scenario_force_name_failure_enable" ] },
	"scenario_force_signature_failure_disable": { "prefix": "scenario_force_signature_failure_disable", "description": "[2]  disable forcing signature failure", "body": [ "scenario_force_signature_failure_disable" ] },
	"scenario_force_signature_failure_enable": { "prefix": "scenario_force_signature_failure_enable", "description": "[2]  enable forcing signature failure", "body": [ "scenario_force_signature_failure_enable" ] },
	"scenario_ignore_failures_disable": { "prefix": "scenario_ignore_failures_disable", "description": "[2]  disable ignoring failures", "body": [ "scenario_ignore_failures_disable" ] },
	"scenario_ignore_failures_enable": { "prefix": "scenario_ignore_failures_enable", "description": "[2]  enable ignoring failure", "body": [ "scenario_ignore_failures_enable" ] },
	"scenery_animation_idle": { "prefix": "scenery_animation_idle", "description": "[2,3]  starts the idle animation (if any) for a piece of scenery", "body": [ "scenery_animation_idle ${1:<scenery>}" ] },
	"scenery_animation_start": { "prefix": "scenery_animation_start", "description": "[1,2,3]  starts a custom animation playing on a piece of scenery", "body": [ "scenery_animation_start ${1:<scenery>} ${2:<animation_graph>} ${0:<string>}" ] },
	"scenery_animation_start_at_frame": { "prefix": "scenery_animation_start_at_frame", "description": "[1,2,3]  starts a custom animation playing on a piece of scenery at a specific frame", "body": [ "scenery_animation_start_at_frame ${1:<scenery>} ${2:<animation_graph>} ${3:<string>} ${0:<short>}" ] },
	"scenery_animation_start_at_frame_loop": { "prefix": "scenery_animation_start_at_frame_loop", "description": "[3]  starts a custom animation playing on a piece of scenery at a specific frame and then loops", "body": [ "scenery_animation_start_at_frame_loop ${1:<scenery>} ${2:<animation_graph>} ${3:<string_id>} ${0:<short>}" ] },
	"scenery_animation_start_loop": { "prefix": "scenery_animation_start_loop", "description": "[2,3]  starts a custom looping animation playing on a piece of scenery", "body": [ "scenery_animation_start_loop ${1:<scenery>} ${2:<animation_graph>} ${0:<string_id>}" ] },
	"scenery_animation_start_relative": { "prefix": "scenery_animation_start_relative", "description": "[2,3]  starts a custom animation playing on a piece of scenery relative to a parent object", "body": [ "scenery_animation_start_relative ${1:<scenery>} ${2:<animation_graph>} ${3:<string_id>} ${0:<object>}" ] },
	"scenery_animation_start_relative_at_frame": { "prefix": "scenery_animation_start_relative_at_frame", "description": "[3]  starts a custom animation playing on a piece of scenery relative to a specific cutscene flag at a specific frame", "body": [ "scenery_animation_start_relative_at_frame ${1:<scenery>} ${2:<animation_graph>} ${3:<string_id>} ${4:<object>} ${0:<short>}" ] },
	"scenery_animation_start_relative_loop": { "prefix": "scenery_animation_start_relative_loop", "description": "[2,3]  starts a custom looping animation playing on a piece of scenery relative to a parent object", "body": [ "scenery_animation_start_relative_loop ${1:<scenery>} ${2:<animation_graph>} ${3:<string_id>} ${0:<object>}" ] },
	"scenery_get_animation_time": { "prefix": "scenery_get_animation_time", "description": "[1,2,3]  <short>  returns the number of ticks remaining in a custom animation (or zero, if the animation is over).", "body": [ "scenery_get_animation_time ${1:<scenery>}" ] },
	"screenshot": { "prefix": "screenshot", "description": "[2,3]  takes a screenshot and saves as <name>.tif", "body": [ "screenshot ${1:<string>}" ] },
	"screenshot_big": { "prefix": "screenshot_big", "description": "[2,3]  takes an NxN multiple-page screenshot and saves as <name>.tif", "body": [ "screenshot_big ${1:<short>} ${0:<string>}" ] },
	"screenshot_big_jittered": { "prefix": "screenshot_big_jittered", "description": "[2]  takes an NxN subpixel sampled 640x480 screenshot and saves as <name>.tif", "body": [ "screenshot_big_jittered ${1:<short>} ${0:<string>}" ] },
	"screenshot_big_raw": { "prefix": "screenshot_big_raw", "description": "[3]  takes an NxN multiple-page screenshot and saves as an HDR <name>.tif", "body": [ "screenshot_big_raw ${1:<short>} ${0:<string>}" ] },
	"screenshot_cubemap": { "prefix": "screenshot_cubemap", "description": "[2,3]  takes a cubemap screenshot and saves as <name>.tif", "body": [ "screenshot_cubemap ${1:<string>}" ] },
	"screenshot_debug": { "prefix": "screenshot_debug", "description": "[3]  takes a screenshot and saves as <name>.tif", "body": [ "screenshot_debug" ] },
	"screenshot_simple": { "prefix": "screenshot_simple", "description": "[3]  takes a simple screenshot and saves as <name>.tif", "body": [ "screenshot_simple ${1:<string>}" ] },
	"screenshot_size": { "prefix": "screenshot_size", "description": "[3]  takes a <width> x <height> screenshot and saves as an HDR <name>.tif", "body": [ "screenshot_size ${1:<short>} ${2:<short>} ${0:<string>}" ] },
	"screenshot_webmap": { "prefix": "screenshot_webmap", "description": "[3]  takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt", "body": [ "screenshot_webmap ${1:<string>}" ] },
	"script_doc": { "prefix": "script_doc", "description": "[1,2,3]  saves a file called hs_doc.txt with parameters for all script commands.", "body": [ "script_doc" ] },
	"script_finished": { "prefix": "script_finished", "description": "[3]  <boolean>  Returns true if the continuous, dormant or startup script was finished.", "body": [ "script_finished ${1:<string>}" ] },
	"script_recompile": { "prefix": "script_recompile", "description": "[2,3]  recompiles scripts.", "body": [ "script_recompile" ] },
	"script_screen_effect_set_value": { "prefix": "script_screen_effect_set_value", "description": "[1,2,3]  sets a screen effect script value", "body": [ "script_screen_effect_set_value ${1:<short>} ${0:<real>}" ] },
	"script_started": { "prefix": "script_started", "description": "[3]  <boolean>  Returns true if the continuous, dormant or startup script was started.", "body": [ "script_started ${1:<string>}" ] },
	"script_temporary_disable_lightmap_shadows": { "prefix": "script_temporary_disable_lightmap_shadows", "description": "[2]  disable lightmap shadows", "body": [ "script_temporary_disable_lightmap_shadows ${1:<boolean>}" ] },
	"set": { "prefix": "set", "description": "[1,2,3]  <passthrough>  set the value of a global variable.", "body": [ "set ${1:<variable_name>} ${0:<expression>}" ] },
	"set_camera_third_person": { "prefix": "set_camera_third_person", "description": "[3]  <user_index> <third_person (yes/no)> sets user's camera perspective", "body": [ "set_camera_third_person ${1:<long>} ${0:<boolean>}" ] },
	"set_decal_override": { "prefix": "set_decal_override", "description": "[2]  override decal creation with specified tag", "body": [ "set_decal_override ${1:<string>}" ] },
	"set_global_doppler_factor": { "prefix": "set_global_doppler_factor", "description": "[2,3]  new doppler factor: <real>", "body": [ "set_global_doppler_factor ${1:<real>}" ] },
	"set_global_mixbin_headroom": { "prefix": "set_global_mixbin_headroom", "description": "[2,3]  blah", "body": [ "set_global_mixbin_headroom ${1:<long>} ${0:<long>}" ] },
	"set_global_sound_environment": { "prefix": "set_global_sound_environment", "description": "[2,3]  this is your brain on drugs", "body": [ "set_global_sound_environment ${1:<real>} ${2:<real>} ${3:<real>} ${4:<real>} ${5:<long>} ${0:<real>}" ] },
	"set_pc_runtime_language": { "prefix": "set_pc_runtime_language", "description": "[2,3]  sets the pc language from a string", "body": [ "set_pc_runtime_language ${1:<string>}" ] },
	"set_performance_throttle": { "prefix": "set_performance_throttle", "description": "[3]  sets a default value for a performance throttle for a given number of players", "body": [ "set_performance_throttle ${1:<string>} ${2:<long>} ${0:<real>}" ] },
	"set_pitch_rate": { "prefix": "set_pitch_rate", "description": "[1]  sets the yaw rate for the given player number", "body": [ "set_pitch_rate ${1:<short>} ${0:<real>}" ] },
	"set_pjl_effect": { "prefix": "set_pjl_effect", "description": "[2]  override projectile effect creation with specified tag", "body": [ "set_pjl_effect ${1:<effect>}" ] },
	"set_rasterizer_gamma": { "prefix": "set_rasterizer_gamma", "description": "[2]  power", "body": [ "set_rasterizer_gamma ${1:<real>}" ] },
	"set_yaw_rate": { "prefix": "set_yaw_rate", "description": "[1]  sets the yaw rate for the given player number", "body": [ "set_yaw_rate ${1:<short>} ${0:<real>}" ] },
	"shader_predict": { "prefix": "shader_predict", "description": "[2,3]  in: shader name. loads textures necessary for a shader.", "body": [ "shader_predict ${1:<shader>}" ] },
	"show_hud": { "prefix": "show_hud", "description": "[1,2]  <boolean>  shows or hides the hud", "body": [ "show_hud ${1:<boolean>}" ] },
	"show_hud_help_text": { "prefix": "show_hud_help_text", "description": "[1,2]  <boolean>  shows or hides the hud help text", "body": [ "show_hud_help_text ${1:<boolean>}" ] },
	"show_hud_messages": { "prefix": "show_hud_messages", "description": "[2]  <boolean>  shows or hides the hud messages", "body": [ "show_hud_messages ${1:<boolean>}" ] },
	"show_hud_timer": { "prefix": "show_hud_timer", "description": "[1,2]  displays the hud timer", "body": [ "show_hud_timer ${1:<boolean>}" ] },
	"simulation_profiler_detail_level": { "prefix": "simulation_profiler_detail_level", "description": "[3]  <long>  set detail level of simulation profiler capture on the host (affects perf & saved film size).  0-9 are valid, else clamped.", "body": [ "simulation_profiler_detail_level ${1:<long>}" ] },
	"simulation_profiler_enable": { "prefix": "simulation_profiler_enable", "description": "[3]  Turns on the simulation/bandwidth profiler and configures it for high level use (similar to the old screen-text-based bandwidth profiler).", "body": [ "simulation_profiler_enable" ] },
	"simulation_profiler_enable_downstream_processing": { "prefix": "simulation_profiler_enable_downstream_processing", "description": "[3]  <boolean>  enable/disable the processing of downstream data by the simulation profiler database (default is disabled, so if you want to examine downstream, you need to turn this on at display time.  Does not affect recording!)", "body": [ "simulation_profiler_enable_downstream_processing ${1:<boolean>}" ] },
	"sleep": { "prefix": "sleep", "description": "[1,2,3]  pauses execution of this script (or, optionally, another script) for the specified number of ticks @ 30Hz.", "body": [ "sleep ${1:<short>} ${0:[<script>]}" ] },
	"sleep_for_ticks": { "prefix": "sleep_for_ticks", "description": "[3]  pauses execution of this script (or, optionally, another script) for the specified number of ticks.", "body": [ "sleep_for_ticks ${1:<short>} ${0:[<script>]}" ] },
	"sleep_forever": { "prefix": "sleep_forever", "description": "[2,3]  pauses execution of this script (or, optionally, another script) forever.", "body": [ "sleep_forever ${1:[<script>]}" ] },
	"sleep_until": { "prefix": "sleep_until", "description": "[1,2,3]  pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified. Finish sleeping after <ticks> regardless of boolean condition if a third parameter is specified", "body": [ "sleep_until ${1:<boolean>} ${2:[<short>]} ${0:[<long>]}" ] },
	"soft_ceiling_enable": { "prefix": "soft_ceiling_enable", "description": "[3]  turn on or off a soft ceiling", "body": [ "soft_ceiling_enable ${1:<string_id>} ${0:<boolean>}" ] },
	"sound_cache_dump_to_file": { "prefix": "sound_cache_dump_to_file", "description": "[1]  dump dat stuff!", "body": [ "sound_cache_dump_to_file" ] },
	"sound_cache_flush": { "prefix": "sound_cache_flush", "description": "[1,3]  i'm a rebel!", "body": [ "sound_cache_flush" ] },
	"sound_class_debug_sound_start": { "prefix": "sound_class_debug_sound_start", "description": "[2,3]  shows/hides when sounds of sound classes w/ substring start", "body": [ "sound_class_debug_sound_start ${1:<string>} ${0:<boolean>}" ] },
	"sound_class_enable_ducker": { "prefix": "sound_class_enable_ducker", "description": "[2,3]  enables or disables the ducker on all sound classes matching the substring.", "body": [ "sound_class_enable_ducker ${1:<string>} ${0:<boolean>}" ] },
	"sound_class_set_gain": { "prefix": "sound_class_set_gain", "description": "[1,2,3]  changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.", "body": [ "sound_class_set_gain ${1:<string>} ${2:<real>} ${0:<short>}" ] },
	"sound_class_set_gain_db": { "prefix": "sound_class_set_gain_db", "description": "[2,3]  changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.", "body": [ "sound_class_set_gain_db ${1:<string>} ${2:<real>} ${0:<short>}" ] },
	"sound_class_show_channel": { "prefix": "sound_class_show_channel", "description": "[2,3]  shows/hides sound classes w/ substring in debug_sound_channels view", "body": [ "sound_class_show_channel ${1:<string>} ${0:<boolean>}" ] },
	"sound_dump_miles_debug": { "prefix": "sound_dump_miles_debug", "description": "[2]  dump Miles timing info and other goodies", "body": [ "sound_dump_miles_debug" ] },
	"sound_eax_enabled": { "prefix": "sound_eax_enabled", "description": "[1]  <boolean>  Returns true if EAX extensions are enabled", "body": [ "sound_eax_enabled" ] },
	"sound_enable": { "prefix": "sound_enable", "description": "[1]  Enable or disable hardware sound buffers", "body": [ "sound_enable ${1:<boolean>}" ] },
	"sound_enable_eax": { "prefix": "sound_enable_eax", "description": "[1]  Enable or disable EAX extensions", "body": [ "sound_enable_eax ${1:<boolean>}" ] },
	"sound_enable_hardware": { "prefix": "sound_enable_hardware", "description": "[1]  Enable or disable hardware sound buffers", "body": [ "sound_enable_hardware ${1:<boolean>} ${0:<boolean>}" ] },
	"sound_get_effects_gain": { "prefix": "sound_get_effects_gain", "description": "[1]  <real>  Returns the game's effects gain", "body": [ "sound_get_effects_gain" ] },
	"sound_get_gain": { "prefix": "sound_get_gain", "description": "[1]  <real>  absolutely do not use this either", "body": [ "sound_get_gain ${1:<string>}" ] },
	"sound_get_master_gain": { "prefix": "sound_get_master_gain", "description": "[1]  <real>  Returns the game's master gain", "body": [ "sound_get_master_gain" ] },
	"sound_get_music_gain": { "prefix": "sound_get_music_gain", "description": "[1]  <real>  Returns the game's music gain", "body": [ "sound_get_music_gain" ] },
	"sound_get_supplementary_buffers": { "prefix": "sound_get_supplementary_buffers", "description": "[1]  <short>  Get the amount of supplementary buffers", "body": [ "sound_get_supplementary_buffers" ] },
	"sound_impulse_language_time": { "prefix": "sound_impulse_language_time", "description": "[2,3]  <long>  returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.", "body": [ "sound_impulse_language_time ${1:<sound>}" ] },
	"sound_impulse_mark_as_outro": { "prefix": "sound_impulse_mark_as_outro", "description": "[3]  marks a sound as outro (meaning it plays past an unskipped cinematic).", "body": [ "sound_impulse_mark_as_outro ${1:<sound>}" ] },
	"sound_impulse_predict": { "prefix": "sound_impulse_predict", "description": "[1,2,3]  your mom part 2.", "body": [ "sound_impulse_predict ${1:<sound>} ${0:<boolean>}" ] },
	"sound_impulse_start": { "prefix": "sound_impulse_start", "description": "[1,2,3]  plays an impulse sound from the specified source object (or \"none\"), with the specified scale.", "body": [ "sound_impulse_start ${1:<sound>} ${2:<object>} ${0:<real>}" ] },
	"sound_impulse_start_3d": { "prefix": "sound_impulse_start_3d", "description": "[2,3]  <sound> <azimuth> <scale> at the sound's minimum distance", "body": [ "sound_impulse_start_3d ${1:<sound>} ${2:<real>} ${0:<real>}" ] },
	"sound_impulse_start_cinematic": { "prefix": "sound_impulse_start_cinematic", "description": "[2,3]  <sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.", "body": [ "sound_impulse_start_cinematic ${1:<sound>} ${2:<object>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"sound_impulse_start_effect": { "prefix": "sound_impulse_start_effect", "description": "[2,3]  plays an impulse sound from the specified source object (or \"none\"), with the specified scale and effect.", "body": [ "sound_impulse_start_effect ${1:<sound>} ${2:<object>} ${3:<real>} ${0:<string_id>}" ] },
	"sound_impulse_start_naked": { "prefix": "sound_impulse_start_naked", "description": "[3]  <sound> <pitch range name> <permutation index name> through the speakers it was encoded for", "body": [ "sound_impulse_start_naked ${1:<sound>} ${2:<string_id>} ${0:<string_id>}" ] },
	"sound_impulse_start_with_subtitle": { "prefix": "sound_impulse_start_with_subtitle", "description": "[3]  plays an impulse sound from the specified source object (or \"none\"), with the specified scale and displays a subtitle.", "body": [ "sound_impulse_start_with_subtitle ${1:<sound>} ${2:<object>} ${3:<real>} ${4:<string_id>} ${0:<string_id>}" ] },
	"sound_impulse_stop": { "prefix": "sound_impulse_stop", "description": "[1,2,3]  stops the specified impulse sound.", "body": [ "sound_impulse_stop ${1:<sound>}" ] },
	"sound_impulse_time": { "prefix": "sound_impulse_time", "description": "[1,2,3]  <long>  returns the time remaining for the specified impulse sound.", "body": [ "sound_impulse_time ${1:<sound>}" ] },
	"sound_impulse_trigger": { "prefix": "sound_impulse_trigger", "description": "[2,3]  plays an impulse sound from the specified source object (or \"none\"), with the specified scale.", "body": [ "sound_impulse_trigger ${1:<sound>} ${2:<object>} ${3:<real>} ${0:<long>}" ] },
	"sound_loop_spam": { "prefix": "sound_loop_spam", "description": "[2,3]  start all loaded looping sounds", "body": [ "sound_loop_spam" ] },
	"sound_looping_predict": { "prefix": "sound_looping_predict", "description": "[1,2,3]  your mom.", "body": [ "sound_looping_predict ${1:<looping_sound>}" ] },
	"sound_looping_set_alternate": { "prefix": "sound_looping_set_alternate", "description": "[1,2,3]  enables or disables the alternate loop/alternate end for a looping sound.", "body": [ "sound_looping_set_alternate ${1:<looping_sound>} ${0:<boolean>}" ] },
	"sound_looping_set_scale": { "prefix": "sound_looping_set_scale", "description": "[1,2,3]  changes the scale of the sound (which should affect the volume) within the range 0 to 1.", "body": [ "sound_looping_set_scale ${1:<looping_sound>} ${0:<real>}" ] },
	"sound_looping_start": { "prefix": "sound_looping_start", "description": "[1,2,3]  plays a looping sound from the specified source object (or \"none\"), with the specified scale.", "body": [ "sound_looping_start ${1:<looping_sound>} ${2:<object>} ${0:<real>}" ] },
	"sound_looping_start_with_effect": { "prefix": "sound_looping_start_with_effect", "description": "[3]  plays a looping sound from the specified source object (or \"none\"), with the specified scale and playback effect.", "body": [ "sound_looping_start_with_effect ${1:<looping_sound>} ${2:<object>} ${3:<real>} ${0:<string_id>}" ] },
	"sound_looping_stop": { "prefix": "sound_looping_stop", "description": "[1,2,3]  stops the specified looping sound.", "body": [ "sound_looping_stop ${1:<looping_sound>}" ] },
	"sound_looping_stop_immediately": { "prefix": "sound_looping_stop_immediately", "description": "[2,3]  stops the specified looping sound immediately.", "body": [ "sound_looping_stop_immediately ${1:<looping_sound>}" ] },
	"sound_set_effects_gain": { "prefix": "sound_set_effects_gain", "description": "[1]  Set the game's effects gain", "body": [ "sound_set_effects_gain ${1:<real>}" ] },
	"sound_set_env": { "prefix": "sound_set_env", "description": "[1]  Change environment preset", "body": [ "sound_set_env ${1:<short>}" ] },
	"sound_set_factor": { "prefix": "sound_set_factor", "description": "[1]  Set the DSound factor value", "body": [ "sound_set_factor ${1:<real>}" ] },
	"sound_set_gain": { "prefix": "sound_set_gain", "description": "[1]  absolutely do not use this", "body": [ "sound_set_gain ${1:<string>} ${0:<real>}" ] },
	"sound_set_global_effect": { "prefix": "sound_set_global_effect", "description": "[2,3]  bleh", "body": [ "sound_set_global_effect ${1:<string_id>} ${0:<real>}" ] },
	"sound_set_global_effect_scale": { "prefix": "sound_set_global_effect_scale", "description": "[2,3]  more bleh", "body": [ "sound_set_global_effect_scale ${1:<string_id>} ${0:<real>}" ] },
	"sound_set_master_gain": { "prefix": "sound_set_master_gain", "description": "[1]  Set the game's master gain", "body": [ "sound_set_master_gain ${1:<real>}" ] },
	"sound_set_music_gain": { "prefix": "sound_set_music_gain", "description": "[1]  Set the game's music gain", "body": [ "sound_set_music_gain ${1:<real>}" ] },
	"sound_set_rolloff": { "prefix": "sound_set_rolloff", "description": "[1]  Set the DSound rolloff value", "body": [ "sound_set_rolloff ${1:<real>}" ] },
	"sound_set_supplementary_buffers": { "prefix": "sound_set_supplementary_buffers", "description": "[1]  Set the amount of supplementary buffers", "body": [ "sound_set_supplementary_buffers ${1:<short>} ${0:<boolean>}" ] },
	"sound_set_tag_parameter_unsafe": { "prefix": "sound_set_tag_parameter_unsafe", "description": "[2,3]  this is the second sign of the coming of the antichrist", "body": [ "sound_set_tag_parameter_unsafe ${1:<string>} ${2:<string>} ${3:<long>} ${4:<long>} ${5:<long>} ${6:<real>} ${7:<real>} ${0:<real>}" ] },
	"sound_set_trace_callback_level": { "prefix": "sound_set_trace_callback_level", "description": "[2]  set Miles tracing callback depth", "body": [ "sound_set_trace_callback_level ${1:<long>}" ] },
	"sound_suppress_ambience_update_on_revert": { "prefix": "sound_suppress_ambience_update_on_revert", "description": "[2,3]  call this when transitioning between two cinematics so ambience won't fade in between the skips", "body": [ "sound_suppress_ambience_update_on_revert" ] },
	"ssao_enable": { "prefix": "ssao_enable", "description": "[3]  turn on/off ssao", "body": [ "ssao_enable ${1:<short>}" ] },
	"ssao_intensity": { "prefix": "ssao_intensity", "description": "[3]  set ssao intensity (1.0 is default)", "body": [ "ssao_intensity ${1:<real>}" ] },
	"ssao_radius": { "prefix": "ssao_radius", "description": "[3]  set ssao radius (0.75 is default)", "body": [ "ssao_radius ${1:<real>}" ] },
	"ssao_sampleZThreshold": { "prefix": "ssao_sampleZThreshold", "description": "[3]  set ssao sample z threshold (0.5 is default)", "body": [ "ssao_sampleZThreshold ${1:<real>}" ] },
	"status": { "prefix": "status", "description": "[3]  prints the value of all global status variables.", "body": [ "status" ] },
	"status_line_dump": { "prefix": "status_line_dump", "description": "[3]  dumps active status_lines to system_log.txt", "body": [ "status_line_dump" ] },
	"status_lines_disable": { "prefix": "status_lines_disable", "description": "[3]  disables status_lines that were initialized with identifiers that match the input substring", "body": [ "status_lines_disable ${1:<string>}" ] },
	"status_lines_enable": { "prefix": "status_lines_enable", "description": "[3]  enables status_lines that were initialized with identifiers that match the input substring", "body": [ "status_lines_enable ${1:<string>}" ] },
	"stop_bink_movie": { "prefix": "stop_bink_movie", "description": "[3]  Stops all bink movie playback", "body": [ "stop_bink_movie" ] },
	"string_id_name": { "prefix": "string_id_name", "description": "[3]  prints the name of the string id to the console", "body": [ "string_id_name ${1:<long>}" ] },
	"structure_bsp_index": { "prefix": "structure_bsp_index", "description": "[1,2]  <short>  returns the current structure bsp index", "body": [ "structure_bsp_index" ] },
	"structure_lens_flares_place": { "prefix": "structure_lens_flares_place", "description": "[1]  places lens flares in the structure bsp", "body": [ "structure_lens_flares_place" ] },
	"sv_map": { "prefix": "sv_map", "description": "[1]  ", "body": [ "sv_map ${1:<string>} ${0:<string>}" ] },
	"switch_bsp": { "prefix": "switch_bsp", "description": "[1,2,3]  switches to a different zone set", "body": [ "switch_bsp ${1:<short>}" ] },
	"switch_bsp_by_name": { "prefix": "switch_bsp_by_name", "description": "[2]  leaves your condom on and changes to a different structure bsp by name", "body": [ "switch_bsp_by_name ${1:<structure_bsp>}" ] },
	"switch_map_and_zone_set": { "prefix": "switch_map_and_zone_set", "description": "[3]  switches to a different scenario and zone set", "body": [ "switch_map_and_zone_set ${1:<string>} ${0:<long>}" ] },
	"switch_zone_set": { "prefix": "switch_zone_set", "description": "[3]  switches to a different zone set", "body": [ "switch_zone_set ${1:<zone_set>}" ] },
	"sys_info": { "prefix": "sys_info", "description": "[3]  dump cpu, gpu and system information", "body": [ "sys_info" ] },
	"tag_file_set_backend": { "prefix": "tag_file_set_backend", "description": "[3]  override the tag file system backend", "body": [ "tag_file_set_backend ${1:<string>}" ] },
	"tag_is_active": { "prefix": "tag_is_active", "description": "[3]  <boolean>  returns true/false if you can create this tag with the active zones", "body": [ "tag_is_active ${1:<any_tag_not_resolving>}" ] },
	"tag_load_force": { "prefix": "tag_load_force", "description": "[3]  call tag_load", "body": [ "tag_load_force ${1:<string>}" ] },
	"tag_reload_force": { "prefix": "tag_reload_force", "description": "[3]  rather than force a painful xsync to test xsync, allow me to fake a tag_reload", "body": [ "tag_reload_force ${1:<string>}" ] },
	"tag_resources_enable_fast_prediction": { "prefix": "tag_resources_enable_fast_prediction", "description": "[3]  turns on/off faster prediction, in case I messed up something", "body": [ "tag_resources_enable_fast_prediction ${1:<boolean>}" ] },
	"tag_resources_enable_optional_caching": { "prefix": "tag_resources_enable_optional_caching", "description": "[3]  turns on/off optional resource prediction", "body": [ "tag_resources_enable_optional_caching ${1:<boolean>}" ] },
	"tag_resources_flush_optional": { "prefix": "tag_resources_flush_optional", "description": "[3]  flushes optional resources", "body": [ "tag_resources_flush_optional" ] },
	"tag_resources_set_demand_throttle_to_io": { "prefix": "tag_resources_set_demand_throttle_to_io", "description": "[3]  turns on/off demand throttling based on io", "body": [ "tag_resources_set_demand_throttle_to_io ${1:<boolean>}" ] },
	"tag_resources_set_incremental_publish": { "prefix": "tag_resources_set_incremental_publish", "description": "[3]  turns on/off incremental resource publish (prediction)", "body": [ "tag_resources_set_incremental_publish ${1:<boolean>}" ] },
	"tag_resources_set_per_frame_publish": { "prefix": "tag_resources_set_per_frame_publish", "description": "[3]  turns on/off per frame resource publish (stress testing)", "body": [ "tag_resources_set_per_frame_publish ${1:<boolean>}" ] },
	"tag_resources_validate_all_pages": { "prefix": "tag_resources_validate_all_pages", "description": "[3]  resource validation every main_loop_body call", "body": [ "tag_resources_validate_all_pages ${1:<boolean>}" ] },
	"tag_unload_force": { "prefix": "tag_unload_force", "description": "[3]  call tag_unload", "body": [ "tag_unload_force ${1:<string>}" ] },
	"tags_verify_all": { "prefix": "tags_verify_all", "description": "[2,3]  verifies usage of infidel fields is correct", "body": [ "tags_verify_all" ] },
	"terminal_is_being_read": { "prefix": "terminal_is_being_read", "description": "[3]  <boolean>  returns whether or not a terminal is currently being read", "body": [ "terminal_is_being_read" ] },
	"terminal_was_accessed": { "prefix": "terminal_was_accessed", "description": "[3]  <boolean>  returns whether or not the given terminal was accessed", "body": [ "terminal_was_accessed ${1:<object>}" ] },
	"terminal_was_completed": { "prefix": "terminal_was_completed", "description": "[3]  <boolean>  returns whether or not the given terminal was read to completion", "body": [ "terminal_was_completed ${1:<object>}" ] },
	"test_auto_get_screen_widgets": { "prefix": "test_auto_get_screen_widgets", "description": "[3]  <arbitrary int> <screen index> lists widgets in a screen", "body": [ "test_auto_get_screen_widgets ${1:<long>} ${0:<long>}" ] },
	"test_auto_get_screens": { "prefix": "test_auto_get_screens", "description": "[3]  <arbitrary int> list the current gui screens", "body": [ "test_auto_get_screens ${1:<long>}" ] },
	"test_auto_screen_get_data": { "prefix": "test_auto_screen_get_data", "description": "[3]  <arbitrary int> <screen index> <datasource string id> <datasource column string id> lists data from a datasource", "body": [ "test_auto_screen_get_data ${1:<long>} ${2:<long>} ${3:<string_id>} ${0:<string_id>}" ] },
	"test_auto_screen_get_data_columns": { "prefix": "test_auto_screen_get_data_columns", "description": "[3]  <arbitrary int> <screen index> <datasource string id> lists columns that make up this datasource", "body": [ "test_auto_screen_get_data_columns ${1:<long>} ${2:<long>} ${0:<string_id>}" ] },
	"test_auto_screen_get_datasources": { "prefix": "test_auto_screen_get_datasources", "description": "[3]  <arbitrary int> <screen index> lists screen datasources", "body": [ "test_auto_screen_get_datasources ${1:<long>} ${0:<long>}" ] },
	"test_auto_screen_invoke_list_item_by_handle": { "prefix": "test_auto_screen_invoke_list_item_by_handle", "description": "[3]  <arbitrary int> <screen index> <list string id> <element handle> triggers the list item specified by the element handle", "body": [ "test_auto_screen_invoke_list_item_by_handle ${1:<long>} ${2:<long>} ${3:<string_id>} ${0:<long>}" ] },
	"test_auto_screen_invoke_list_item_by_name": { "prefix": "test_auto_screen_invoke_list_item_by_name", "description": "[3]  <arbitrary int> <screen index> <list string id> <datasource column string id> <column value string id> triggers the list item who's column's value matches the specified one", "body": [ "test_auto_screen_invoke_list_item_by_name ${1:<long>} ${2:<long>} ${3:<string_id>} ${4:<string_id>} ${0:<string_id>}" ] },
	"test_auto_screen_invoke_list_item_by_text": { "prefix": "test_auto_screen_invoke_list_item_by_text", "description": "[3]  <arbitrary int> <screen index> <list string id> <datasource column string id> <column value string id> triggers the list item who's column's value matches the specified one", "body": [ "test_auto_screen_invoke_list_item_by_text ${1:<long>} ${2:<long>} ${3:<string_id>} ${4:<string_id>} ${0:<string>}" ] },
	"test_auto_screen_send_button_press": { "prefix": "test_auto_screen_send_button_press", "description": "[3]  <arbitrary int> <screen index> <button name> sends the button press to the screen", "body": [ "test_auto_screen_send_button_press ${1:<long>} ${2:<long>} ${0:<string>}" ] },
	"test_cheating_detect": { "prefix": "test_cheating_detect", "description": "[2]  tells our servers that the local box is cheating", "body": [ "test_cheating_detect" ] },
	"test_create_content_item_screenshot": { "prefix": "test_create_content_item_screenshot", "description": "[3]  creates a screenshot (which isn't actually viewable)", "body": [ "test_create_content_item_screenshot" ] },
	"test_create_content_item_slayer": { "prefix": "test_create_content_item_slayer", "description": "[3]  creates a slayer variant", "body": [ "test_create_content_item_slayer" ] },
	"test_download_storage_file": { "prefix": "test_download_storage_file", "description": "[3]  <url> <filename> downloads a file from LSP to the client", "body": [ "test_download_storage_file ${1:<string>} ${0:<string>}" ] },
	"test_fragment_utility_drive": { "prefix": "test_fragment_utility_drive", "description": "[3]  <file_count> <growth_repetitions> <growth_size> writes files of varying sizes to the utiltiy drive in an effort to fragment it really badly", "body": [ "test_fragment_utility_drive ${1:<long>} ${2:<long>} ${0:<long>}" ] },
	"test_game_results_load_from_file": { "prefix": "test_game_results_load_from_file", "description": "[3]  <filename> load game results into memory for use in the carnage report.  the format may change build to build causing this to fail or weird results to come up.", "body": [ "test_game_results_load_from_file ${1:<string>}" ] },
	"test_game_results_save_to_file": { "prefix": "test_game_results_save_to_file", "description": "[3]  <filename> save game results to a file.", "body": [ "test_game_results_save_to_file ${1:<string>}" ] },
	"test_get_squad_session_id": { "prefix": "test_get_squad_session_id", "description": "[3]  get the current squad session id", "body": [ "test_get_squad_session_id" ] },
	"test_invite_friend": { "prefix": "test_invite_friend", "description": "[3]  shows the guide send friend invite ui from the current controller to the specified xuid", "body": [ "test_invite_friend ${1:<long>} ${0:<string>}" ] },
	"test_memory_allocators": { "prefix": "test_memory_allocators", "description": "[3]  performs tests on different memory allocators", "body": [ "test_memory_allocators ${1:<long>} ${2:<short>} ${3:<short>} ${4:<short>} ${0:<long>}" ] },
	"test_network_storage_simulate": { "prefix": "test_network_storage_simulate", "description": "[2]  <hopper/ban/motd/network> <none/download/fail>", "body": [ "test_network_storage_simulate ${1:<string>} ${0:<string>}" ] },
	"test_roster_load_from_file": { "prefix": "test_roster_load_from_file", "description": "[3]  <filename> load roster into memory.  the format may change build to build causing this to fail or weird results to come up.", "body": [ "test_roster_load_from_file ${1:<string>}" ] },
	"test_roster_save_to_file": { "prefix": "test_roster_save_to_file", "description": "[3]  <filename> save roster to a file.", "body": [ "test_roster_save_to_file ${1:<string>}" ] },
	"test_sapien_crash": { "prefix": "test_sapien_crash", "description": "[3]  NULL", "body": [ "test_sapien_crash" ] },
	"test_show_are_users_friends": { "prefix": "test_show_are_users_friends", "description": "[3]  prints whether the current controller and specified xuid are friends as automation events", "body": [ "test_show_are_users_friends ${1:<long>} ${0:<string>}" ] },
	"test_show_guide_status": { "prefix": "test_show_guide_status", "description": "[3]  prints the guide status as automation events.", "body": [ "test_show_guide_status" ] },
	"test_show_users_xuids": { "prefix": "test_show_users_xuids", "description": "[3]  prints the signed in users' xuids as automation events.", "body": [ "test_show_users_xuids" ] },
	"test_telnet_status_enable": { "prefix": "test_telnet_status_enable", "description": "[2]  enable/disable status events being sent to the telnet console", "body": [ "test_telnet_status_enable ${1:<boolean>}" ] },
	"test_telnet_status_interval": { "prefix": "test_telnet_status_interval", "description": "[2]  sets the interval that status events are sent to the telnet console", "body": [ "test_telnet_status_interval ${1:<long>}" ] },
	"test_web_event_local_cheater": { "prefix": "test_web_event_local_cheater", "description": "[2]  claims that the local box is a cheater", "body": [ "test_web_event_local_cheater" ] },
	"test_web_event_remote_cheater": { "prefix": "test_web_event_remote_cheater", "description": "[2]  <gamertag> claims that a remote player is a cheater", "body": [ "test_web_event_remote_cheater ${1:<string>}" ] },
	"test_web_map_snapshot": { "prefix": "test_web_map_snapshot", "description": "[2]  takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt", "body": [ "test_web_map_snapshot ${1:<string>}" ] },
	"test_xcr_monkey_enable": { "prefix": "test_xcr_monkey_enable", "description": "[2,3]  enable/disable controller monkeys for all in game players", "body": [ "test_xcr_monkey_enable ${1:<boolean>}" ] },
	"TestPrintBool": { "prefix": "TestPrintBool", "description": "[1,2,3]  Prints the specified boolean with the format '<string> = '<boolean>' to the Shell.", "body": [ "TestPrintBool ${1:<string>} ${0:<boolean>}" ] },
	"TestPrintReal": { "prefix": "TestPrintReal", "description": "[1,2,3]  Prints the specified boolean with the format '<string> = '<real>' to the Shell.", "body": [ "TestPrintReal ${1:<string>} ${0:<real>}" ] },
	"texture_cache_flush": { "prefix": "texture_cache_flush", "description": "[3]  don't make me kick your ass", "body": [ "texture_cache_flush" ] },
	"texture_cache_test_malloc": { "prefix": "texture_cache_test_malloc", "description": "[3]  ", "body": [ "texture_cache_test_malloc" ] },
	"texture_camera_attach_to_object": { "prefix": "texture_camera_attach_to_object", "description": "[3]  attaches the render texture camera to a given object marker", "body": [ "texture_camera_attach_to_object ${1:<object>} ${0:<string_id>}" ] },
	"texture_camera_bink": { "prefix": "texture_camera_bink", "description": "[3]  turns on the render texture camera and renders a bink to it", "body": [ "texture_camera_bink" ] },
	"texture_camera_enable_dynamic_lights": { "prefix": "texture_camera_enable_dynamic_lights", "description": "[3]  toggle rendering of dynamic lights in the texture camera", "body": [ "texture_camera_enable_dynamic_lights ${1:<boolean>}" ] },
	"texture_camera_off": { "prefix": "texture_camera_off", "description": "[2,3]  turns off the render texture camera", "body": [ "texture_camera_off" ] },
	"texture_camera_on": { "prefix": "texture_camera_on", "description": "[3]  turns on the render texture camera", "body": [ "texture_camera_on" ] },
	"texture_camera_position_world_offset": { "prefix": "texture_camera_position_world_offset", "description": "[3]  adds a worldspace offset to the current texture camera position", "body": [ "texture_camera_position_world_offset ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"texture_camera_render_mode": { "prefix": "texture_camera_render_mode", "description": "[3]  switches the texture camera render mode", "body": [ "texture_camera_render_mode ${1:<long>}" ] },
	"texture_camera_set_aspect_ratio": { "prefix": "texture_camera_set_aspect_ratio", "description": "[3]  sets the texture camera aspet ratio", "body": [ "texture_camera_set_aspect_ratio ${1:<real>}" ] },
	"texture_camera_set_fov": { "prefix": "texture_camera_set_fov", "description": "[3]  sets the field of view on the texture camera, in degrees", "body": [ "texture_camera_set_fov ${1:<real>}" ] },
	"texture_camera_set_fov_frame_target": { "prefix": "texture_camera_set_fov_frame_target", "description": "[3]  zooms the field of view to frame the target, with target zoom factor to zoom closer", "body": [ "texture_camera_set_fov_frame_target ${1:<real>}" ] },
	"texture_camera_set_object_marker": { "prefix": "texture_camera_set_object_marker", "description": "[2,3]  sets the render texture camera to a given object marker", "body": [ "texture_camera_set_object_marker ${1:<object>} ${2:<string_id>} ${0:<real>}" ] },
	"texture_camera_set_position": { "prefix": "texture_camera_set_position", "description": "[3]  sets the render texture camera position", "body": [ "texture_camera_set_position ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"texture_camera_set_resolution": { "prefix": "texture_camera_set_resolution", "description": "[3]  sets the texture camera render resolution", "body": [ "texture_camera_set_resolution ${1:<long>} ${0:<long>}" ] },
	"texture_camera_set_target": { "prefix": "texture_camera_set_target", "description": "[3]  sets the render texture camera target", "body": [ "texture_camera_set_target ${1:<real>} ${2:<real>} ${0:<real>}" ] },
	"texture_camera_target_object": { "prefix": "texture_camera_target_object", "description": "[3]  targets the render texture camera to view a given object marker", "body": [ "texture_camera_target_object ${1:<object>} ${0:<string_id>}" ] },
	"tiling_current": { "prefix": "tiling_current", "description": "[3]  <long>  returns the actual tiling configuration (could have been overridden from the requested configuration)", "body": [ "tiling_current" ] },
	"time_code_reset": { "prefix": "time_code_reset", "description": "[1,3]  resets the time code timer", "body": [ "time_code_reset" ] },
	"time_code_show": { "prefix": "time_code_show", "description": "[1,3]  shows the time code timer", "body": [ "time_code_show ${1:<boolean>}" ] },
	"time_code_start": { "prefix": "time_code_start", "description": "[1,3]  starts/stops the time code timer", "body": [ "time_code_start ${1:<boolean>}" ] },
	"trace_next_frame": { "prefix": "trace_next_frame", "description": "[3]  creates a tracedump of the next frame", "body": [ "trace_next_frame ${1:<long>}" ] },
	"trace_next_frame_to_file": { "prefix": "trace_next_frame_to_file", "description": "[3]  creates a tracedump of the next frame in a specific file", "body": [ "trace_next_frame_to_file ${1:<long>} ${0:<string>}" ] },
	"trace_tick": { "prefix": "trace_tick", "description": "[3]  creates a tracedump of a specific game tick", "body": [ "trace_tick ${1:<long>}" ] },
	"ui_debug_element_bounds": { "prefix": "ui_debug_element_bounds", "description": "[2,3]  toggle rendering of widget tag block bounds", "body": [ "ui_debug_element_bounds ${1:<boolean>}" ] },
	"ui_debug_load_main_menu": { "prefix": "ui_debug_load_main_menu", "description": "[2,3]  loads the main menu screen", "body": [ "ui_debug_load_main_menu" ] },
	"ui_debug_screen_tag": { "prefix": "ui_debug_screen_tag", "description": "[2]  test a ui screen", "body": [ "ui_debug_screen_tag ${1:<string>}" ] },
	"ui_debug_show_current_screen_tag": { "prefix": "ui_debug_show_current_screen_tag", "description": "[2]  displays the current tag path on a specified channel", "body": [ "ui_debug_show_current_screen_tag ${1:<string>}" ] },
	"ui_debug_show_screen_tag_path": { "prefix": "ui_debug_show_screen_tag_path", "description": "[2]  display tag path of screens as they load", "body": [ "ui_debug_show_screen_tag_path ${1:<boolean>}" ] },
	"ui_debug_show_title_safe_bounds": { "prefix": "ui_debug_show_title_safe_bounds", "description": "[2,3]  toggle display of title safe boundary", "body": [ "ui_debug_show_title_safe_bounds ${1:<boolean>}" ] },
	"ui_debug_text_bounds": { "prefix": "ui_debug_text_bounds", "description": "[2,3]  toggle rendering of ui text boundaries", "body": [ "ui_debug_text_bounds ${1:<boolean>}" ] },
	"ui_debug_text_font": { "prefix": "ui_debug_text_font", "description": "[3]  toggle display of ui text font", "body": [ "ui_debug_text_font ${1:<boolean>}" ] },
	"ui_memory_dump": { "prefix": "ui_memory_dump", "description": "[2,3]  dump the UI memory tracked allocations to a specified file", "body": [ "ui_memory_dump ${1:<string>}" ] },
	"ui_set_automation_desired_controller_player_profile": { "prefix": "ui_set_automation_desired_controller_player_profile", "description": "[2]  set desired player profile and gamertag for a controller", "body": [ "ui_set_automation_desired_controller_player_profile ${1:<short>} ${2:<string>} ${0:<string>}" ] },
	"ui_set_automation_desired_controller_team": { "prefix": "ui_set_automation_desired_controller_team", "description": "[2]  set desired mp team for a controller", "body": [ "ui_set_automation_desired_controller_team ${1:<short>} ${0:<short>}" ] },
	"ui_set_automation_desired_desired_network_game_player_count": { "prefix": "ui_set_automation_desired_desired_network_game_player_count", "description": "[2]  set ui / mp automation desired network game player count", "body": [ "ui_set_automation_desired_desired_network_game_player_count ${1:<short>}" ] },
	"ui_set_automation_desired_local_user_count": { "prefix": "ui_set_automation_desired_local_user_count", "description": "[2]  set ui / mp automation desired local user count", "body": [ "ui_set_automation_desired_local_user_count ${1:<short>}" ] },
	"ui_set_automation_desired_network_game_length_seconds": { "prefix": "ui_set_automation_desired_network_game_length_seconds", "description": "[2]  set ui / mp automation desired game time length", "body": [ "ui_set_automation_desired_network_game_length_seconds ${1:<long>}" ] },
	"ui_set_automation_desired_network_session_name": { "prefix": "ui_set_automation_desired_network_session_name", "description": "[2]  set ui / mp automation desired session name", "body": [ "ui_set_automation_desired_network_session_name ${1:<string>}" ] },
	"ui_set_automation_hopper_type": { "prefix": "ui_set_automation_hopper_type", "description": "[2]  set ui / mp automation hopper", "body": [ "ui_set_automation_hopper_type ${1:<short>}" ] },
	"ui_set_automation_mode": { "prefix": "ui_set_automation_mode", "description": "[2]  set ui automation mode", "body": [ "ui_set_automation_mode ${1:<string>}" ] },
	"ui_set_automation_variant_type_and_map": { "prefix": "ui_set_automation_variant_type_and_map", "description": "[2]  set ui / mp automation variant and mp map", "body": [ "ui_set_automation_variant_type_and_map ${1:<short>} ${0:<long>}" ] },
	"ui_set_beta": { "prefix": "ui_set_beta", "description": "[2]  set ui beta testing on/off", "body": [ "ui_set_beta ${1:<boolean>}" ] },
	"ui_set_is_blue": { "prefix": "ui_set_is_blue", "description": "[3]  fool the system into thinking it is or is not blue disk", "body": [ "ui_set_is_blue ${1:<boolean>}" ] },
	"ui_test_confirmation": { "prefix": "ui_test_confirmation", "description": "[2]  test confirmation dialog display", "body": [ "ui_test_confirmation ${1:<short>}" ] },
	"ui_test_error_ok": { "prefix": "ui_test_error_ok", "description": "[2]  test error code display w/ ok dialog", "body": [ "ui_test_error_ok ${1:<short>}" ] },
	"ui_test_error_ok_cancel": { "prefix": "ui_test_error_ok_cancel", "description": "[2]  test error code display w/ ok-cancel dialog", "body": [ "ui_test_error_ok_cancel ${1:<short>}" ] },
	"ui_time_scale_step": { "prefix": "ui_time_scale_step", "description": "[3]  move the ui time forward by a specified amount on next tick", "body": [ "ui_time_scale_step ${1:<real>}" ] },
	"ui_transition_out_console_window": { "prefix": "ui_transition_out_console_window", "description": "[2]  transition out any ui on the console window", "body": [ "ui_transition_out_console_window" ] },
	"ui_widget_show_path": { "prefix": "ui_widget_show_path", "description": "[1]  blah blah", "body": [ "ui_widget_show_path ${1:<boolean>}" ] },
	"unbind": { "prefix": "unbind", "description": "[1]  unbinds an input device/button combination", "body": [ "unbind ${1:<string>} ${0:<string>}" ] },
	"unit": { "prefix": "unit", "description": "[1,2,3]  <unit>  converts an object to a unit.", "body": [ "unit ${1:<object>}" ] },
	"unit_add_equipment": { "prefix": "unit_add_equipment", "description": "[2,3]  adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).", "body": [ "unit_add_equipment ${1:<unit>} ${2:<starting_profile>} ${3:<boolean>} ${0:<boolean>}" ] },
	"unit_aim_without_turning": { "prefix": "unit_aim_without_turning", "description": "[1,2,3]  allows a unit to aim in place without turning", "body": [ "unit_aim_without_turning ${1:<unit>} ${0:<boolean>}" ] },
	"unit_animation_forced_seat": { "prefix": "unit_animation_forced_seat", "description": "[2,3]  all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')", "body": [ "unit_animation_forced_seat ${1:<string_id>}" ] },
	"unit_board_vehicle": { "prefix": "unit_board_vehicle", "description": "[2,3]  Causes the given unit to attempt to board the named seat", "body": [ "unit_board_vehicle ${1:<unit>} ${0:<string_id>}" ] },
	"unit_can_blink": { "prefix": "unit_can_blink", "description": "[1,2,3]  allows a unit to blink or not (units never blink when they are dead)", "body": [ "unit_can_blink ${1:<unit>} ${0:<boolean>}" ] },
	"unit_close": { "prefix": "unit_close", "description": "[1,2,3]  closes the hatches on a given unit", "body": [ "unit_close ${1:<unit>}" ] },
	"unit_custom_animation_at_frame": { "prefix": "unit_custom_animation_at_frame", "description": "[1,2,3]  <boolean>  starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)", "body": [ "unit_custom_animation_at_frame ${1:<unit>} ${2:<animation_graph>} ${3:<string>} ${4:<boolean>} ${0:<short>}" ] },
	"unit_custom_animation_relative_at_frame": { "prefix": "unit_custom_animation_relative_at_frame", "description": "[3]  <boolean>  starts a custom animation playing on a unit relative to a specific cutscene flag at a specific frame index(interpolates into animation if next to last parameter is TRUE)", "body": [ "unit_custom_animation_relative_at_frame ${1:<unit>} ${2:<animation_graph>} ${3:<string_id>} ${4:<string_id>} ${5:<boolean>} ${0:<short>}" ] },
	"unit_doesnt_drop_items": { "prefix": "unit_doesnt_drop_items", "description": "[1,2,3]  prevents any of the given units from dropping weapons or grenades when they die", "body": [ "unit_doesnt_drop_items ${1:<object_list>}" ] },
	"unit_drop_support_weapon": { "prefix": "unit_drop_support_weapon", "description": "[3]  forces the given unit to drop its support weapon, if it is holding one", "body": [ "unit_drop_support_weapon ${1:<unit>}" ] },
	"unit_enable_eye_tracking": { "prefix": "unit_enable_eye_tracking", "description": "[2,3]  enable/disable eye aiming on a unit", "body": [ "unit_enable_eye_tracking ${1:<unit>} ${0:<boolean>}" ] },
	"unit_enter_vehicle": { "prefix": "unit_enter_vehicle", "description": "[1,2,3]  puts the specified unit in the specified vehicle (in the named seat)", "body": [ "unit_enter_vehicle ${1:<unit>} ${2:<vehicle>} ${0:<string>}" ] },
	"unit_exit_vehicle": { "prefix": "unit_exit_vehicle", "description": "[1,2,3]  makes a unit exit its vehicle", "body": [ "unit_exit_vehicle ${1:<unit>}" ] },
	"unit_falling_damage_disable": { "prefix": "unit_falling_damage_disable", "description": "[3]  disables falling damage on unit", "body": [ "unit_falling_damage_disable ${1:<unit>} ${0:<boolean>}" ] },
	"unit_get_current_flashlight_state": { "prefix": "unit_get_current_flashlight_state", "description": "[1]  <boolean>  gets the unit's current flashlight state", "body": [ "unit_get_current_flashlight_state ${1:<unit>}" ] },
	"unit_get_custom_animation_time": { "prefix": "unit_get_custom_animation_time", "description": "[1,2,3]  <short>  returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).", "body": [ "unit_get_custom_animation_time ${1:<unit>}" ] },
	"unit_get_enterable_by_player": { "prefix": "unit_get_enterable_by_player", "description": "[2,3]  <boolean>  returns true if a player may enter the vehicle", "body": [ "unit_get_enterable_by_player ${1:<unit>}" ] },
	"unit_get_health": { "prefix": "unit_get_health", "description": "[1,2,3]  <real>  returns the health [0,1] of the unit, returns -1 if the unit does not exist", "body": [ "unit_get_health ${1:<unit>}" ] },
	"unit_get_primary_weapon": { "prefix": "unit_get_primary_weapon", "description": "[3]  <weapon>  return the primary weapon of the specified unit", "body": [ "unit_get_primary_weapon ${1:<unit>}" ] },
	"unit_get_shield": { "prefix": "unit_get_shield", "description": "[1,2,3]  <real>  returns the shield [0,1] of the unit, returns -1 if the unit does not exist", "body": [ "unit_get_shield ${1:<unit>}" ] },
	"unit_get_team_index": { "prefix": "unit_get_team_index", "description": "[2,3]  <short>  returns the team index of the unit, returns -1 if the unit does not have a team", "body": [ "unit_get_team_index ${1:<unit>}" ] },
	"unit_get_total_grenade_count": { "prefix": "unit_get_total_grenade_count", "description": "[1,2,3]  <short>  returns the total number of grenades for the given unit, 0 if it does not exist", "body": [ "unit_get_total_grenade_count ${1:<unit>}" ] },
	"unit_has_any_equipment": { "prefix": "unit_has_any_equipment", "description": "[3]  <boolean>  returns TRUE if the <unit> has any equipment, FALSE otherwise", "body": [ "unit_has_any_equipment ${1:<unit>}" ] },
	"unit_has_equipment": { "prefix": "unit_has_equipment", "description": "[3]  <boolean>  returns TRUE if the <unit> has equipment <object> , FALSE otherwise", "body": [ "unit_has_equipment ${1:<unit>} ${0:<object_definition>}" ] },
	"unit_has_weapon": { "prefix": "unit_has_weapon", "description": "[1,2,3]  <boolean>  returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise", "body": [ "unit_has_weapon ${1:<unit>} ${0:<object_definition>}" ] },
	"unit_has_weapon_readied": { "prefix": "unit_has_weapon_readied", "description": "[1,2,3]  <boolean>  returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise", "body": [ "unit_has_weapon_readied ${1:<unit>} ${0:<object_definition>}" ] },
	"unit_impervious": { "prefix": "unit_impervious", "description": "[1,2,3]  prevents any of the given units from being knocked around or playing ping animations", "body": [ "unit_impervious ${1:<object_list>} ${0:<boolean>}" ] },
	"unit_in_vehicle": { "prefix": "unit_in_vehicle", "description": "[2,3]  <boolean>  returns true if the given unit is seated on a parent unit", "body": [ "unit_in_vehicle ${1:<unit>}" ] },
	"unit_is_emitting": { "prefix": "unit_is_emitting", "description": "[2,3]  <boolean>  returns whether or not the given unit is current emitting an ai", "body": [ "unit_is_emitting ${1:<unit>}" ] },
	"unit_is_playing_custom_animation": { "prefix": "unit_is_playing_custom_animation", "description": "[1,2,3]  <boolean>  returns TRUE if the given unit is still playing a custom animation", "body": [ "unit_is_playing_custom_animation ${1:<unit>}" ] },
	"unit_is_playing_custom_first_person_animation": { "prefix": "unit_is_playing_custom_first_person_animation", "description": "[3]  <boolean>  returns TRUE if the given unit is still playing a custom animation in first person", "body": [ "unit_is_playing_custom_first_person_animation ${1:<unit>}" ] },
	"unit_kill": { "prefix": "unit_kill", "description": "[1,2,3]  kills a given unit, no saving throw", "body": [ "unit_kill ${1:<unit>}" ] },
	"unit_kill_silent": { "prefix": "unit_kill_silent", "description": "[1,2,3]  kills a given unit silently (doesn't make them play their normal death animation or sound)", "body": [ "unit_kill_silent ${1:<unit>}" ] },
	"unit_limit_lipsync_to_mouth_only": { "prefix": "unit_limit_lipsync_to_mouth_only", "description": "[3]  cinematic lipsync means you can't use all the facial bones, just the mouth", "body": [ "unit_limit_lipsync_to_mouth_only ${1:<unit>} ${0:<boolean>}" ] },
	"unit_lower_weapon": { "prefix": "unit_lower_weapon", "description": "[2,3]  lower the units weapon over x ticks", "body": [ "unit_lower_weapon ${1:<unit>} ${0:<short>}" ] },
	"unit_only_takes_damage_from_players_team": { "prefix": "unit_only_takes_damage_from_players_team", "description": "[2,3]  used for the tartarus boss fight", "body": [ "unit_only_takes_damage_from_players_team ${1:<unit>} ${0:<boolean>}" ] },
	"unit_open": { "prefix": "unit_open", "description": "[1,2,3]  opens the hatches on the given unit", "body": [ "unit_open ${1:<unit>}" ] },
	"unit_play_random_ping": { "prefix": "unit_play_random_ping", "description": "[3]  plays a random ping on the unit", "body": [ "unit_play_random_ping ${1:<unit>}" ] },
	"unit_raise_weapon": { "prefix": "unit_raise_weapon", "description": "[2,3]  raises the units weapon over x ticks", "body": [ "unit_raise_weapon ${1:<unit>} ${0:<short>}" ] },
	"unit_set_active_camo": { "prefix": "unit_set_active_camo", "description": "[2,3]  enable or disable active camo for the given unit over the specified number of seconds", "body": [ "unit_set_active_camo ${1:<unit>} ${2:<boolean>} ${0:<real>}" ] },
	"unit_set_actively_controlled": { "prefix": "unit_set_actively_controlled", "description": "[2,3]  sets unit's actively controlled flag", "body": [ "unit_set_actively_controlled ${1:<unit>} ${0:<boolean>}" ] },
	"unit_set_animation_mode": { "prefix": "unit_set_animation_mode", "description": "[2,3]  this unit will assume the named animation mode", "body": [ "unit_set_animation_mode ${1:<unit>} ${0:<string_id>}" ] },
	"unit_set_current_vitality": { "prefix": "unit_set_current_vitality", "description": "[1,2,3]  sets a unit's current body and shield vitality", "body": [ "unit_set_current_vitality ${1:<unit>} ${2:<real>} ${0:<real>}" ] },
	"unit_set_desired_flashlight_state": { "prefix": "unit_set_desired_flashlight_state", "description": "[1]  sets the unit's desired flashlight state", "body": [ "unit_set_desired_flashlight_state ${1:<unit>} ${0:<boolean>}" ] },
	"unit_set_emotion": { "prefix": "unit_set_emotion", "description": "[1,2,3]  sets a unit's facial expression (-1 is none, other values depend on unit)", "body": [ "unit_set_emotion ${1:<unit>} ${0:<short>}" ] },
	"unit_set_emotion_animation": { "prefix": "unit_set_emotion_animation", "description": "[1,2]  sets the emotion animation to be used for the given unit", "body": [ "unit_set_emotion_animation ${1:<unit>} ${0:<string>}" ] },
	"unit_set_emotion_by_name": { "prefix": "unit_set_emotion_by_name", "description": "[3]  sets a unit's facial expression by name with weight and transition time", "body": [ "unit_set_emotion_by_name ${1:<unit>} ${2:<string_id>} ${3:<real>} ${0:<real>}" ] },
	"unit_set_emotional_state": { "prefix": "unit_set_emotional_state", "description": "[2]  sets a unit's facial expression by name with weight and transition time", "body": [ "unit_set_emotional_state ${1:<unit>} ${2:<string_id>} ${3:<real>} ${0:<short>}" ] },
	"unit_set_enterable_by_player": { "prefix": "unit_set_enterable_by_player", "description": "[1,2,3]  can be used to prevent the player from entering a vehicle", "body": [ "unit_set_enterable_by_player ${1:<unit>} ${0:<boolean>}" ] },
	"unit_set_integrated_flashlight": { "prefix": "unit_set_integrated_flashlight", "description": "[3]  sets a unit's flashlight on or off", "body": [ "unit_set_integrated_flashlight ${1:<unit>} ${0:<boolean>}" ] },
	"unit_set_maximum_vitality": { "prefix": "unit_set_maximum_vitality", "description": "[1,2,3]  sets a unit's maximum body and shield vitality", "body": [ "unit_set_maximum_vitality ${1:<unit>} ${2:<real>} ${0:<real>}" ] },
	"unit_set_prefer_tight_camera_track": { "prefix": "unit_set_prefer_tight_camera_track", "description": "[2,3]  sets the unit to prefer a tight camera track", "body": [ "unit_set_prefer_tight_camera_track ${1:<unit>} ${0:<boolean>}" ] },
	"unit_set_seat": { "prefix": "unit_set_seat", "description": "[1]  this unit will assume the named seat", "body": [ "unit_set_seat ${1:<unit>} ${0:<string>}" ] },
	"unit_solo_player_integrated_night_vision_is_active": { "prefix": "unit_solo_player_integrated_night_vision_is_active", "description": "[1]  <boolean>  returns whether the night-vision mode could be activated via the flashlight button", "body": [ "unit_solo_player_integrated_night_vision_is_active" ] },
	"unit_spew_action": { "prefix": "unit_spew_action", "description": "[3]  runs the spew unit action on the specified unit", "body": [ "unit_spew_action ${1:<unit>}" ] },
	"unit_start_first_person_custom_animation": { "prefix": "unit_start_first_person_custom_animation", "description": "[3]  <boolean>  starts a custom animation playing on a unit (puts away weapon if last parameter is TRUE)", "body": [ "unit_start_first_person_custom_animation ${1:<unit>} ${2:<animation_graph>} ${3:<string_id>} ${0:<boolean>}" ] },
	"unit_stop_custom_animation": { "prefix": "unit_stop_custom_animation", "description": "[1,2,3]  stops the custom animation running on the given unit.", "body": [ "unit_stop_custom_animation ${1:<unit>}" ] },
	"unit_stop_first_person_custom_animation": { "prefix": "unit_stop_first_person_custom_animation", "description": "[3]  ends any custom first person animation running on the unit", "body": [ "unit_stop_first_person_custom_animation ${1:<unit>}" ] },
	"unit_suspended": { "prefix": "unit_suspended", "description": "[1,2,3]  stops gravity from working on the given unit", "body": [ "unit_suspended ${1:<unit>} ${0:<boolean>}" ] },
	"units_set_current_vitality": { "prefix": "units_set_current_vitality", "description": "[1,2,3]  sets a group of units' current body and shield vitality", "body": [ "units_set_current_vitality ${1:<object_list>} ${2:<real>} ${0:<real>}" ] },
	"units_set_desired_flashlight_state": { "prefix": "units_set_desired_flashlight_state", "description": "[1]  sets the units' desired flashlight state", "body": [ "units_set_desired_flashlight_state ${1:<object_list>} ${0:<boolean>}" ] },
	"units_set_maximum_vitality": { "prefix": "units_set_maximum_vitality", "description": "[1,2,3]  sets a group of units' maximum body and shield vitality", "body": [ "units_set_maximum_vitality ${1:<object_list>} ${2:<real>} ${0:<real>}" ] },
	"update_remote_camera": { "prefix": "update_remote_camera", "description": "[2,3]  force synchronization of remote machine camera", "body": [ "update_remote_camera" ] },
	"user_interface_controller_get_last_level_played": { "prefix": "user_interface_controller_get_last_level_played", "description": "[2,3]  <long>  returns index of last completed solo level for profile index passed in", "body": [ "user_interface_controller_get_last_level_played ${1:<short>}" ] },
	"vehicle_auto_turret": { "prefix": "vehicle_auto_turret", "description": "[3]  Sets the specified trigger volume and parameters for an auto turret", "body": [ "vehicle_auto_turret ${1:<vehicle>} ${2:<trigger_volume>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"vehicle_count_bipeds_killed": { "prefix": "vehicle_count_bipeds_killed", "description": "[2,3]  <long>  returns how many people this vehicle has killed", "body": [ "vehicle_count_bipeds_killed ${1:<vehicle>}" ] },
	"vehicle_driver": { "prefix": "vehicle_driver", "description": "[1,2,3]  <unit>  returns the driver of a vehicle", "body": [ "vehicle_driver ${1:<unit>}" ] },
	"vehicle_enable_ghost_effects": { "prefix": "vehicle_enable_ghost_effects", "description": "[2,3]  ", "body": [ "vehicle_enable_ghost_effects ${1:<boolean>}" ] },
	"vehicle_flip": { "prefix": "vehicle_flip", "description": "[2,3]  Flips an overturned vehicle", "body": [ "vehicle_flip ${1:<vehicle>}" ] },
	"vehicle_gunner": { "prefix": "vehicle_gunner", "description": "[1,2,3]  <unit>  returns the gunner of a vehicle", "body": [ "vehicle_gunner ${1:<unit>}" ] },
	"vehicle_hover": { "prefix": "vehicle_hover", "description": "[1,2,3]  stops the vehicle from running real physics and runs fake hovering physics instead.", "body": [ "vehicle_hover ${1:<vehicle>} ${0:<boolean>}" ] },
	"vehicle_load_magic": { "prefix": "vehicle_load_magic", "description": "[1,2,3]  <short>  makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)", "body": [ "vehicle_load_magic ${1:<unit>} ${2:<string>} ${0:<object_list>}" ] },
	"vehicle_overturned": { "prefix": "vehicle_overturned", "description": "[2,3]  <boolean>  Returns true if the vehicle is overturned", "body": [ "vehicle_overturned ${1:<vehicle>}" ] },
	"vehicle_riders": { "prefix": "vehicle_riders", "description": "[1,2,3]  <object_list>  returns a list of all riders in a vehicle", "body": [ "vehicle_riders ${1:<unit>}" ] },
	"vehicle_test_seat": { "prefix": "vehicle_test_seat", "description": "[1,2,3]  <boolean>  tests whether the named seat has a specified unit in it (use \"\" to test all seats for this unit)", "body": [ "vehicle_test_seat ${1:<vehicle>} ${2:<string>} ${0:<unit>}" ] },
	"vehicle_test_seat_list": { "prefix": "vehicle_test_seat_list", "description": "[1,2,3]  <boolean>  tests whether the named seat has an object in the object list (use \"\" to test all seats for any unit in the list)", "body": [ "vehicle_test_seat_list ${1:<vehicle>} ${2:<string>} ${0:<object_list>}" ] },
	"vehicle_unload": { "prefix": "vehicle_unload", "description": "[1,2,3]  <short>  makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)", "body": [ "vehicle_unload ${1:<unit>} ${0:<string>}" ] },
	"version": { "prefix": "version", "description": "[1,2,3]  prints the build version.", "body": [ "version" ] },
	"voice_set_force_hud": { "prefix": "voice_set_force_hud", "description": "[3]  sets matchmaking voice hud", "body": [ "voice_set_force_hud ${1:<long>} ${0:<long>}" ] },
	"voice_set_force_match_configurations": { "prefix": "voice_set_force_match_configurations", "description": "[3]  sets matchmaking voice options", "body": [ "voice_set_force_match_configurations ${1:<long>} ${2:<long>} ${3:<long>} ${0:<boolean>}" ] },
	"voice_set_mute": { "prefix": "voice_set_mute", "description": "[3]  mute a player", "body": [ "voice_set_mute ${1:<long>} ${2:<long>} ${0:<boolean>}" ] },
	"voice_set_outgoing_channel_count": { "prefix": "voice_set_outgoing_channel_count", "description": "[2,3]  sets the outgoing channel count <in-game> <out-of-game>", "body": [ "voice_set_outgoing_channel_count ${1:<long>} ${0:<long>}" ] },
	"voice_set_voice_repeater_peer_index": { "prefix": "voice_set_voice_repeater_peer_index", "description": "[2,3]  sets the repeater peer index", "body": [ "voice_set_voice_repeater_peer_index ${1:<long>}" ] },
	"volume_return_objects": { "prefix": "volume_return_objects", "description": "[2,3]  <object_list>  returns list of objects in volume or (max 128).", "body": [ "volume_return_objects ${1:<trigger_volume>}" ] },
	"volume_return_objects_by_type": { "prefix": "volume_return_objects_by_type", "description": "[2,3]  <object_list>  returns list of objects in volume or (max 128).", "body": [ "volume_return_objects_by_type ${1:<trigger_volume>} ${0:<long>}" ] },
	"volume_teleport_players_not_inside": { "prefix": "volume_teleport_players_not_inside", "description": "[1,2,3]  moves all players outside a specified trigger volume to a specified flag.", "body": [ "volume_teleport_players_not_inside ${1:<trigger_volume>} ${0:<cutscene_flag>}" ] },
	"volume_test_object": { "prefix": "volume_test_object", "description": "[1,2,3]  <boolean>  returns true if the specified object is within the specified volume.", "body": [ "volume_test_object ${1:<trigger_volume>} ${0:<object>}" ] },
	"volume_test_objects": { "prefix": "volume_test_objects", "description": "[1,2,3]  <boolean>  returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed", "body": [ "volume_test_objects ${1:<trigger_volume>} ${0:<object_list>}" ] },
	"volume_test_objects_all": { "prefix": "volume_test_objects_all", "description": "[1,2,3]  <boolean>  returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed", "body": [ "volume_test_objects_all ${1:<trigger_volume>} ${0:<object_list>}" ] },
	"volume_test_players": { "prefix": "volume_test_players", "description": "[3]  <boolean>  returns true if any players are within the specified volume. trigger volume must have been postprocessed", "body": [ "volume_test_players ${1:<trigger_volume>}" ] },
	"volume_test_players_all": { "prefix": "volume_test_players_all", "description": "[3]  <boolean>  returns true if all players are within the specified volume. trigger volume must have been postprocessed", "body": [ "volume_test_players_all ${1:<trigger_volume>}" ] },
	"vs_abort_on_alert": { "prefix": "vs_abort_on_alert", "description": "[3]  Command script ends prematurely when actor's combat status raises to 'alert' or higher", "body": [ "vs_abort_on_alert ${1:<boolean>}" ] },
	"vs_abort_on_combat_status": { "prefix": "vs_abort_on_combat_status", "description": "[3]  Command script ends prematurely when actor's combat status rises to given level", "body": [ "vs_abort_on_combat_status ${1:<short>}" ] },
	"vs_abort_on_damage": { "prefix": "vs_abort_on_damage", "description": "[3]  Command script ends prematurely when actor is damaged", "body": [ "vs_abort_on_damage ${1:<boolean>}" ] },
	"vs_abort_on_vehicle_exit": { "prefix": "vs_abort_on_vehicle_exit", "description": "[3]  Command script ends prematurely when actor gets out of its vehicle", "body": [ "vs_abort_on_vehicle_exit ${1:<boolean>}" ] },
	"vs_action": { "prefix": "vs_action", "description": "[3]  Actor plays an AI action towards the given point. ai_action_<tab> to see action options", "body": [ "vs_action ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<short>}" ] },
	"vs_action_at_object": { "prefix": "vs_action_at_object", "description": "[3]  Actor plays an AI action towards the given object. ai_action_<tab> to see action options", "body": [ "vs_action_at_object ${1:<ai>} ${2:<boolean>} ${3:<object>} ${0:<short>}" ] },
	"vs_action_at_player": { "prefix": "vs_action_at_player", "description": "[3]  Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options", "body": [ "vs_action_at_player ${1:<ai>} ${2:<boolean>} ${0:<short>}" ] },
	"vs_aim": { "prefix": "vs_aim", "description": "[3]  Actor aims at the point for the remainder of the cs, or until overridden (overrides look)", "body": [ "vs_aim ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_aim_object": { "prefix": "vs_aim_object", "description": "[3]  Actor aims at the object for the duration of the cs, or until overridden (overrides look)", "body": [ "vs_aim_object ${1:<ai>} ${2:<boolean>} ${0:<object>}" ] },
	"vs_aim_player": { "prefix": "vs_aim_player", "description": "[3]  Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)", "body": [ "vs_aim_player ${1:<ai>} ${0:<boolean>}" ] },
	"vs_approach": { "prefix": "vs_approach", "description": "[3]  (approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)", "body": [ "vs_approach ${1:<ai>} ${2:<boolean>} ${3:<object>} ${4:<real>} ${5:<real>} ${0:<real>}" ] },
	"vs_approach_player": { "prefix": "vs_approach_player", "description": "[3]  (approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)", "body": [ "vs_approach_player ${1:<ai>} ${2:<boolean>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"vs_approach_stop": { "prefix": "vs_approach_stop", "description": "[3]  Actor stops approaching", "body": [ "vs_approach_stop ${1:<ai>}" ] },
	"vs_cast": { "prefix": "vs_cast", "description": "[3]  <boolean>  Cast 1 actor for a vignette (at the given priority, higher = more important)", "body": [ "vs_cast ${1:<ai>} ${2:<boolean>} ${3:<short>} ${0:<string_id>}" ] },
	"vs_crouch": { "prefix": "vs_crouch", "description": "[3]  Actor crouches for the remainder of the command script, or until overridden", "body": [ "vs_crouch ${1:<ai>} ${0:<boolean>}" ] },
	"vs_custom_animation": { "prefix": "vs_custom_animation", "description": "[3]  starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)", "body": [ "vs_custom_animation ${1:<ai>} ${2:<boolean>} ${3:<animation_graph>} ${4:<string_id>} ${0:<boolean>}" ] },
	"vs_custom_animation_death": { "prefix": "vs_custom_animation_death", "description": "[3]  starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)", "body": [ "vs_custom_animation_death ${1:<ai>} ${2:<boolean>} ${3:<animation_graph>} ${4:<string_id>} ${0:<boolean>}" ] },
	"vs_custom_animation_loop": { "prefix": "vs_custom_animation_loop", "description": "[3]  starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING", "body": [ "vs_custom_animation_loop ${1:<ai>} ${2:<animation_graph>} ${3:<string_id>} ${0:<boolean>}" ] },
	"vs_deploy_turret": { "prefix": "vs_deploy_turret", "description": "[3]  Deploy a turret at the given script point", "body": [ "vs_deploy_turret ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_die": { "prefix": "vs_die", "description": "[3]  Actor dies in specified manner", "body": [ "vs_die ${1:<ai>} ${2:<boolean>} ${0:<short>}" ] },
	"vs_draw": { "prefix": "vs_draw", "description": "[3]  Actor draws its current weapon", "body": [ "vs_draw ${1:<ai>}" ] },
	"vs_enable_dialogue": { "prefix": "vs_enable_dialogue", "description": "[3]  Actor combat dialogue enabled/disabled.", "body": [ "vs_enable_dialogue ${1:<ai>} ${0:<boolean>}" ] },
	"vs_enable_looking": { "prefix": "vs_enable_looking", "description": "[3]  Actor autonomous looking enabled/disabled.", "body": [ "vs_enable_looking ${1:<ai>} ${0:<boolean>}" ] },
	"vs_enable_moving": { "prefix": "vs_enable_moving", "description": "[3]  Actor autonomous moving enabled/disabled.", "body": [ "vs_enable_moving ${1:<ai>} ${0:<boolean>}" ] },
	"vs_enable_pathfinding_failsafe": { "prefix": "vs_enable_pathfinding_failsafe", "description": "[3]  Actor blocks until pathfinding calls succeed", "body": [ "vs_enable_pathfinding_failsafe ${1:<ai>} ${0:<boolean>}" ] },
	"vs_enable_targeting": { "prefix": "vs_enable_targeting", "description": "[3]  Actor autonomous target selection enabled/disabled.", "body": [ "vs_enable_targeting ${1:<ai>} ${0:<boolean>}" ] },
	"vs_equipment": { "prefix": "vs_equipment", "description": "[3]  Actor throws their equipment in the direction of the given point", "body": [ "vs_equipment ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_face": { "prefix": "vs_face", "description": "[3]  Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)", "body": [ "vs_face ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_face_object": { "prefix": "vs_face_object", "description": "[3]  Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)", "body": [ "vs_face_object ${1:<ai>} ${2:<boolean>} ${0:<object>}" ] },
	"vs_face_player": { "prefix": "vs_face_player", "description": "[3]  Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)", "body": [ "vs_face_player ${1:<ai>} ${0:<boolean>}" ] },
	"vs_fly_by": { "prefix": "vs_fly_by", "description": "[3]  Flies the actor through the given point", "body": [ "vs_fly_by ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_fly_to": { "prefix": "vs_fly_to", "description": "[3]  Flies the actor to the given point", "body": [ "vs_fly_to ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_fly_to_and_face": { "prefix": "vs_fly_to_and_face", "description": "[3]  Flies the actor to the given point and orients him in the appropriate direction", "body": [ "vs_fly_to_and_face ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<point_reference>}" ] },
	"vs_force_combat_status": { "prefix": "vs_force_combat_status", "description": "[3]  Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)", "body": [ "vs_force_combat_status ${1:<ai>} ${0:<short>}" ] },
	"vs_go_by": { "prefix": "vs_go_by", "description": "[3]  Actor moves toward the point, and considers it hit when it breaks the indicated plane", "body": [ "vs_go_by ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<point_reference>}" ] },
	"vs_go_to": { "prefix": "vs_go_to", "description": "[3]  Moves the actor to a specified point", "body": [ "vs_go_to ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_go_to_and_face": { "prefix": "vs_go_to_and_face", "description": "[3]  Moves the actor to a specified point and has him face the second point", "body": [ "vs_go_to_and_face ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<point_reference>}" ] },
	"vs_go_to_and_posture": { "prefix": "vs_go_to_and_posture", "description": "[3]  Actor moves to the point and performs a posture once there", "body": [ "vs_go_to_and_posture ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<string_id>}" ] },
	"vs_go_to_nearest": { "prefix": "vs_go_to_nearest", "description": "[3]  Given a point set, AI goes toward the nearest point", "body": [ "vs_go_to_nearest ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_go_to_vehicle": { "prefix": "vs_go_to_vehicle", "description": "[3]  Actor gets in the appropriate vehicle", "body": [ "vs_go_to_vehicle ${1:<ai>} ${2:<boolean>} ${0:<vehicle>}" ] },
	"vs_grenade": { "prefix": "vs_grenade", "description": "[3]  Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)", "body": [ "vs_grenade ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<short>}" ] },
	"vs_ignore_obstacles": { "prefix": "vs_ignore_obstacles", "description": "[3]  Actor does not avoid obstacles when true", "body": [ "vs_ignore_obstacles ${1:<ai>} ${0:<boolean>}" ] },
	"vs_jump": { "prefix": "vs_jump", "description": "[3]  Actor jumps in direction of angle at the given velocity (angle, velocity)", "body": [ "vs_jump ${1:<ai>} ${2:<boolean>} ${3:<real>} ${0:<real>}" ] },
	"vs_jump_to_point": { "prefix": "vs_jump_to_point", "description": "[3]  Actor jumps with given horizontal and vertical velocity", "body": [ "vs_jump_to_point ${1:<ai>} ${2:<boolean>} ${3:<real>} ${0:<real>}" ] },
	"vs_look": { "prefix": "vs_look", "description": "[3]  Actor looks at the point for the remainder of the cs, or until overridden", "body": [ "vs_look ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_look_object": { "prefix": "vs_look_object", "description": "[3]  Actor looks at the object for the duration of the cs, or until overridden", "body": [ "vs_look_object ${1:<ai>} ${2:<boolean>} ${0:<object>}" ] },
	"vs_look_player": { "prefix": "vs_look_player", "description": "[3]  Actor looks at nearest player for the duration of the cs, or until overridden", "body": [ "vs_look_player ${1:<ai>} ${0:<boolean>}" ] },
	"vs_lower_weapon": { "prefix": "vs_lower_weapon", "description": "[3]  Actor keeps weapon lowered", "body": [ "vs_lower_weapon ${1:<ai>} ${0:<boolean>}" ] },
	"vs_melee_direction": { "prefix": "vs_melee_direction", "description": "[3]  Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)", "body": [ "vs_melee_direction ${1:<ai>} ${2:<boolean>} ${0:<long>}" ] },
	"vs_move_in_direction": { "prefix": "vs_move_in_direction", "description": "[3]  Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)", "body": [ "vs_move_in_direction ${1:<ai>} ${2:<boolean>} ${3:<real>} ${4:<real>} ${0:<real>}" ] },
	"vs_move_towards": { "prefix": "vs_move_towards", "description": "[3]  Move in the direction of the given object", "body": [ "vs_move_towards ${1:<ai>} ${2:<boolean>} ${0:<object>}" ] },
	"vs_movement_mode": { "prefix": "vs_movement_mode", "description": "[3]  Actor switches to given animation mode", "body": [ "vs_movement_mode ${1:<ai>} ${0:<short>}" ] },
	"vs_pause": { "prefix": "vs_pause", "description": "[3]  The actor does nothing for the given number of seconds", "body": [ "vs_pause ${1:<ai>} ${2:<boolean>} ${0:<real>}" ] },
	"vs_play_line": { "prefix": "vs_play_line", "description": "[3]  Play the named line in the current scene", "body": [ "vs_play_line ${1:<ai>} ${2:<boolean>} ${0:<ai_line>}" ] },
	"vs_play_sound": { "prefix": "vs_play_sound", "description": "[3]  Actor plays an impulse sound and the atom blocks until it is complete", "body": [ "vs_play_sound ${1:<ai>} ${2:<boolean>} ${0:<sound>}" ] },
	"vs_player_melee": { "prefix": "vs_player_melee", "description": "[3]  Actor performs player-specific melee", "body": [ "vs_player_melee ${1:<ai>} ${2:<boolean>} ${0:<long>}" ] },
	"vs_posture_exit": { "prefix": "vs_posture_exit", "description": "[3]  Actor exits the posture it's in", "body": [ "vs_posture_exit ${1:<ai>}" ] },
	"vs_posture_set": { "prefix": "vs_posture_set", "description": "[3]  Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)", "body": [ "vs_posture_set ${1:<ai>} ${2:<string_id>} ${0:<boolean>}" ] },
	"vs_release": { "prefix": "vs_release", "description": "[3]  Lets the given ai out of the current command script", "body": [ "vs_release ${1:<ai>}" ] },
	"vs_release_all": { "prefix": "vs_release_all", "description": "[3]  Releases all the ai attached to the current thread", "body": [ "vs_release_all" ] },
	"vs_reserve": { "prefix": "vs_reserve", "description": "[3]  Reserves the specified actor(s) for the use of the current script (discarding any other command scripts in the queue)", "body": [ "vs_reserve ${1:<ai>} ${0:<short>}" ] },
	"vs_role": { "prefix": "vs_role", "description": "[3]  <ai>  Returns the given member of the cast (as per more recent vs_cast call)", "body": [ "vs_role ${1:<short>}" ] },
	"vs_running_atom": { "prefix": "vs_running_atom", "description": "[3]  <boolean>  Returns true if the ai is running any atom", "body": [ "vs_running_atom ${1:<ai>}" ] },
	"vs_running_atom_action": { "prefix": "vs_running_atom_action", "description": "[3]  <boolean>  Returns true if the ai is running an atom on the action channel", "body": [ "vs_running_atom_action ${1:<ai>}" ] },
	"vs_running_atom_dialogue": { "prefix": "vs_running_atom_dialogue", "description": "[3]  <boolean>  Returns true if the ai is running an atom on the dialogue channel", "body": [ "vs_running_atom_dialogue ${1:<ai>}" ] },
	"vs_running_atom_movement": { "prefix": "vs_running_atom_movement", "description": "[3]  <boolean>  Returns true if the ai is running an atom on the movement channel", "body": [ "vs_running_atom_movement ${1:<ai>}" ] },
	"vs_set_cleanup_script": { "prefix": "vs_set_cleanup_script", "description": "[3]  Sets the script that is automatically called when the current thread ends", "body": [ "vs_set_cleanup_script ${1:<script>}" ] },
	"vs_set_pathfinding_radius": { "prefix": "vs_set_pathfinding_radius", "description": "[3]  Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script", "body": [ "vs_set_pathfinding_radius ${1:<ai>} ${0:<real>}" ] },
	"vs_set_style": { "prefix": "vs_set_style", "description": "[3]  Override the actor's style", "body": [ "vs_set_style ${1:<ai>} ${0:<style>}" ] },
	"vs_shoot": { "prefix": "vs_shoot", "description": "[3]  Actor is allowed to shoot at its target or not", "body": [ "vs_shoot ${1:<ai>} ${0:<boolean>}" ] },
	"vs_shoot_point": { "prefix": "vs_shoot_point", "description": "[3]  Actor shoots at given point", "body": [ "vs_shoot_point ${1:<ai>} ${2:<boolean>} ${0:<point_reference>}" ] },
	"vs_shoot_secondary_trigger": { "prefix": "vs_shoot_secondary_trigger", "description": "[3]  Actor uses secondary trigger whenever he shoots", "body": [ "vs_shoot_secondary_trigger ${1:<ai>} ${0:<boolean>}" ] },
	"vs_smash_direction": { "prefix": "vs_smash_direction", "description": "[3]  Actor performs smash in provided direction", "body": [ "vs_smash_direction ${1:<ai>} ${2:<boolean>} ${0:<long>}" ] },
	"vs_stop_custom_animation": { "prefix": "vs_stop_custom_animation", "description": "[3]  Stop running a custom animation", "body": [ "vs_stop_custom_animation ${1:<ai>}" ] },
	"vs_stop_sound": { "prefix": "vs_stop_sound", "description": "[3]  Stops the specified impulse sound.", "body": [ "vs_stop_sound ${1:<ai>} ${0:<sound>}" ] },
	"vs_stow": { "prefix": "vs_stow", "description": "[3]  Actor stows its current weapon", "body": [ "vs_stow ${1:<ai>}" ] },
	"vs_suppress_activity_termination": { "prefix": "vs_suppress_activity_termination", "description": "[3]  Autonomous termination of activities is suppressed for the remainder of the command script", "body": [ "vs_suppress_activity_termination ${1:<ai>} ${0:<boolean>}" ] },
	"vs_suppress_dialogue_global": { "prefix": "vs_suppress_dialogue_global", "description": "[3]  Combat dialogue is suppressed for the remainder of the command script", "body": [ "vs_suppress_dialogue_global ${1:<ai>} ${0:<boolean>}" ] },
	"vs_swarm_from": { "prefix": "vs_swarm_from", "description": "[3]  A swarm swarms away from the point in question, going at least the given distance", "body": [ "vs_swarm_from ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<real>}" ] },
	"vs_swarm_to": { "prefix": "vs_swarm_to", "description": "[3]  A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius", "body": [ "vs_swarm_to ${1:<ai>} ${2:<boolean>} ${3:<point_reference>} ${0:<real>}" ] },
	"vs_teleport": { "prefix": "vs_teleport", "description": "[3]  Actor teleports to point1 facing point2", "body": [ "vs_teleport ${1:<ai>} ${2:<point_reference>} ${0:<point_reference>}" ] },
	"vs_turn_sharpness": { "prefix": "vs_turn_sharpness", "description": "[3]  Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)", "body": [ "vs_turn_sharpness ${1:<ai>} ${2:<boolean>} ${0:<real>}" ] },
	"vs_vehicle_boost": { "prefix": "vs_vehicle_boost", "description": "[3]  Enables or disables boost", "body": [ "vs_vehicle_boost ${1:<ai>} ${0:<boolean>}" ] },
	"vs_vehicle_speed": { "prefix": "vs_vehicle_speed", "description": "[3]  Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1", "body": [ "vs_vehicle_speed ${1:<ai>} ${0:<real>}" ] },
	"vs_vehicle_speed_instantaneous": { "prefix": "vs_vehicle_speed_instantaneous", "description": "[3]  Set the instantaneous speed of the vehicle we're driving", "body": [ "vs_vehicle_speed_instantaneous ${1:<ai>} ${0:<real>}" ] },
	"vs_vocalize": { "prefix": "vs_vocalize", "description": "[3]  Actor emits vocalization of given type", "body": [ "vs_vocalize ${1:<ai>} ${2:<boolean>} ${0:<short>}" ] },
	"vs_walk": { "prefix": "vs_walk", "description": "[3]  Actor walks for the remainder of the command script, or until overridden", "body": [ "vs_walk ${1:<ai>} ${0:<boolean>}" ] },
	"wake": { "prefix": "wake", "description": "[1,2,3]  wakes a sleeping script in the next update.", "body": [ "wake ${1:<script_name>}" ] },
	"water_float_reset": { "prefix": "water_float_reset", "description": "[3]  allows an object to continue floating", "body": [ "water_float_reset ${1:<object>}" ] },
	"weapon_enable_warthog_chaingun_light": { "prefix": "weapon_enable_warthog_chaingun_light", "description": "[2,3]  turns the trigger for a weapon  on/off", "body": [ "weapon_enable_warthog_chaingun_light ${1:<boolean>}" ] },
	"weapon_hold_trigger": { "prefix": "weapon_hold_trigger", "description": "[2,3]  turns the trigger for a weapon  on/off", "body": [ "weapon_hold_trigger ${1:<weapon>} ${2:<long>} ${0:<boolean>}" ] },
	"weather_change_intensity": { "prefix": "weather_change_intensity", "description": "[2]  <time> <intensity>", "body": [ "weather_change_intensity ${1:<real>} ${0:<real>}" ] },
	"weather_start": { "prefix": "weather_start", "description": "[2]  <time>", "body": [ "weather_start ${1:<real>}" ] },
	"weather_stop": { "prefix": "weather_stop", "description": "[2]  <time>", "body": [ "weather_stop ${1:<real>}" ] },
	"webstats_disable": { "prefix": "webstats_disable", "description": "[2,3]  disables webstats", "body": [ "webstats_disable ${1:<boolean>}" ] },
	"webstats_test_submit": { "prefix": "webstats_test_submit", "description": "[2,3]  submits a string to webstats upload", "body": [ "webstats_test_submit ${1:<string>}" ] },
	"webstats_test_submit_campaign": { "prefix": "webstats_test_submit_campaign", "description": "[3]  submits a test campaign blob to webstats", "body": [ "webstats_test_submit_campaign" ] },
	"webstats_test_submit_multiplayer": { "prefix": "webstats_test_submit_multiplayer", "description": "[3]  submits a test multiplayer blob to webstats", "body": [ "webstats_test_submit_multiplayer" ] },
	"webstats_throttle_bandwidth": { "prefix": "webstats_throttle_bandwidth", "description": "[3]  <bytes per second> sets the maximum bandwidth that webstats can use", "body": [ "webstats_throttle_bandwidth ${1:<long>}" ] },
	"xoverlapped_debug_render": { "prefix": "xoverlapped_debug_render", "description": "[3]  toggle display a list of active xoverlapped tasks", "body": [ "xoverlapped_debug_render ${1:<boolean>}" ] },
	"zone_set_trigger_volume_enable": { "prefix": "zone_set_trigger_volume_enable", "description": "[3]  enables/disables the trigger volume(s) with the given name that cause zone set switches", "body": [ "zone_set_trigger_volume_enable ${1:<string_id>} ${0:<boolean>}" ] }
	
}